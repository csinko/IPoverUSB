ARM GAS  /tmp/ccQmNNsx.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"bsp_usb.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.BSP_USB_Deinit,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	BSP_USB_Deinit:
  27              	.LVL0:
  28              	.LFB158:
  29              		.file 1 "BSP_STM32H7xx/bsp_usb.c"
   1:BSP_STM32H7xx/bsp_usb.c **** /**
   2:BSP_STM32H7xx/bsp_usb.c ****   ******************************************************************************
   3:BSP_STM32H7xx/bsp_usb.c ****   * @file    bsp_usb.c
   4:BSP_STM32H7xx/bsp_usb.c ****   * @author  Benedek Kupper
   5:BSP_STM32H7xx/bsp_usb.c ****   * @version 0.1
   6:BSP_STM32H7xx/bsp_usb.c ****   * @date    2018-12-16
   7:BSP_STM32H7xx/bsp_usb.c ****   * @brief   IPoverUSB BSP for USB communication
   8:BSP_STM32H7xx/bsp_usb.c ****   *
   9:BSP_STM32H7xx/bsp_usb.c ****   * Copyright (c) 2018 Benedek Kupper
  10:BSP_STM32H7xx/bsp_usb.c ****   *
  11:BSP_STM32H7xx/bsp_usb.c ****   * Licensed under the Apache License, Version 2.0 (the "License");
  12:BSP_STM32H7xx/bsp_usb.c ****   * you may not use this file except in compliance with the License.
  13:BSP_STM32H7xx/bsp_usb.c ****   * You may obtain a copy of the License at
  14:BSP_STM32H7xx/bsp_usb.c ****   *
  15:BSP_STM32H7xx/bsp_usb.c ****   *     http://www.apache.org/licenses/LICENSE-2.0
  16:BSP_STM32H7xx/bsp_usb.c ****   *
  17:BSP_STM32H7xx/bsp_usb.c ****   * Unless required by applicable law or agreed to in writing, software
  18:BSP_STM32H7xx/bsp_usb.c ****   * distributed under the License is distributed on an "AS IS" BASIS,
  19:BSP_STM32H7xx/bsp_usb.c ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  20:BSP_STM32H7xx/bsp_usb.c ****   * See the License for the specific language governing permissions and
  21:BSP_STM32H7xx/bsp_usb.c ****   * limitations under the License.
  22:BSP_STM32H7xx/bsp_usb.c ****   */
  23:BSP_STM32H7xx/bsp_usb.c **** #include <bsp_io.h>
  24:BSP_STM32H7xx/bsp_usb.c **** #include <bsp_usb.h>
  25:BSP_STM32H7xx/bsp_usb.c **** #include <xpd_nvic.h>
  26:BSP_STM32H7xx/bsp_usb.c **** 
  27:BSP_STM32H7xx/bsp_usb.c **** void OTG_FS_IRQHandler(void);
  28:BSP_STM32H7xx/bsp_usb.c **** void OTG_FS_WKUP_IRQHandler(void);
  29:BSP_STM32H7xx/bsp_usb.c **** 
ARM GAS  /tmp/ccQmNNsx.s 			page 2


  30:BSP_STM32H7xx/bsp_usb.c **** /* USB dependencies initialization */
  31:BSP_STM32H7xx/bsp_usb.c **** static void BSP_USB_Init(void * handle)
  32:BSP_STM32H7xx/bsp_usb.c **** {
  33:BSP_STM32H7xx/bsp_usb.c ****     /* GPIO settings */
  34:BSP_STM32H7xx/bsp_usb.c ****     GPIO_vInitPin(USB_DM_PIN, USB_DM_CFG);
  35:BSP_STM32H7xx/bsp_usb.c ****     GPIO_vInitPin(USB_DP_PIN, USB_DP_CFG);
  36:BSP_STM32H7xx/bsp_usb.c **** 
  37:BSP_STM32H7xx/bsp_usb.c ****     NVIC_SetPriorityConfig(OTG_FS_IRQn, 0x6, 0);
  38:BSP_STM32H7xx/bsp_usb.c ****     NVIC_EnableIRQ(OTG_FS_IRQn);
  39:BSP_STM32H7xx/bsp_usb.c **** }
  40:BSP_STM32H7xx/bsp_usb.c **** 
  41:BSP_STM32H7xx/bsp_usb.c **** /* USB dependencies deinitialization */
  42:BSP_STM32H7xx/bsp_usb.c **** static void BSP_USB_Deinit(void * handle)
  43:BSP_STM32H7xx/bsp_usb.c **** {
  30              		.loc 1 43 1 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  44:BSP_STM32H7xx/bsp_usb.c ****     GPIO_vDeinitPin(USB_DM_PIN);
  34              		.loc 1 44 5 view .LVU1
  43:BSP_STM32H7xx/bsp_usb.c ****     GPIO_vDeinitPin(USB_DM_PIN);
  35              		.loc 1 43 1 is_stmt 0 view .LVU2
  36 0000 08B5     		push	{r3, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 8
  39              		.cfi_offset 3, -8
  40              		.cfi_offset 14, -4
  41              		.loc 1 44 5 view .LVU3
  42 0002 0B20     		movs	r0, #11
  43              	.LVL1:
  44              		.loc 1 44 5 view .LVU4
  45 0004 FFF7FEFF 		bl	GPIO_vDeinitPin
  46              	.LVL2:
  45:BSP_STM32H7xx/bsp_usb.c ****     GPIO_vDeinitPin(USB_DP_PIN);
  47              		.loc 1 45 5 is_stmt 1 view .LVU5
  48 0008 0C20     		movs	r0, #12
  49 000a FFF7FEFF 		bl	GPIO_vDeinitPin
  50              	.LVL3:
  46:BSP_STM32H7xx/bsp_usb.c ****     NVIC_DisableIRQ(OTG_FS_IRQn);
  51              		.loc 1 46 5 view .LVU6
  52              	.LBB28:
  53              	.LBI28:
  54              		.file 2 "STM32_XPD/CMSIS/Include/core_cm7.h"
   1:STM32_XPD/CMSIS/Include/core_cm7.h **** /**************************************************************************//**
   2:STM32_XPD/CMSIS/Include/core_cm7.h ****  * @file     core_cm7.h
   3:STM32_XPD/CMSIS/Include/core_cm7.h ****  * @brief    CMSIS Cortex-M7 Core Peripheral Access Layer Header File
   4:STM32_XPD/CMSIS/Include/core_cm7.h ****  * @version  V5.0.8
   5:STM32_XPD/CMSIS/Include/core_cm7.h ****  * @date     04. June 2018
   6:STM32_XPD/CMSIS/Include/core_cm7.h ****  ******************************************************************************/
   7:STM32_XPD/CMSIS/Include/core_cm7.h **** /*
   8:STM32_XPD/CMSIS/Include/core_cm7.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:STM32_XPD/CMSIS/Include/core_cm7.h ****  *
  10:STM32_XPD/CMSIS/Include/core_cm7.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32_XPD/CMSIS/Include/core_cm7.h ****  *
  12:STM32_XPD/CMSIS/Include/core_cm7.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32_XPD/CMSIS/Include/core_cm7.h ****  * not use this file except in compliance with the License.
  14:STM32_XPD/CMSIS/Include/core_cm7.h ****  * You may obtain a copy of the License at
ARM GAS  /tmp/ccQmNNsx.s 			page 3


  15:STM32_XPD/CMSIS/Include/core_cm7.h ****  *
  16:STM32_XPD/CMSIS/Include/core_cm7.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32_XPD/CMSIS/Include/core_cm7.h ****  *
  18:STM32_XPD/CMSIS/Include/core_cm7.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32_XPD/CMSIS/Include/core_cm7.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32_XPD/CMSIS/Include/core_cm7.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32_XPD/CMSIS/Include/core_cm7.h ****  * See the License for the specific language governing permissions and
  22:STM32_XPD/CMSIS/Include/core_cm7.h ****  * limitations under the License.
  23:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
  24:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  25:STM32_XPD/CMSIS/Include/core_cm7.h **** #if   defined ( __ICCARM__ )
  26:STM32_XPD/CMSIS/Include/core_cm7.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:STM32_XPD/CMSIS/Include/core_cm7.h **** #elif defined (__clang__)
  28:STM32_XPD/CMSIS/Include/core_cm7.h ****   #pragma clang system_header   /* treat file as system include file */
  29:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif
  30:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  31:STM32_XPD/CMSIS/Include/core_cm7.h **** #ifndef __CORE_CM7_H_GENERIC
  32:STM32_XPD/CMSIS/Include/core_cm7.h **** #define __CORE_CM7_H_GENERIC
  33:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  34:STM32_XPD/CMSIS/Include/core_cm7.h **** #include <stdint.h>
  35:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  36:STM32_XPD/CMSIS/Include/core_cm7.h **** #ifdef __cplusplus
  37:STM32_XPD/CMSIS/Include/core_cm7.h ****  extern "C" {
  38:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif
  39:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  40:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
  41:STM32_XPD/CMSIS/Include/core_cm7.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:STM32_XPD/CMSIS/Include/core_cm7.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  44:STM32_XPD/CMSIS/Include/core_cm7.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:STM32_XPD/CMSIS/Include/core_cm7.h ****      Function definitions in header files are used to allow 'inlining'.
  46:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  47:STM32_XPD/CMSIS/Include/core_cm7.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:STM32_XPD/CMSIS/Include/core_cm7.h ****      Unions are used for effective representation of core registers.
  49:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  50:STM32_XPD/CMSIS/Include/core_cm7.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:STM32_XPD/CMSIS/Include/core_cm7.h ****      Function-like macros are used to allow more efficient code.
  52:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
  53:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  54:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  55:STM32_XPD/CMSIS/Include/core_cm7.h **** /*******************************************************************************
  56:STM32_XPD/CMSIS/Include/core_cm7.h ****  *                 CMSIS definitions
  57:STM32_XPD/CMSIS/Include/core_cm7.h ****  ******************************************************************************/
  58:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
  59:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup Cortex_M7
  60:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
  61:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
  62:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  63:STM32_XPD/CMSIS/Include/core_cm7.h **** #include "cmsis_version.h"
  64:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  65:STM32_XPD/CMSIS/Include/core_cm7.h **** /* CMSIS CM7 definitions */
  66:STM32_XPD/CMSIS/Include/core_cm7.h **** #define __CM7_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [31:1
  67:STM32_XPD/CMSIS/Include/core_cm7.h **** #define __CM7_CMSIS_VERSION_SUB   ( __CM_CMSIS_VERSION_SUB)                  /*!< \deprecated [15:0
  68:STM32_XPD/CMSIS/Include/core_cm7.h **** #define __CM7_CMSIS_VERSION       ((__CM7_CMSIS_VERSION_MAIN << 16U) | \
  69:STM32_XPD/CMSIS/Include/core_cm7.h ****                                     __CM7_CMSIS_VERSION_SUB           )      /*!< \deprecated CMSIS
  70:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  71:STM32_XPD/CMSIS/Include/core_cm7.h **** #define __CORTEX_M                (7U)                                       /*!< Cortex-M Core */
ARM GAS  /tmp/ccQmNNsx.s 			page 4


  72:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  73:STM32_XPD/CMSIS/Include/core_cm7.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:STM32_XPD/CMSIS/Include/core_cm7.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
  75:STM32_XPD/CMSIS/Include/core_cm7.h **** */
  76:STM32_XPD/CMSIS/Include/core_cm7.h **** #if defined ( __CC_ARM )
  77:STM32_XPD/CMSIS/Include/core_cm7.h ****   #if defined __TARGET_FPU_VFP
  78:STM32_XPD/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
  80:STM32_XPD/CMSIS/Include/core_cm7.h ****     #else
  81:STM32_XPD/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
  83:STM32_XPD/CMSIS/Include/core_cm7.h ****     #endif
  84:STM32_XPD/CMSIS/Include/core_cm7.h ****   #else
  85:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
  86:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
  87:STM32_XPD/CMSIS/Include/core_cm7.h **** 
  88:STM32_XPD/CMSIS/Include/core_cm7.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:STM32_XPD/CMSIS/Include/core_cm7.h ****   #if defined __ARM_PCS_VFP
  90:STM32_XPD/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
  92:STM32_XPD/CMSIS/Include/core_cm7.h ****     #else
  93:STM32_XPD/CMSIS/Include/core_cm7.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
  95:STM32_XPD/CMSIS/Include/core_cm7.h ****     #endif
  96:STM32_XPD/CMSIS/Include/core_cm7.h ****   #else
  97:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
  98:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
  99:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 100:STM32_XPD/CMSIS/Include/core_cm7.h **** #elif defined ( __GNUC__ )
 101:STM32_XPD/CMSIS/Include/core_cm7.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:STM32_XPD/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
 104:STM32_XPD/CMSIS/Include/core_cm7.h ****     #else
 105:STM32_XPD/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
 107:STM32_XPD/CMSIS/Include/core_cm7.h ****     #endif
 108:STM32_XPD/CMSIS/Include/core_cm7.h ****   #else
 109:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
 110:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 111:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 112:STM32_XPD/CMSIS/Include/core_cm7.h **** #elif defined ( __ICCARM__ )
 113:STM32_XPD/CMSIS/Include/core_cm7.h ****   #if defined __ARMVFP__
 114:STM32_XPD/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
 116:STM32_XPD/CMSIS/Include/core_cm7.h ****     #else
 117:STM32_XPD/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
 119:STM32_XPD/CMSIS/Include/core_cm7.h ****     #endif
 120:STM32_XPD/CMSIS/Include/core_cm7.h ****   #else
 121:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
 122:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 123:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 124:STM32_XPD/CMSIS/Include/core_cm7.h **** #elif defined ( __TI_ARM__ )
 125:STM32_XPD/CMSIS/Include/core_cm7.h ****   #if defined __TI_VFP_SUPPORT__
 126:STM32_XPD/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
 128:STM32_XPD/CMSIS/Include/core_cm7.h ****     #else
ARM GAS  /tmp/ccQmNNsx.s 			page 5


 129:STM32_XPD/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
 131:STM32_XPD/CMSIS/Include/core_cm7.h ****     #endif
 132:STM32_XPD/CMSIS/Include/core_cm7.h ****   #else
 133:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
 134:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 135:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 136:STM32_XPD/CMSIS/Include/core_cm7.h **** #elif defined ( __TASKING__ )
 137:STM32_XPD/CMSIS/Include/core_cm7.h ****   #if defined __FPU_VFP__
 138:STM32_XPD/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
 140:STM32_XPD/CMSIS/Include/core_cm7.h ****     #else
 141:STM32_XPD/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
 143:STM32_XPD/CMSIS/Include/core_cm7.h ****     #endif
 144:STM32_XPD/CMSIS/Include/core_cm7.h ****   #else
 145:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
 146:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 147:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 148:STM32_XPD/CMSIS/Include/core_cm7.h **** #elif defined ( __CSMC__ )
 149:STM32_XPD/CMSIS/Include/core_cm7.h ****   #if ( __CSMC__ & 0x400U)
 150:STM32_XPD/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
 152:STM32_XPD/CMSIS/Include/core_cm7.h ****     #else
 153:STM32_XPD/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:STM32_XPD/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
 155:STM32_XPD/CMSIS/Include/core_cm7.h ****     #endif
 156:STM32_XPD/CMSIS/Include/core_cm7.h ****   #else
 157:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
 158:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 159:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 160:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif
 161:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 162:STM32_XPD/CMSIS/Include/core_cm7.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 164:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 165:STM32_XPD/CMSIS/Include/core_cm7.h **** #ifdef __cplusplus
 166:STM32_XPD/CMSIS/Include/core_cm7.h **** }
 167:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif
 168:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 169:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif /* __CORE_CM7_H_GENERIC */
 170:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 171:STM32_XPD/CMSIS/Include/core_cm7.h **** #ifndef __CMSIS_GENERIC
 172:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 173:STM32_XPD/CMSIS/Include/core_cm7.h **** #ifndef __CORE_CM7_H_DEPENDANT
 174:STM32_XPD/CMSIS/Include/core_cm7.h **** #define __CORE_CM7_H_DEPENDANT
 175:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 176:STM32_XPD/CMSIS/Include/core_cm7.h **** #ifdef __cplusplus
 177:STM32_XPD/CMSIS/Include/core_cm7.h ****  extern "C" {
 178:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif
 179:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 180:STM32_XPD/CMSIS/Include/core_cm7.h **** /* check device defines and use defaults */
 181:STM32_XPD/CMSIS/Include/core_cm7.h **** #if defined __CHECK_DEVICE_DEFINES
 182:STM32_XPD/CMSIS/Include/core_cm7.h ****   #ifndef __CM7_REV
 183:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __CM7_REV               0x0000U
 184:STM32_XPD/CMSIS/Include/core_cm7.h ****     #warning "__CM7_REV not defined in device header file; using default!"
 185:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
ARM GAS  /tmp/ccQmNNsx.s 			page 6


 186:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 187:STM32_XPD/CMSIS/Include/core_cm7.h ****   #ifndef __FPU_PRESENT
 188:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __FPU_PRESENT             0U
 189:STM32_XPD/CMSIS/Include/core_cm7.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 191:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 192:STM32_XPD/CMSIS/Include/core_cm7.h ****   #ifndef __MPU_PRESENT
 193:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __MPU_PRESENT             0U
 194:STM32_XPD/CMSIS/Include/core_cm7.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 196:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 197:STM32_XPD/CMSIS/Include/core_cm7.h ****   #ifndef __ICACHE_PRESENT
 198:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __ICACHE_PRESENT          0U
 199:STM32_XPD/CMSIS/Include/core_cm7.h ****     #warning "__ICACHE_PRESENT not defined in device header file; using default!"
 200:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 201:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 202:STM32_XPD/CMSIS/Include/core_cm7.h ****   #ifndef __DCACHE_PRESENT
 203:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __DCACHE_PRESENT          0U
 204:STM32_XPD/CMSIS/Include/core_cm7.h ****     #warning "__DCACHE_PRESENT not defined in device header file; using default!"
 205:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 206:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 207:STM32_XPD/CMSIS/Include/core_cm7.h ****   #ifndef __DTCM_PRESENT
 208:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __DTCM_PRESENT            0U
 209:STM32_XPD/CMSIS/Include/core_cm7.h ****     #warning "__DTCM_PRESENT        not defined in device header file; using default!"
 210:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 211:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 212:STM32_XPD/CMSIS/Include/core_cm7.h ****   #ifndef __NVIC_PRIO_BITS
 213:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __NVIC_PRIO_BITS          3U
 214:STM32_XPD/CMSIS/Include/core_cm7.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 215:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 216:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 217:STM32_XPD/CMSIS/Include/core_cm7.h ****   #ifndef __Vendor_SysTickConfig
 218:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define __Vendor_SysTickConfig    0U
 219:STM32_XPD/CMSIS/Include/core_cm7.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 220:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
 221:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif
 222:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 223:STM32_XPD/CMSIS/Include/core_cm7.h **** /* IO definitions (access restrictions to peripheral registers) */
 224:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 225:STM32_XPD/CMSIS/Include/core_cm7.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 226:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 227:STM32_XPD/CMSIS/Include/core_cm7.h ****     <strong>IO Type Qualifiers</strong> are used
 228:STM32_XPD/CMSIS/Include/core_cm7.h ****     \li to specify the access to peripheral variables.
 229:STM32_XPD/CMSIS/Include/core_cm7.h ****     \li for automatic generation of peripheral register debug information.
 230:STM32_XPD/CMSIS/Include/core_cm7.h **** */
 231:STM32_XPD/CMSIS/Include/core_cm7.h **** #ifdef __cplusplus
 232:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 233:STM32_XPD/CMSIS/Include/core_cm7.h **** #else
 234:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 235:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif
 236:STM32_XPD/CMSIS/Include/core_cm7.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 237:STM32_XPD/CMSIS/Include/core_cm7.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 238:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 239:STM32_XPD/CMSIS/Include/core_cm7.h **** /* following defines should be used for structure members */
 240:STM32_XPD/CMSIS/Include/core_cm7.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 241:STM32_XPD/CMSIS/Include/core_cm7.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 242:STM32_XPD/CMSIS/Include/core_cm7.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
ARM GAS  /tmp/ccQmNNsx.s 			page 7


 243:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 244:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} end of group Cortex_M7 */
 245:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 246:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 247:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 248:STM32_XPD/CMSIS/Include/core_cm7.h **** /*******************************************************************************
 249:STM32_XPD/CMSIS/Include/core_cm7.h ****  *                 Register Abstraction
 250:STM32_XPD/CMSIS/Include/core_cm7.h ****   Core Register contain:
 251:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core Register
 252:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core NVIC Register
 253:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core SCB Register
 254:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core SysTick Register
 255:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core Debug Register
 256:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core MPU Register
 257:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core FPU Register
 258:STM32_XPD/CMSIS/Include/core_cm7.h ****  ******************************************************************************/
 259:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 260:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 261:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 262:STM32_XPD/CMSIS/Include/core_cm7.h **** */
 263:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 264:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 265:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup    CMSIS_core_register
 266:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 267:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief      Core Register type definitions.
 268:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
 269:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 270:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 271:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 272:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 273:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 274:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef union
 275:STM32_XPD/CMSIS/Include/core_cm7.h **** {
 276:STM32_XPD/CMSIS/Include/core_cm7.h ****   struct
 277:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
 278:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 279:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 280:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 281:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 282:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 283:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 284:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 285:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 286:STM32_XPD/CMSIS/Include/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 287:STM32_XPD/CMSIS/Include/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 288:STM32_XPD/CMSIS/Include/core_cm7.h **** } APSR_Type;
 289:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 290:STM32_XPD/CMSIS/Include/core_cm7.h **** /* APSR Register Definitions */
 291:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 292:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 293:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 294:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 295:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 296:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 297:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 298:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 299:STM32_XPD/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccQmNNsx.s 			page 8


 300:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 301:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 302:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 303:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 304:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 305:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 306:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 307:STM32_XPD/CMSIS/Include/core_cm7.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 308:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 309:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 310:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 311:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 312:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 313:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef union
 314:STM32_XPD/CMSIS/Include/core_cm7.h **** {
 315:STM32_XPD/CMSIS/Include/core_cm7.h ****   struct
 316:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
 317:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 318:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 319:STM32_XPD/CMSIS/Include/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 320:STM32_XPD/CMSIS/Include/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 321:STM32_XPD/CMSIS/Include/core_cm7.h **** } IPSR_Type;
 322:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 323:STM32_XPD/CMSIS/Include/core_cm7.h **** /* IPSR Register Definitions */
 324:STM32_XPD/CMSIS/Include/core_cm7.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 325:STM32_XPD/CMSIS/Include/core_cm7.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 326:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 327:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 328:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 329:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 330:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 331:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef union
 332:STM32_XPD/CMSIS/Include/core_cm7.h **** {
 333:STM32_XPD/CMSIS/Include/core_cm7.h ****   struct
 334:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
 335:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 336:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 337:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 338:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 339:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 340:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 341:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 342:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 343:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 344:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 345:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 346:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 347:STM32_XPD/CMSIS/Include/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 348:STM32_XPD/CMSIS/Include/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 349:STM32_XPD/CMSIS/Include/core_cm7.h **** } xPSR_Type;
 350:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 351:STM32_XPD/CMSIS/Include/core_cm7.h **** /* xPSR Register Definitions */
 352:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 353:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 354:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 355:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 356:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
ARM GAS  /tmp/ccQmNNsx.s 			page 9


 357:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 358:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 359:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 360:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 361:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 362:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 363:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 364:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 365:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 366:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 367:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 368:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 369:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 370:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 371:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 372:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 373:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 374:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 375:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 376:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 377:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 378:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 379:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 380:STM32_XPD/CMSIS/Include/core_cm7.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 381:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 382:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 383:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 384:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Union type to access the Control Registers (CONTROL).
 385:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 386:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef union
 387:STM32_XPD/CMSIS/Include/core_cm7.h **** {
 388:STM32_XPD/CMSIS/Include/core_cm7.h ****   struct
 389:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
 390:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 391:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 392:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 393:STM32_XPD/CMSIS/Include/core_cm7.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 394:STM32_XPD/CMSIS/Include/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 395:STM32_XPD/CMSIS/Include/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 396:STM32_XPD/CMSIS/Include/core_cm7.h **** } CONTROL_Type;
 397:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 398:STM32_XPD/CMSIS/Include/core_cm7.h **** /* CONTROL Register Definitions */
 399:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 400:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 401:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 402:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 403:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 404:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 405:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 406:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 407:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 408:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_CORE */
 409:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 410:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 411:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 412:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup    CMSIS_core_register
 413:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
ARM GAS  /tmp/ccQmNNsx.s 			page 10


 414:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief      Type definitions for the NVIC Registers
 415:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
 416:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 417:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 418:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 419:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 420:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 421:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef struct
 422:STM32_XPD/CMSIS/Include/core_cm7.h **** {
 423:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 424:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[24U];
 425:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 426:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RSERVED1[24U];
 427:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 428:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED2[24U];
 429:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 430:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED3[24U];
 431:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 432:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED4[56U];
 433:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 434:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED5[644U];
 435:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 436:STM32_XPD/CMSIS/Include/core_cm7.h **** }  NVIC_Type;
 437:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 438:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Software Triggered Interrupt Register Definitions */
 439:STM32_XPD/CMSIS/Include/core_cm7.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 440:STM32_XPD/CMSIS/Include/core_cm7.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 441:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 442:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_NVIC */
 443:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 444:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 445:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 446:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
 447:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 448:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the System Control Block Registers
 449:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
 450:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 451:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 452:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 453:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the System Control Block (SCB).
 454:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 455:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef struct
 456:STM32_XPD/CMSIS/Include/core_cm7.h **** {
 457:STM32_XPD/CMSIS/Include/core_cm7.h ****   union {
 458:STM32_XPD/CMSIS/Include/core_cm7.h ****     struct {
 459:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IM uint32_t REVISION : 4;
 460:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IM uint32_t PARTNO : 12;
 461:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IM uint32_t ARCHITECTURE : 4;
 462:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IM uint32_t VARIANT : 4;
 463:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IM uint32_t IMPLEMENTER : 8;
 464:STM32_XPD/CMSIS/Include/core_cm7.h ****     } b;
 465:STM32_XPD/CMSIS/Include/core_cm7.h ****     __IM uint32_t w;
 466:STM32_XPD/CMSIS/Include/core_cm7.h ****   } CPUID;
 467:STM32_XPD/CMSIS/Include/core_cm7.h ****   union {
 468:STM32_XPD/CMSIS/Include/core_cm7.h ****     struct {
 469:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t VECTACTIVE : 9;
 470:STM32_XPD/CMSIS/Include/core_cm7.h ****             uint32_t __RESERVED0 : 2;
ARM GAS  /tmp/ccQmNNsx.s 			page 11


 471:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t RETTOBASE : 1;
 472:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t VECTPENDING : 9;
 473:STM32_XPD/CMSIS/Include/core_cm7.h ****             uint32_t __RESERVED1 : 1;
 474:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t ISRPENDING : 1;
 475:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t ISRPREEMPT : 1;
 476:STM32_XPD/CMSIS/Include/core_cm7.h ****             uint32_t __RESERVED2 : 1;
 477:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t PENDSTCLR : 1;
 478:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t PENDSTSET : 1;
 479:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t PENDSVCLR : 1;
 480:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t PENDSVSET : 1;
 481:STM32_XPD/CMSIS/Include/core_cm7.h ****             uint32_t __RESERVED3 : 2;
 482:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t NMIPENDSET : 1;
 483:STM32_XPD/CMSIS/Include/core_cm7.h ****     } b;
 484:STM32_XPD/CMSIS/Include/core_cm7.h ****     __IOM uint32_t w;
 485:STM32_XPD/CMSIS/Include/core_cm7.h ****   } ICSR;
 486:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t VTOR;
 487:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t AIRCR;
 488:STM32_XPD/CMSIS/Include/core_cm7.h ****   union {
 489:STM32_XPD/CMSIS/Include/core_cm7.h ****     struct {
 490:STM32_XPD/CMSIS/Include/core_cm7.h ****               uint32_t __RESERVED0 : 1;
 491:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t SLEEPONEXIT : 1;
 492:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t SLEEPDEEP : 1;
 493:STM32_XPD/CMSIS/Include/core_cm7.h ****               uint32_t __RESERVED1 : 1;
 494:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t SEVONPEND : 1;
 495:STM32_XPD/CMSIS/Include/core_cm7.h ****               uint32_t __RESERVED2 : 27;
 496:STM32_XPD/CMSIS/Include/core_cm7.h ****     } b;
 497:STM32_XPD/CMSIS/Include/core_cm7.h ****     __IOM uint32_t w;
 498:STM32_XPD/CMSIS/Include/core_cm7.h ****   } SCR;
 499:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CCR;
 500:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint8_t  SHPR[12U];              /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 501:STM32_XPD/CMSIS/Include/core_cm7.h ****   union {
 502:STM32_XPD/CMSIS/Include/core_cm7.h ****     struct {
 503:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t MEMFAULTACT : 1;
 504:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t BUSFAULTACT : 1;
 505:STM32_XPD/CMSIS/Include/core_cm7.h ****               uint32_t __RESERVED0 : 1;
 506:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t USGFAULTACT : 1;
 507:STM32_XPD/CMSIS/Include/core_cm7.h ****               uint32_t __RESERVED1 : 3;
 508:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t SVCALLACT : 1;
 509:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t MONITORACT : 1;
 510:STM32_XPD/CMSIS/Include/core_cm7.h ****               uint32_t __RESERVED2 : 1;
 511:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t PENDSVACT : 1;
 512:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t SYSTICKACT : 1;
 513:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t USGFAULTPENDED : 1;
 514:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t MEMFAULTPENDED : 1;
 515:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t BUSFAULTPENDED : 1;
 516:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t SVCALLPENDED : 1;
 517:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t MEMFAULTENA : 1;
 518:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t BUSFAULTENA : 1;
 519:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t USGFAULTENA : 1;
 520:STM32_XPD/CMSIS/Include/core_cm7.h ****               uint32_t __RESERVED3 : 13;
 521:STM32_XPD/CMSIS/Include/core_cm7.h ****     } b;
 522:STM32_XPD/CMSIS/Include/core_cm7.h ****     __IOM uint32_t w;
 523:STM32_XPD/CMSIS/Include/core_cm7.h ****   } SHCSR;
 524:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 525:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 526:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 527:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
ARM GAS  /tmp/ccQmNNsx.s 			page 12


 528:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 529:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 530:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ID_PFR[2U];             /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 531:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ID_DFR;                 /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 532:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ID_AFR;                 /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 533:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ID_MFR[4U];             /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 534:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ID_ISAR[5U];            /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 535:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[1U];
 536:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CLIDR;                  /*!< Offset: 0x078 (R/ )  Cache Level ID register */
 537:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CTR;                    /*!< Offset: 0x07C (R/ )  Cache Type register */
 538:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CCSIDR;                 /*!< Offset: 0x080 (R/ )  Cache Size ID Register */
 539:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CSSELR;                 /*!< Offset: 0x084 (R/W)  Cache Size Selection Register */
 540:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 541:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED3[93U];
 542:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0x200 ( /W)  Software Triggered Interrupt Reg
 543:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED4[15U];
 544:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x240 (R/ )  Media and VFP Feature Register 0
 545:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x244 (R/ )  Media and VFP Feature Register 1
 546:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR2;                  /*!< Offset: 0x248 (R/ )  Media and VFP Feature Register 2
 547:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED5[1U];
 548:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t ICIALLU;                /*!< Offset: 0x250 ( /W)  I-Cache Invalidate All to PoU */
 549:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED6[1U];
 550:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t ICIMVAU;                /*!< Offset: 0x258 ( /W)  I-Cache Invalidate by MVA to PoU
 551:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCIMVAC;                /*!< Offset: 0x25C ( /W)  D-Cache Invalidate by MVA to PoC
 552:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCISW;                  /*!< Offset: 0x260 ( /W)  D-Cache Invalidate by Set-way */
 553:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCCMVAU;                /*!< Offset: 0x264 ( /W)  D-Cache Clean by MVA to PoU */
 554:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCCMVAC;                /*!< Offset: 0x268 ( /W)  D-Cache Clean by MVA to PoC */
 555:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCCSW;                  /*!< Offset: 0x26C ( /W)  D-Cache Clean by Set-way */
 556:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCCIMVAC;               /*!< Offset: 0x270 ( /W)  D-Cache Clean and Invalidate by 
 557:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCCISW;                 /*!< Offset: 0x274 ( /W)  D-Cache Clean and Invalidate by 
 558:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED7[6U];
 559:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ITCMCR;                 /*!< Offset: 0x290 (R/W)  Instruction Tightly-Coupled Memo
 560:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t DTCMCR;                 /*!< Offset: 0x294 (R/W)  Data Tightly-Coupled Memory Cont
 561:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t AHBPCR;                 /*!< Offset: 0x298 (R/W)  AHBP Control Register */
 562:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CACR;                   /*!< Offset: 0x29C (R/W)  L1 Cache Control Register */
 563:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t AHBSCR;                 /*!< Offset: 0x2A0 (R/W)  AHB Slave Control Register */
 564:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED8[1U];
 565:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ABFSR;                  /*!< Offset: 0x2A8 (R/W)  Auxiliary Bus Fault Status Regis
 566:STM32_XPD/CMSIS/Include/core_cm7.h **** } SCB_Type;
 567:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 568:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB CPUID Register Definitions */
 569:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 570:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 571:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 572:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 573:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 574:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 575:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 576:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 577:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 578:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 579:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 580:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 581:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 582:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 583:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 584:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Interrupt Control State Register Definitions */
ARM GAS  /tmp/ccQmNNsx.s 			page 13


 585:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 586:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 587:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 588:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 589:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 590:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 591:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 592:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 593:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 594:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 595:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 596:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 597:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 598:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 599:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 600:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 601:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 602:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 603:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 604:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 605:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 606:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 607:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 608:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 609:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 610:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 611:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 612:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 613:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 614:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 615:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Vector Table Offset Register Definitions */
 616:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 617:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 618:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 619:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 620:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 621:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 622:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 623:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 624:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 625:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 626:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 627:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 628:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 629:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 630:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 631:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 632:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 633:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 634:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 635:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 636:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 637:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 638:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 639:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 640:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 641:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB System Control Register Definitions */
ARM GAS  /tmp/ccQmNNsx.s 			page 14


 642:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 643:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 644:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 645:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 646:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 647:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 648:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 649:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 650:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 651:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Configuration Control Register Definitions */
 652:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_BP_Pos                      18U                                           /*!< SCB 
 653:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_BP_Msk                     (1UL << SCB_CCR_BP_Pos)                        /*!< SCB 
 654:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 655:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_IC_Pos                      17U                                           /*!< SCB 
 656:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_IC_Msk                     (1UL << SCB_CCR_IC_Pos)                        /*!< SCB 
 657:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 658:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_DC_Pos                      16U                                           /*!< SCB 
 659:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_DC_Msk                     (1UL << SCB_CCR_DC_Pos)                        /*!< SCB 
 660:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 661:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 662:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 663:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 664:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 665:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 666:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 667:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 668:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 669:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 670:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 671:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 672:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 673:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 674:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 675:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 676:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 677:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 678:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 679:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB System Handler Control and State Register Definitions */
 680:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 681:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 682:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 683:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 684:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 685:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 686:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 687:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 688:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 689:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 690:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 691:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 692:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 693:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 694:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 695:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 696:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 697:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 698:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
ARM GAS  /tmp/ccQmNNsx.s 			page 15


 699:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 700:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 701:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 702:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 703:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 704:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 705:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 706:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 707:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 708:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 709:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 710:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 711:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 712:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 713:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 714:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 715:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 716:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 717:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 718:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 719:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 720:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 721:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 722:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Configurable Fault Status Register Definitions */
 723:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 724:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 725:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 726:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 727:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 728:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 729:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 730:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 731:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 732:STM32_XPD/CMSIS/Include/core_cm7.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 733:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 734:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 735:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 736:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 737:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 738:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 739:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 740:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 741:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 742:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 743:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 744:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 745:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 746:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 747:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 748:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 749:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 750:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 751:STM32_XPD/CMSIS/Include/core_cm7.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 752:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 753:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 754:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 755:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
ARM GAS  /tmp/ccQmNNsx.s 			page 16


 756:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 757:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 758:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 759:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 760:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 761:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 762:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 763:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 764:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 765:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 766:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 767:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 768:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 769:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 770:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 771:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 772:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 773:STM32_XPD/CMSIS/Include/core_cm7.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 774:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 775:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 776:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 777:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 778:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 779:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 780:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 781:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 782:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 783:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 784:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 785:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 786:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 787:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 788:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 789:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 790:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 791:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 792:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Hard Fault Status Register Definitions */
 793:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 794:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 795:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 796:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 797:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 798:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 799:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 800:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 801:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 802:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Debug Fault Status Register Definitions */
 803:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 804:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 805:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 806:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 807:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 808:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 809:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 810:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 811:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 812:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
ARM GAS  /tmp/ccQmNNsx.s 			page 17


 813:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 814:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 815:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 816:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 817:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 818:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Cache Level ID Register Definitions */
 819:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CLIDR_LOUU_Pos                 27U                                            /*!< SCB 
 820:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CLIDR_LOUU_Msk                 (7UL << SCB_CLIDR_LOUU_Pos)                    /*!< SCB 
 821:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 822:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CLIDR_LOC_Pos                  24U                                            /*!< SCB 
 823:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CLIDR_LOC_Msk                  (7UL << SCB_CLIDR_LOC_Pos)                     /*!< SCB 
 824:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 825:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Cache Type Register Definitions */
 826:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CTR_FORMAT_Pos                 29U                                            /*!< SCB 
 827:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CTR_FORMAT_Msk                 (7UL << SCB_CTR_FORMAT_Pos)                    /*!< SCB 
 828:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 829:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CTR_CWG_Pos                    24U                                            /*!< SCB 
 830:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CTR_CWG_Msk                    (0xFUL << SCB_CTR_CWG_Pos)                     /*!< SCB 
 831:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 832:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CTR_ERG_Pos                    20U                                            /*!< SCB 
 833:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CTR_ERG_Msk                    (0xFUL << SCB_CTR_ERG_Pos)                     /*!< SCB 
 834:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 835:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CTR_DMINLINE_Pos               16U                                            /*!< SCB 
 836:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CTR_DMINLINE_Msk               (0xFUL << SCB_CTR_DMINLINE_Pos)                /*!< SCB 
 837:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 838:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CTR_IMINLINE_Pos                0U                                            /*!< SCB 
 839:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CTR_IMINLINE_Msk               (0xFUL /*<< SCB_CTR_IMINLINE_Pos*/)            /*!< SCB 
 840:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 841:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Cache Size ID Register Definitions */
 842:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WT_Pos                  31U                                            /*!< SCB 
 843:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WT_Msk                  (1UL << SCB_CCSIDR_WT_Pos)                     /*!< SCB 
 844:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 845:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WB_Pos                  30U                                            /*!< SCB 
 846:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WB_Msk                  (1UL << SCB_CCSIDR_WB_Pos)                     /*!< SCB 
 847:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 848:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_RA_Pos                  29U                                            /*!< SCB 
 849:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_RA_Msk                  (1UL << SCB_CCSIDR_RA_Pos)                     /*!< SCB 
 850:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 851:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WA_Pos                  28U                                            /*!< SCB 
 852:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WA_Msk                  (1UL << SCB_CCSIDR_WA_Pos)                     /*!< SCB 
 853:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 854:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_NUMSETS_Pos             13U                                            /*!< SCB 
 855:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_NUMSETS_Msk             (0x7FFFUL << SCB_CCSIDR_NUMSETS_Pos)           /*!< SCB 
 856:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 857:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_ASSOCIATIVITY_Pos        3U                                            /*!< SCB 
 858:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_ASSOCIATIVITY_Msk       (0x3FFUL << SCB_CCSIDR_ASSOCIATIVITY_Pos)      /*!< SCB 
 859:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 860:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_LINESIZE_Pos             0U                                            /*!< SCB 
 861:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_LINESIZE_Msk            (7UL /*<< SCB_CCSIDR_LINESIZE_Pos*/)           /*!< SCB 
 862:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 863:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Cache Size Selection Register Definitions */
 864:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CSSELR_LEVEL_Pos                1U                                            /*!< SCB 
 865:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CSSELR_LEVEL_Msk               (7UL << SCB_CSSELR_LEVEL_Pos)                  /*!< SCB 
 866:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 867:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CSSELR_IND_Pos                  0U                                            /*!< SCB 
 868:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CSSELR_IND_Msk                 (1UL /*<< SCB_CSSELR_IND_Pos*/)                /*!< SCB 
 869:STM32_XPD/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccQmNNsx.s 			page 18


 870:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB Software Triggered Interrupt Register Definitions */
 871:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_STIR_INTID_Pos                  0U                                            /*!< SCB 
 872:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_STIR_INTID_Msk                 (0x1FFUL /*<< SCB_STIR_INTID_Pos*/)            /*!< SCB 
 873:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 874:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB D-Cache Invalidate by Set-way Register Definitions */
 875:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCISW_WAY_Pos                  30U                                            /*!< SCB 
 876:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCISW_WAY_Msk                  (3UL << SCB_DCISW_WAY_Pos)                     /*!< SCB 
 877:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 878:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCISW_SET_Pos                   5U                                            /*!< SCB 
 879:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCISW_SET_Msk                  (0x1FFUL << SCB_DCISW_SET_Pos)                 /*!< SCB 
 880:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 881:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB D-Cache Clean by Set-way Register Definitions */
 882:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCCSW_WAY_Pos                  30U                                            /*!< SCB 
 883:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCCSW_WAY_Msk                  (3UL << SCB_DCCSW_WAY_Pos)                     /*!< SCB 
 884:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 885:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCCSW_SET_Pos                   5U                                            /*!< SCB 
 886:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCCSW_SET_Msk                  (0x1FFUL << SCB_DCCSW_SET_Pos)                 /*!< SCB 
 887:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 888:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SCB D-Cache Clean and Invalidate by Set-way Register Definitions */
 889:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCCISW_WAY_Pos                 30U                                            /*!< SCB 
 890:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCCISW_WAY_Msk                 (3UL << SCB_DCCISW_WAY_Pos)                    /*!< SCB 
 891:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 892:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCCISW_SET_Pos                  5U                                            /*!< SCB 
 893:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DCCISW_SET_Msk                 (0x1FFUL << SCB_DCCISW_SET_Pos)                /*!< SCB 
 894:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 895:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Instruction Tightly-Coupled Memory Control Register Definitions */
 896:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_SZ_Pos                   3U                                            /*!< SCB 
 897:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_SZ_Msk                  (0xFUL << SCB_ITCMCR_SZ_Pos)                   /*!< SCB 
 898:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 899:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_RETEN_Pos                2U                                            /*!< SCB 
 900:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_RETEN_Msk               (1UL << SCB_ITCMCR_RETEN_Pos)                  /*!< SCB 
 901:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 902:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_RMW_Pos                  1U                                            /*!< SCB 
 903:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_RMW_Msk                 (1UL << SCB_ITCMCR_RMW_Pos)                    /*!< SCB 
 904:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 905:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_EN_Pos                   0U                                            /*!< SCB 
 906:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_EN_Msk                  (1UL /*<< SCB_ITCMCR_EN_Pos*/)                 /*!< SCB 
 907:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 908:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Data Tightly-Coupled Memory Control Register Definitions */
 909:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_SZ_Pos                   3U                                            /*!< SCB 
 910:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_SZ_Msk                  (0xFUL << SCB_DTCMCR_SZ_Pos)                   /*!< SCB 
 911:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 912:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_RETEN_Pos                2U                                            /*!< SCB 
 913:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_RETEN_Msk               (1UL << SCB_DTCMCR_RETEN_Pos)                   /*!< SCB
 914:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 915:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_RMW_Pos                  1U                                            /*!< SCB 
 916:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_RMW_Msk                 (1UL << SCB_DTCMCR_RMW_Pos)                    /*!< SCB 
 917:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 918:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_EN_Pos                   0U                                            /*!< SCB 
 919:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_EN_Msk                  (1UL /*<< SCB_DTCMCR_EN_Pos*/)                 /*!< SCB 
 920:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 921:STM32_XPD/CMSIS/Include/core_cm7.h **** /* AHBP Control Register Definitions */
 922:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AHBPCR_SZ_Pos                   1U                                            /*!< SCB 
 923:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AHBPCR_SZ_Msk                  (7UL << SCB_AHBPCR_SZ_Pos)                     /*!< SCB 
 924:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 925:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AHBPCR_EN_Pos                   0U                                            /*!< SCB 
 926:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AHBPCR_EN_Msk                  (1UL /*<< SCB_AHBPCR_EN_Pos*/)                 /*!< SCB 
ARM GAS  /tmp/ccQmNNsx.s 			page 19


 927:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 928:STM32_XPD/CMSIS/Include/core_cm7.h **** /* L1 Cache Control Register Definitions */
 929:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CACR_FORCEWT_Pos                2U                                            /*!< SCB 
 930:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CACR_FORCEWT_Msk               (1UL << SCB_CACR_FORCEWT_Pos)                  /*!< SCB 
 931:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 932:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CACR_ECCEN_Pos                  1U                                            /*!< SCB 
 933:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CACR_ECCEN_Msk                 (1UL << SCB_CACR_ECCEN_Pos)                    /*!< SCB 
 934:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 935:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CACR_SIWT_Pos                   0U                                            /*!< SCB 
 936:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_CACR_SIWT_Msk                  (1UL /*<< SCB_CACR_SIWT_Pos*/)                 /*!< SCB 
 937:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 938:STM32_XPD/CMSIS/Include/core_cm7.h **** /* AHBS Control Register Definitions */
 939:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_INITCOUNT_Pos           11U                                            /*!< SCB 
 940:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_INITCOUNT_Msk           (0x1FUL << SCB_AHBPCR_INITCOUNT_Pos)           /*!< SCB 
 941:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 942:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_TPRI_Pos                 2U                                            /*!< SCB 
 943:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_TPRI_Msk                (0x1FFUL << SCB_AHBPCR_TPRI_Pos)               /*!< SCB 
 944:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 945:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_CTL_Pos                  0U                                            /*!< SCB 
 946:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_CTL_Msk                 (3UL /*<< SCB_AHBPCR_CTL_Pos*/)                /*!< SCB 
 947:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 948:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Auxiliary Bus Fault Status Register Definitions */
 949:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AXIMTYPE_Pos              8U                                            /*!< SCB 
 950:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AXIMTYPE_Msk             (3UL << SCB_ABFSR_AXIMTYPE_Pos)                /*!< SCB 
 951:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 952:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_EPPB_Pos                  4U                                            /*!< SCB 
 953:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_EPPB_Msk                 (1UL << SCB_ABFSR_EPPB_Pos)                    /*!< SCB 
 954:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 955:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AXIM_Pos                  3U                                            /*!< SCB 
 956:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AXIM_Msk                 (1UL << SCB_ABFSR_AXIM_Pos)                    /*!< SCB 
 957:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 958:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AHBP_Pos                  2U                                            /*!< SCB 
 959:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AHBP_Msk                 (1UL << SCB_ABFSR_AHBP_Pos)                    /*!< SCB 
 960:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 961:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_DTCM_Pos                  1U                                            /*!< SCB 
 962:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_DTCM_Msk                 (1UL << SCB_ABFSR_DTCM_Pos)                    /*!< SCB 
 963:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 964:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_ITCM_Pos                  0U                                            /*!< SCB 
 965:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_ITCM_Msk                 (1UL /*<< SCB_ABFSR_ITCM_Pos*/)                /*!< SCB 
 966:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 967:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_SCB */
 968:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 969:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 970:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 971:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
 972:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 973:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 974:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
 975:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 976:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 977:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
 978:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 979:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
 980:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef struct
 981:STM32_XPD/CMSIS/Include/core_cm7.h **** {
 982:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[1U];
 983:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
ARM GAS  /tmp/ccQmNNsx.s 			page 20


 984:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 985:STM32_XPD/CMSIS/Include/core_cm7.h **** } SCnSCB_Type;
 986:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 987:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Interrupt Controller Type Register Definitions */
 988:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 989:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 990:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 991:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Auxiliary Control Register Definitions */
 992:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISITMATBFLUSH_Pos    12U                                         /*!< ACTLR: 
 993:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISITMATBFLUSH_Msk    (1UL << SCnSCB_ACTLR_DISITMATBFLUSH_Pos)    /*!< ACTLR: 
 994:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 995:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISRAMODE_Pos         11U                                         /*!< ACTLR: 
 996:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISRAMODE_Msk         (1UL << SCnSCB_ACTLR_DISRAMODE_Pos)         /*!< ACTLR: 
 997:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 998:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_FPEXCODIS_Pos         10U                                         /*!< ACTLR: 
 999:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_FPEXCODIS_Msk         (1UL << SCnSCB_ACTLR_FPEXCODIS_Pos)         /*!< ACTLR: 
1000:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1001:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
1002:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
1003:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1004:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
1005:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
1006:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1007:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_SCnotSCB */
1008:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1009:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1010:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1011:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1012:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
1013:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the System Timer Registers.
1014:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
1015:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1016:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1017:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1018:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the System Timer (SysTick).
1019:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1020:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef struct
1021:STM32_XPD/CMSIS/Include/core_cm7.h **** {
1022:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
1023:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
1024:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
1025:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
1026:STM32_XPD/CMSIS/Include/core_cm7.h **** } SysTick_Type;
1027:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1028:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SysTick Control / Status Register Definitions */
1029:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
1030:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
1031:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1032:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
1033:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
1034:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1035:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
1036:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
1037:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1038:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
1039:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
1040:STM32_XPD/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccQmNNsx.s 			page 21


1041:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SysTick Reload Register Definitions */
1042:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
1043:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
1044:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1045:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SysTick Current Register Definitions */
1046:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
1047:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
1048:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1049:STM32_XPD/CMSIS/Include/core_cm7.h **** /* SysTick Calibration Register Definitions */
1050:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
1051:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
1052:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1053:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
1054:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
1055:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1056:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
1057:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
1058:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1059:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_SysTick */
1060:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1061:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1062:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1063:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1064:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
1065:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
1066:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
1067:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1068:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1069:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1070:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
1071:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1072:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef struct
1073:STM32_XPD/CMSIS/Include/core_cm7.h **** {
1074:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  union
1075:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
1076:STM32_XPD/CMSIS/Include/core_cm7.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
1077:STM32_XPD/CMSIS/Include/core_cm7.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
1078:STM32_XPD/CMSIS/Include/core_cm7.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
1079:STM32_XPD/CMSIS/Include/core_cm7.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
1080:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[864U];
1081:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
1082:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED1[15U];
1083:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
1084:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED2[15U];
1085:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
1086:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED3[29U];
1087:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
1088:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
1089:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
1090:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED4[43U];
1091:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
1092:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
1093:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED5[6U];
1094:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
1095:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
1096:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
1097:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
ARM GAS  /tmp/ccQmNNsx.s 			page 22


1098:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
1099:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
1100:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
1101:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
1102:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
1103:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
1104:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
1105:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
1106:STM32_XPD/CMSIS/Include/core_cm7.h **** } ITM_Type;
1107:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1108:STM32_XPD/CMSIS/Include/core_cm7.h **** /* ITM Trace Privilege Register Definitions */
1109:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
1110:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
1111:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1112:STM32_XPD/CMSIS/Include/core_cm7.h **** /* ITM Trace Control Register Definitions */
1113:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
1114:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
1115:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1116:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
1117:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
1118:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1119:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
1120:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
1121:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1122:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
1123:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
1124:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1125:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
1126:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
1127:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1128:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
1129:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
1130:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1131:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
1132:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
1133:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1134:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
1135:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
1136:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1137:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
1138:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
1139:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1140:STM32_XPD/CMSIS/Include/core_cm7.h **** /* ITM Integration Write Register Definitions */
1141:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
1142:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
1143:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1144:STM32_XPD/CMSIS/Include/core_cm7.h **** /* ITM Integration Read Register Definitions */
1145:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
1146:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
1147:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1148:STM32_XPD/CMSIS/Include/core_cm7.h **** /* ITM Integration Mode Control Register Definitions */
1149:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
1150:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
1151:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1152:STM32_XPD/CMSIS/Include/core_cm7.h **** /* ITM Lock Status Register Definitions */
1153:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
1154:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
ARM GAS  /tmp/ccQmNNsx.s 			page 23


1155:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1156:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
1157:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
1158:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1159:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
1160:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
1161:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1162:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@}*/ /* end of group CMSIS_ITM */
1163:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1164:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1165:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1166:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1167:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
1168:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
1169:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
1170:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1171:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1172:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1173:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
1174:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1175:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef struct
1176:STM32_XPD/CMSIS/Include/core_cm7.h **** {
1177:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
1178:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
1179:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
1180:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
1181:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
1182:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
1183:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
1184:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
1185:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
1186:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
1187:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
1188:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[1U];
1189:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
1190:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
1191:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
1192:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED1[1U];
1193:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
1194:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
1195:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
1196:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED2[1U];
1197:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
1198:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
1199:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
1200:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED3[981U];
1201:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 (  W)  Lock Access Register */
1202:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R  )  Lock Status Register */
1203:STM32_XPD/CMSIS/Include/core_cm7.h **** } DWT_Type;
1204:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1205:STM32_XPD/CMSIS/Include/core_cm7.h **** /* DWT Control Register Definitions */
1206:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
1207:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
1208:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1209:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
1210:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
1211:STM32_XPD/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccQmNNsx.s 			page 24


1212:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
1213:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
1214:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1215:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
1216:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
1217:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1218:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
1219:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
1220:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1221:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
1222:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
1223:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1224:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
1225:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
1226:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1227:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
1228:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
1229:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1230:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
1231:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
1232:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1233:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
1234:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
1235:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1236:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
1237:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
1238:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1239:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
1240:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
1241:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1242:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
1243:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
1244:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1245:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
1246:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
1247:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1248:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
1249:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
1250:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1251:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
1252:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
1253:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1254:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
1255:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
1256:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1257:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
1258:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
1259:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1260:STM32_XPD/CMSIS/Include/core_cm7.h **** /* DWT CPI Count Register Definitions */
1261:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
1262:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
1263:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1264:STM32_XPD/CMSIS/Include/core_cm7.h **** /* DWT Exception Overhead Count Register Definitions */
1265:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1266:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1267:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1268:STM32_XPD/CMSIS/Include/core_cm7.h **** /* DWT Sleep Count Register Definitions */
ARM GAS  /tmp/ccQmNNsx.s 			page 25


1269:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1270:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1271:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1272:STM32_XPD/CMSIS/Include/core_cm7.h **** /* DWT LSU Count Register Definitions */
1273:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
1274:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1275:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1276:STM32_XPD/CMSIS/Include/core_cm7.h **** /* DWT Folded-instruction Count Register Definitions */
1277:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1278:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1279:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1280:STM32_XPD/CMSIS/Include/core_cm7.h **** /* DWT Comparator Mask Register Definitions */
1281:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1282:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1283:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1284:STM32_XPD/CMSIS/Include/core_cm7.h **** /* DWT Comparator Function Register Definitions */
1285:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1286:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1287:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1288:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1289:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1290:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1291:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1292:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1293:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1294:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1295:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1296:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1297:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1298:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1299:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1300:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1301:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1302:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1303:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1304:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1305:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1306:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1307:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1308:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1309:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1310:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1311:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1312:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@}*/ /* end of group CMSIS_DWT */
1313:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1314:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1315:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1316:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1317:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1318:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1319:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
1320:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1321:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1322:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1323:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1324:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1325:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef struct
ARM GAS  /tmp/ccQmNNsx.s 			page 26


1326:STM32_XPD/CMSIS/Include/core_cm7.h **** {
1327:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1328:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1329:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[2U];
1330:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1331:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED1[55U];
1332:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1333:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED2[131U];
1334:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1335:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1336:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1337:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED3[759U];
1338:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1339:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1340:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1341:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED4[1U];
1342:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1343:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1344:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1345:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED5[39U];
1346:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1347:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1348:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED7[8U];
1349:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1350:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1351:STM32_XPD/CMSIS/Include/core_cm7.h **** } TPI_Type;
1352:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1353:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1354:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1355:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1356:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1357:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI Selected Pin Protocol Register Definitions */
1358:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1359:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1360:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1361:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI Formatter and Flush Status Register Definitions */
1362:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1363:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1364:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1365:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1366:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1367:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1368:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1369:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1370:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1371:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1372:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1373:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1374:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI Formatter and Flush Control Register Definitions */
1375:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1376:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1377:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1378:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1379:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1380:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1381:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI TRIGGER Register Definitions */
1382:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
ARM GAS  /tmp/ccQmNNsx.s 			page 27


1383:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1384:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1385:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1386:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1387:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1388:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1389:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1390:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1391:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1392:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1393:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1394:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1395:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1396:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1397:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1398:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1399:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1400:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1401:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1402:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1403:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1404:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1405:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1406:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1407:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI ITATBCTR2 Register Definitions */
1408:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1409:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1410:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1411:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1412:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1413:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1414:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1415:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1416:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1417:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1418:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1419:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1420:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1421:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1422:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1423:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1424:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1425:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1426:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1427:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1428:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1429:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1430:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1431:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1432:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1433:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1434:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1435:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1436:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI ITATBCTR0 Register Definitions */
1437:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1438:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1439:STM32_XPD/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccQmNNsx.s 			page 28


1440:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1441:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1442:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1443:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI Integration Mode Control Register Definitions */
1444:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1445:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1446:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1447:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI DEVID Register Definitions */
1448:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1449:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1450:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1451:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1452:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1453:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1454:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1455:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1456:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1457:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1458:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1459:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1460:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1461:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1462:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1463:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1464:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1465:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1466:STM32_XPD/CMSIS/Include/core_cm7.h **** /* TPI DEVTYPE Register Definitions */
1467:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1468:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1469:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1470:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1471:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1472:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1473:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@}*/ /* end of group CMSIS_TPI */
1474:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1475:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1476:STM32_XPD/CMSIS/Include/core_cm7.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1477:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1478:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1479:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1480:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1481:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
1482:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1483:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1484:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1485:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1486:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1487:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef struct
1488:STM32_XPD/CMSIS/Include/core_cm7.h **** {
1489:STM32_XPD/CMSIS/Include/core_cm7.h ****   union {
1490:STM32_XPD/CMSIS/Include/core_cm7.h ****     struct {
1491:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IM  uint32_t SEPARATE : 1;
1492:STM32_XPD/CMSIS/Include/core_cm7.h ****              uint32_t __RESERVED0 : 7;
1493:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IM  uint32_t DREGION : 8;
1494:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IM  uint32_t IREGION : 8;
1495:STM32_XPD/CMSIS/Include/core_cm7.h ****              uint32_t __RESERVED1 : 8;
1496:STM32_XPD/CMSIS/Include/core_cm7.h ****     } b;
ARM GAS  /tmp/ccQmNNsx.s 			page 29


1497:STM32_XPD/CMSIS/Include/core_cm7.h ****     __IM uint32_t w;
1498:STM32_XPD/CMSIS/Include/core_cm7.h ****   }  TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1499:STM32_XPD/CMSIS/Include/core_cm7.h ****   union {
1500:STM32_XPD/CMSIS/Include/core_cm7.h ****     struct {
1501:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t ENABLE : 1;
1502:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t HFNMIENA : 1;
1503:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t PRIVDEFENA : 1;
1504:STM32_XPD/CMSIS/Include/core_cm7.h ****              uint32_t __RESERVED0 : 29;
1505:STM32_XPD/CMSIS/Include/core_cm7.h ****     } b;
1506:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t w;
1507:STM32_XPD/CMSIS/Include/core_cm7.h ****   } CTRL;
1508:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1509:STM32_XPD/CMSIS/Include/core_cm7.h ****   union {
1510:STM32_XPD/CMSIS/Include/core_cm7.h ****     struct {
1511:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t REGION : 4;
1512:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t VALID : 1;
1513:STM32_XPD/CMSIS/Include/core_cm7.h ****         __IOM uint32_t ADDR : 27;
1514:STM32_XPD/CMSIS/Include/core_cm7.h ****     } b;
1515:STM32_XPD/CMSIS/Include/core_cm7.h ****     __IOM uint32_t w;
1516:STM32_XPD/CMSIS/Include/core_cm7.h ****   } RBAR;
1517:STM32_XPD/CMSIS/Include/core_cm7.h ****   union {
1518:STM32_XPD/CMSIS/Include/core_cm7.h ****     struct {
1519:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t ENABLE : 1;
1520:STM32_XPD/CMSIS/Include/core_cm7.h ****             uint32_t __RESERVED0 : 7;
1521:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t SRC : 8;
1522:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t B : 1;
1523:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t C : 1;
1524:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t S : 1;
1525:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t TEX : 3;
1526:STM32_XPD/CMSIS/Include/core_cm7.h ****             uint32_t __RESERVED1 : 2;
1527:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t AP : 3;
1528:STM32_XPD/CMSIS/Include/core_cm7.h ****             uint32_t __RESERVED2 : 1;
1529:STM32_XPD/CMSIS/Include/core_cm7.h ****       __IOM uint32_t XN : 1;
1530:STM32_XPD/CMSIS/Include/core_cm7.h ****             uint32_t __RESERVED3 : 3;
1531:STM32_XPD/CMSIS/Include/core_cm7.h ****     } b;
1532:STM32_XPD/CMSIS/Include/core_cm7.h ****     __IOM uint32_t w;
1533:STM32_XPD/CMSIS/Include/core_cm7.h ****   } RASR;
1534:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1535:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1536:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1537:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1538:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1539:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1540:STM32_XPD/CMSIS/Include/core_cm7.h **** } MPU_Type;
1541:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1542:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_RALIASES                  4U
1543:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1544:STM32_XPD/CMSIS/Include/core_cm7.h **** /* MPU Type Register Definitions */
1545:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1546:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1547:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1548:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1549:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1550:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1551:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1552:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1553:STM32_XPD/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccQmNNsx.s 			page 30


1554:STM32_XPD/CMSIS/Include/core_cm7.h **** /* MPU Control Register Definitions */
1555:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1556:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1557:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1558:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1559:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1560:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1561:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1562:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1563:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1564:STM32_XPD/CMSIS/Include/core_cm7.h **** /* MPU Region Number Register Definitions */
1565:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1566:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1567:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1568:STM32_XPD/CMSIS/Include/core_cm7.h **** /* MPU Region Base Address Register Definitions */
1569:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1570:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1571:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1572:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1573:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1574:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1575:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1576:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1577:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1578:STM32_XPD/CMSIS/Include/core_cm7.h **** /* MPU Region Attribute and Size Register Definitions */
1579:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1580:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1581:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1582:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1583:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1584:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1585:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1586:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1587:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1588:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1589:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1590:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1591:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1592:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1593:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1594:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1595:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1596:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1597:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1598:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1599:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1600:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1601:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1602:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1603:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1604:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1605:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1606:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1607:STM32_XPD/CMSIS/Include/core_cm7.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1608:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1609:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_MPU */
1610:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
ARM GAS  /tmp/ccQmNNsx.s 			page 31


1611:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1612:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1613:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1614:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1615:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1616:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1617:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
1618:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1619:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1620:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1621:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1622:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1623:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef struct
1624:STM32_XPD/CMSIS/Include/core_cm7.h **** {
1625:STM32_XPD/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[1U];
1626:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1627:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1628:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1629:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1630:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1631:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR2;                  /*!< Offset: 0x018 (R/ )  Media and FP Feature Register 2 
1632:STM32_XPD/CMSIS/Include/core_cm7.h **** } FPU_Type;
1633:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1634:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Floating-Point Context Control Register Definitions */
1635:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1636:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1637:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1638:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1639:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1640:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1641:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1642:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1643:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1644:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1645:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1646:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1647:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1648:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1649:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1650:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1651:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1652:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1653:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1654:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1655:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1656:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1657:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1658:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1659:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1660:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1661:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1662:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Floating-Point Context Address Register Definitions */
1663:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1664:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1665:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1666:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Floating-Point Default Status Control Register Definitions */
1667:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
ARM GAS  /tmp/ccQmNNsx.s 			page 32


1668:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1669:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1670:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1671:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1672:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1673:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1674:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1675:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1676:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1677:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1678:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1679:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Media and FP Feature Register 0 Definitions */
1680:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1681:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1682:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1683:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1684:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1685:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1686:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1687:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1688:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1689:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1690:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1691:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1692:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1693:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1694:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1695:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1696:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1697:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1698:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1699:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1700:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1701:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1702:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1703:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1704:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Media and FP Feature Register 1 Definitions */
1705:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1706:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1707:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1708:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1709:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1710:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1711:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1712:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1713:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1714:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1715:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1716:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1717:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Media and FP Feature Register 2 Definitions */
1718:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1719:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_FPU */
1720:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1721:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1722:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1723:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1724:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
ARM GAS  /tmp/ccQmNNsx.s 			page 33


1725:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Core Debug Registers
1726:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
1727:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1728:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1729:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1730:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1731:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1732:STM32_XPD/CMSIS/Include/core_cm7.h **** typedef struct
1733:STM32_XPD/CMSIS/Include/core_cm7.h **** {
1734:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1735:STM32_XPD/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1736:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1737:STM32_XPD/CMSIS/Include/core_cm7.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1738:STM32_XPD/CMSIS/Include/core_cm7.h **** } CoreDebug_Type;
1739:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1740:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Debug Halting Control and Status Register Definitions */
1741:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1742:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1743:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1744:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1745:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1746:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1747:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1748:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1749:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1750:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1751:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1752:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1753:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1754:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1755:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1756:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1757:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1758:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1759:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1760:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1761:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1762:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1763:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1764:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1765:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1766:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1767:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1768:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1769:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1770:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1771:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1772:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1773:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1774:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1775:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1776:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1777:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Debug Core Register Selector Register Definitions */
1778:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1779:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1780:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1781:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
ARM GAS  /tmp/ccQmNNsx.s 			page 34


1782:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1783:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1784:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Debug Exception and Monitor Control Register Definitions */
1785:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1786:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1787:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1788:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1789:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1790:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1791:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1792:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1793:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1794:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1795:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1796:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1797:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1798:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1799:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1800:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1801:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1802:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1803:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1804:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1805:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1806:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1807:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1808:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1809:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1810:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1811:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1812:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1813:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1814:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1815:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1816:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1817:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1818:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1819:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1820:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1821:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1822:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1823:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1824:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_CoreDebug */
1825:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1826:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1827:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1828:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup    CMSIS_core_register
1829:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1830:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1831:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
1832:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1833:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1834:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1835:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1836:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param[in] field  Name of the register bit field.
1837:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1838:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return           Masked and shifted value.
ARM GAS  /tmp/ccQmNNsx.s 			page 35


1839:STM32_XPD/CMSIS/Include/core_cm7.h **** */
1840:STM32_XPD/CMSIS/Include/core_cm7.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1841:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1842:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1843:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1844:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param[in] field  Name of the register bit field.
1845:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1846:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return           Masked and shifted bit field value.
1847:STM32_XPD/CMSIS/Include/core_cm7.h **** */
1848:STM32_XPD/CMSIS/Include/core_cm7.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1849:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1850:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_core_bitfield */
1851:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1852:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1853:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1854:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup    CMSIS_core_register
1855:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup   CMSIS_core_base     Core Definitions
1856:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief      Definitions for base addresses, unions, and structures.
1857:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
1858:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1859:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1860:STM32_XPD/CMSIS/Include/core_cm7.h **** /* Memory mapping of Core Hardware */
1861:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1862:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1863:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1864:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1865:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1866:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1867:STM32_XPD/CMSIS/Include/core_cm7.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1868:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1869:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1870:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1871:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1872:STM32_XPD/CMSIS/Include/core_cm7.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1873:STM32_XPD/CMSIS/Include/core_cm7.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1874:STM32_XPD/CMSIS/Include/core_cm7.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1875:STM32_XPD/CMSIS/Include/core_cm7.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1876:STM32_XPD/CMSIS/Include/core_cm7.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1877:STM32_XPD/CMSIS/Include/core_cm7.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1878:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1879:STM32_XPD/CMSIS/Include/core_cm7.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1880:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1881:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1882:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif
1883:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1884:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1885:STM32_XPD/CMSIS/Include/core_cm7.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1886:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1887:STM32_XPD/CMSIS/Include/core_cm7.h **** /*@} */
1888:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1889:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1890:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1891:STM32_XPD/CMSIS/Include/core_cm7.h **** /*******************************************************************************
1892:STM32_XPD/CMSIS/Include/core_cm7.h ****  *                Hardware Abstraction Layer
1893:STM32_XPD/CMSIS/Include/core_cm7.h ****   Core Function Interface contains:
1894:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core NVIC Functions
1895:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core SysTick Functions
ARM GAS  /tmp/ccQmNNsx.s 			page 36


1896:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core Debug Functions
1897:STM32_XPD/CMSIS/Include/core_cm7.h ****   - Core Register Access Functions
1898:STM32_XPD/CMSIS/Include/core_cm7.h ****  ******************************************************************************/
1899:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1900:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1901:STM32_XPD/CMSIS/Include/core_cm7.h **** */
1902:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1903:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1904:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1905:STM32_XPD/CMSIS/Include/core_cm7.h **** /* ##########################   NVIC functions  #################################### */
1906:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1907:STM32_XPD/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_Core_FunctionInterface
1908:STM32_XPD/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1909:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1910:STM32_XPD/CMSIS/Include/core_cm7.h ****   @{
1911:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1912:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1913:STM32_XPD/CMSIS/Include/core_cm7.h **** #ifdef CMSIS_NVIC_VIRTUAL
1914:STM32_XPD/CMSIS/Include/core_cm7.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1915:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1916:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
1917:STM32_XPD/CMSIS/Include/core_cm7.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1918:STM32_XPD/CMSIS/Include/core_cm7.h **** #else
1919:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1920:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1921:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1922:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1923:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1924:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1925:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1926:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1927:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_GetActive              __NVIC_GetActive
1928:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1929:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1930:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1931:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1932:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1933:STM32_XPD/CMSIS/Include/core_cm7.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1934:STM32_XPD/CMSIS/Include/core_cm7.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1935:STM32_XPD/CMSIS/Include/core_cm7.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1936:STM32_XPD/CMSIS/Include/core_cm7.h ****   #endif
1937:STM32_XPD/CMSIS/Include/core_cm7.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1938:STM32_XPD/CMSIS/Include/core_cm7.h **** #else
1939:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_SetVector              __NVIC_SetVector
1940:STM32_XPD/CMSIS/Include/core_cm7.h ****   #define NVIC_GetVector              __NVIC_GetVector
1941:STM32_XPD/CMSIS/Include/core_cm7.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1942:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1943:STM32_XPD/CMSIS/Include/core_cm7.h **** #define NVIC_USER_IRQ_OFFSET          16
1944:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1945:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1946:STM32_XPD/CMSIS/Include/core_cm7.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1947:STM32_XPD/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1948:STM32_XPD/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1949:STM32_XPD/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1950:STM32_XPD/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_HANDLER_FPU     (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after ret
1951:STM32_XPD/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_THREAD_MSP_FPU  (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after retu
1952:STM32_XPD/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_THREAD_PSP_FPU  (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after retu
ARM GAS  /tmp/ccQmNNsx.s 			page 37


1953:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1954:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1955:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1956:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Set Priority Grouping
1957:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Sets the priority grouping field using the required unlock sequence.
1958:STM32_XPD/CMSIS/Include/core_cm7.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1959:STM32_XPD/CMSIS/Include/core_cm7.h ****            Only values from 0..7 are used.
1960:STM32_XPD/CMSIS/Include/core_cm7.h ****            In case of a conflict between priority grouping and available
1961:STM32_XPD/CMSIS/Include/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1962:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]      PriorityGroup  Priority grouping field.
1963:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1964:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1965:STM32_XPD/CMSIS/Include/core_cm7.h **** {
1966:STM32_XPD/CMSIS/Include/core_cm7.h ****   uint32_t reg_value;
1967:STM32_XPD/CMSIS/Include/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1968:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1969:STM32_XPD/CMSIS/Include/core_cm7.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1970:STM32_XPD/CMSIS/Include/core_cm7.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1971:STM32_XPD/CMSIS/Include/core_cm7.h ****   reg_value  =  (reg_value                                   |
1972:STM32_XPD/CMSIS/Include/core_cm7.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1973:STM32_XPD/CMSIS/Include/core_cm7.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key a
1974:STM32_XPD/CMSIS/Include/core_cm7.h ****   SCB->AIRCR =  reg_value;
1975:STM32_XPD/CMSIS/Include/core_cm7.h **** }
1976:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1977:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1978:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1979:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Get Priority Grouping
1980:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1981:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1982:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1983:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1984:STM32_XPD/CMSIS/Include/core_cm7.h **** {
1985:STM32_XPD/CMSIS/Include/core_cm7.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1986:STM32_XPD/CMSIS/Include/core_cm7.h **** }
1987:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1988:STM32_XPD/CMSIS/Include/core_cm7.h **** 
1989:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
1990:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Enable Interrupt
1991:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1992:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
1993:STM32_XPD/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
1994:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
1995:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1996:STM32_XPD/CMSIS/Include/core_cm7.h **** {
1997:STM32_XPD/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
1998:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
1999:STM32_XPD/CMSIS/Include/core_cm7.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2000:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2001:STM32_XPD/CMSIS/Include/core_cm7.h **** }
2002:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2003:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2004:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
2005:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Get Interrupt Enable status
2006:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
2007:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2008:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return             0  Interrupt is not enabled.
2009:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return             1  Interrupt is enabled.
ARM GAS  /tmp/ccQmNNsx.s 			page 38


2010:STM32_XPD/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
2011:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
2012:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
2013:STM32_XPD/CMSIS/Include/core_cm7.h **** {
2014:STM32_XPD/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2015:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2016:STM32_XPD/CMSIS/Include/core_cm7.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
2017:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2018:STM32_XPD/CMSIS/Include/core_cm7.h ****   else
2019:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2020:STM32_XPD/CMSIS/Include/core_cm7.h ****     return(0U);
2021:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2022:STM32_XPD/CMSIS/Include/core_cm7.h **** }
2023:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2024:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2025:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
2026:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Disable Interrupt
2027:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
2028:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2029:STM32_XPD/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
2030:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
2031:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
  55              		.loc 2 2031 22 view .LVU7
  56              	.LBB29:
2032:STM32_XPD/CMSIS/Include/core_cm7.h **** {
2033:STM32_XPD/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
  57              		.loc 2 2033 3 view .LVU8
2034:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2035:STM32_XPD/CMSIS/Include/core_cm7.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
  58              		.loc 2 2035 5 view .LVU9
  59              		.loc 2 2035 43 is_stmt 0 view .LVU10
  60 000e 044B     		ldr	r3, .L4
  61 0010 2022     		movs	r2, #32
  62 0012 C3F88C20 		str	r2, [r3, #140]
2036:STM32_XPD/CMSIS/Include/core_cm7.h ****     __DSB();
  63              		.loc 2 2036 5 is_stmt 1 view .LVU11
  64              	.LBB30:
  65              	.LBI30:
  66              		.file 3 "STM32_XPD/CMSIS/Include/cmsis_gcc.h"
   1:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
ARM GAS  /tmp/ccQmNNsx.s 			page 39


  19:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
ARM GAS  /tmp/ccQmNNsx.s 			page 40


  76:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 117:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 118:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   @{
 122:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 123:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 129:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 131:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccQmNNsx.s 			page 41


 133:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 134:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 136:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 140:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 142:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 144:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 145:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 147:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 151:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 153:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 155:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 158:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 159:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 160:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 162:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 166:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 168:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 170:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 173:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 174:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 175:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 176:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 177:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 181:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 183:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 185:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 186:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 187:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 189:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
ARM GAS  /tmp/ccQmNNsx.s 			page 42


 190:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 193:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 195:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 197:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 198:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 200:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 201:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 205:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 207:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 209:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 212:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 213:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 214:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 215:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 219:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 221:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 223:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 226:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 227:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 228:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 229:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 233:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 235:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 240:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 241:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 242:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 243:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccQmNNsx.s 			page 43


 247:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 249:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 254:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 255:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 256:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 258:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 262:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 264:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 266:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 269:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 270:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 271:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 272:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 273:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 277:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 279:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 281:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 282:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 283:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 285:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 289:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 291:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 293:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 294:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 295:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 296:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 297:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 301:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 303:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccQmNNsx.s 			page 44


 304:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 308:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 309:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 310:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 312:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 316:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 318:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 320:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 323:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 324:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 325:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 326:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 327:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 331:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 333:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 335:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 336:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 337:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 339:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 343:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 345:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 347:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 348:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 349:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 350:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 352:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 356:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 358:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 360:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
ARM GAS  /tmp/ccQmNNsx.s 			page 45


 361:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 363:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 364:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 365:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 366:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 370:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 372:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 374:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 375:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 376:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 377:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 378:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 382:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 384:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 386:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 389:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 390:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 391:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 393:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 397:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 399:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 401:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 404:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 405:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 406:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 407:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 408:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 412:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 414:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 416:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 417:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccQmNNsx.s 			page 46


 418:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 420:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 424:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 426:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 428:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 429:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 430:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 431:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 435:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 439:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 441:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 443:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 444:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 445:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 446:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 450:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 452:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 454:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 455:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 456:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 457:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 461:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 463:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 465:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 468:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 469:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 470:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 472:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
ARM GAS  /tmp/ccQmNNsx.s 			page 47


 475:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 476:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 478:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 480:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 483:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 484:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 485:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 486:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 487:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 491:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 493:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 495:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 496:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 497:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 499:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 503:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 505:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 507:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 508:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 509:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 510:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 511:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 516:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 518:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 520:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 521:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 522:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 523:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 527:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 529:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 531:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
ARM GAS  /tmp/ccQmNNsx.s 			page 48


 532:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 534:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 535:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 536:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 538:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 542:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 544:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 546:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 549:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 550:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 551:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 552:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 553:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 557:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 559:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 561:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 562:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 563:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 565:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 569:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 571:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 573:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 574:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 575:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 579:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 580:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 583:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 584:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   
ARM GAS  /tmp/ccQmNNsx.s 			page 49


 589:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 592:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 594:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 599:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 603:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 604:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 605:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 607:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 611:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 614:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 616:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 620:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 624:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 625:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 626:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 627:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 628:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 629:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   
 634:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 637:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 639:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 644:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccQmNNsx.s 			page 50


 646:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 647:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 648:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 649:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 651:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 655:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 658:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 660:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 664:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 666:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 667:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 668:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 669:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 670:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 671:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 676:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 679:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 681:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 686:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 690:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 691:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 692:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 693:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 695:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 699:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 702:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
ARM GAS  /tmp/ccQmNNsx.s 			page 51


 703:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 704:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 708:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 712:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 713:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 714:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 715:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 716:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 717:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 722:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 725:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 727:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 732:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 734:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 735:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 736:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 737:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 739:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 743:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 746:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 748:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 752:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 754:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 755:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 756:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 757:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccQmNNsx.s 			page 52


 760:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 761:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 762:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 766:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 768:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 776:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 778:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 781:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 782:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 784:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 785:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 786:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 787:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 788:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 792:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 794:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 802:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 804:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 805:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 807:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 808:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 809:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 810:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 812:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 813:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   @{
ARM GAS  /tmp/ccQmNNsx.s 			page 53


 817:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** */
 818:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 819:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 827:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 831:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 832:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 833:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 836:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 838:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 839:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 842:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 844:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 845:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 846:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 850:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 852:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 853:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 854:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 857:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 859:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 860:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 861:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 866:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 868:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 870:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 871:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 872:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 873:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
ARM GAS  /tmp/ccQmNNsx.s 			page 54


 874:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 877:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
  67              		.loc 3 877 27 view .LVU12
  68              	.LBB31:
 878:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 879:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
  69              		.loc 3 879 3 view .LVU13
  70              		.syntax unified
  71              	@ 879 "STM32_XPD/CMSIS/Include/cmsis_gcc.h" 1
  72 0016 BFF34F8F 		dsb 0xF
  73              	@ 0 "" 2
  74              		.thumb
  75              		.syntax unified
  76              	.LBE31:
  77              	.LBE30:
2037:STM32_XPD/CMSIS/Include/core_cm7.h ****     __ISB();
  78              		.loc 2 2037 5 view .LVU14
  79              	.LBB32:
  80              	.LBI32:
 866:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
  81              		.loc 3 866 27 view .LVU15
  82              	.LBB33:
 868:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
  83              		.loc 3 868 3 view .LVU16
  84              		.syntax unified
  85              	@ 868 "STM32_XPD/CMSIS/Include/cmsis_gcc.h" 1
  86 001a BFF36F8F 		isb 0xF
  87              	@ 0 "" 2
  88              	.LVL4:
 868:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
  89              		.loc 3 868 3 is_stmt 0 view .LVU17
  90              		.thumb
  91              		.syntax unified
  92              	.LBE33:
  93              	.LBE32:
  94              	.LBE29:
  95              	.LBE28:
  47:BSP_STM32H7xx/bsp_usb.c **** }
  96              		.loc 1 47 1 view .LVU18
  97 001e 08BD     		pop	{r3, pc}
  98              	.L5:
  99              		.align	2
 100              	.L4:
 101 0020 00E100E0 		.word	-536813312
 102              		.cfi_endproc
 103              	.LFE158:
 105              		.section	.text.BSP_USB_Init,"ax",%progbits
 106              		.align	1
 107              		.p2align 2,,3
 108              		.syntax unified
 109              		.thumb
 110              		.thumb_func
 111              		.fpu fpv4-sp-d16
 113              	BSP_USB_Init:
 114              	.LVL5:
ARM GAS  /tmp/ccQmNNsx.s 			page 55


 115              	.LFB157:
  32:BSP_STM32H7xx/bsp_usb.c ****     /* GPIO settings */
 116              		.loc 1 32 1 is_stmt 1 view -0
 117              		.cfi_startproc
 118              		@ args = 0, pretend = 0, frame = 0
 119              		@ frame_needed = 0, uses_anonymous_args = 0
  34:BSP_STM32H7xx/bsp_usb.c ****     GPIO_vInitPin(USB_DP_PIN, USB_DP_CFG);
 120              		.loc 1 34 5 view .LVU20
  32:BSP_STM32H7xx/bsp_usb.c ****     /* GPIO settings */
 121              		.loc 1 32 1 is_stmt 0 view .LVU21
 122 0000 10B5     		push	{r4, lr}
 123              	.LCFI1:
 124              		.cfi_def_cfa_offset 8
 125              		.cfi_offset 4, -8
 126              		.cfi_offset 14, -4
  34:BSP_STM32H7xx/bsp_usb.c ****     GPIO_vInitPin(USB_DP_PIN, USB_DP_CFG);
 127              		.loc 1 34 5 view .LVU22
 128 0002 1249     		ldr	r1, .L10
 129 0004 0B20     		movs	r0, #11
 130              	.LVL6:
  34:BSP_STM32H7xx/bsp_usb.c ****     GPIO_vInitPin(USB_DP_PIN, USB_DP_CFG);
 131              		.loc 1 34 5 view .LVU23
 132 0006 FFF7FEFF 		bl	GPIO_vInitPin
 133              	.LVL7:
  35:BSP_STM32H7xx/bsp_usb.c **** 
 134              		.loc 1 35 5 is_stmt 1 view .LVU24
 135 000a 1049     		ldr	r1, .L10
 136 000c 0C20     		movs	r0, #12
 137              	.LBB44:
 138              	.LBB45:
1999:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
 139              		.loc 2 1999 43 is_stmt 0 view .LVU25
 140 000e 2024     		movs	r4, #32
 141              	.LBE45:
 142              	.LBE44:
  35:BSP_STM32H7xx/bsp_usb.c **** 
 143              		.loc 1 35 5 view .LVU26
 144 0010 FFF7FEFF 		bl	GPIO_vInitPin
 145              	.LVL8:
  37:BSP_STM32H7xx/bsp_usb.c ****     NVIC_EnableIRQ(OTG_FS_IRQn);
 146              		.loc 1 37 5 is_stmt 1 view .LVU27
 147              	.LBB47:
 148              	.LBI47:
 149              		.file 4 "STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h"
   1:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /**
   2:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   ******************************************************************************
   3:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * @file    xpd_nvic.h
   4:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * @author  Benedek Kupper
   5:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * @version 0.2
   6:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * @date    2018-01-28
   7:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * @brief   STM32 eXtensible Peripheral Drivers NVIC Module
   8:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   *
   9:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * Copyright (c) 2018 Benedek Kupper
  10:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   *
  11:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * Licensed under the Apache License, Version 2.0 (the "License");
  12:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * you may not use this file except in compliance with the License.
  13:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * You may obtain a copy of the License at
ARM GAS  /tmp/ccQmNNsx.s 			page 56


  14:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   *
  15:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   *     http://www.apache.org/licenses/LICENSE-2.0
  16:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   *
  17:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * Unless required by applicable law or agreed to in writing, software
  18:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * distributed under the License is distributed on an "AS IS" BASIS,
  19:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  20:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * See the License for the specific language governing permissions and
  21:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   * limitations under the License.
  22:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****   */
  23:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** #ifndef __XPD_NVIC_H_
  24:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** #define __XPD_NVIC_H_
  25:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  26:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** #ifdef __cplusplus
  27:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** extern "C"
  28:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** {
  29:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** #endif
  30:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  31:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** #include <xpd_common.h>
  32:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  33:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /** @defgroup NVIC
  34:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @{ */
  35:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  36:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** #if (__CORTEX_M >= 3)
  37:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /** @defgroup NVIC_Exported_Types NVIC Exported Types
  38:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @{ */
  39:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  40:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /** @brief NVIC priority group types used for NVIC_SetPriorityGrouping() */
  41:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** typedef enum
  42:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** {
  43:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****     NVIC_PRIOGROUP_0PRE_4SUB = 7, /*!< 0 preemption priority bits, 4 subpriority bits */
  44:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****     NVIC_PRIOGROUP_1PRE_3SUB = 6, /*!< 1 preemption priority bits, 3 subpriority bits */
  45:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****     NVIC_PRIOGROUP_2PRE_2SUB = 5, /*!< 2 preemption priority bits, 2 subpriority bits */
  46:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****     NVIC_PRIOGROUP_3PRE_1SUB = 4, /*!< 3 preemption priority bits, 1 subpriority bits */
  47:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****     NVIC_PRIOGROUP_4PRE_0SUB = 3  /*!< 4 preemption priority bits, 0 subpriority bits */
  48:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** }NVIC_PrioGroupType;
  49:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  50:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /** @} */
  51:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  52:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** #endif /* (__CORTEX_M >= 3) */
  53:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  54:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /** @defgroup NVIC_Exported_Macros NVIC Exported Macros
  55:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @{ */
  56:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  57:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /**
  58:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @brief  @ref XPD_NVIC_GetCurrentIRQ() return value when it's called in thread context.
  59:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  */
  60:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** #define ThreadMode_IRQn      (-16)
  61:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  62:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /**
  63:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @brief  Returns the currently active interrupt line.
  64:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @retval The @ref IRQn_Type that is currently being executed
  65:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  */
  66:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** __STATIC_INLINE IRQn_Type NVIC_GetCurrentIRQ(void)
  67:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** {
  68:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****     return ((IRQn_Type)(((IPSR_Type)__get_IPSR()).b.ISR) - 16);
  69:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** }
  70:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
ARM GAS  /tmp/ccQmNNsx.s 			page 57


  71:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /**
  72:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @brief  Enable all exceptions with configurable priority (default).
  73:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  */
  74:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** __STATIC_INLINE void NVIC_EnableAllIRQs(void)
  75:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** {
  76:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****     __set_PRIMASK(0);
  77:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** }
  78:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  79:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /**
  80:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @brief  Disable all exceptions with configurable priority.
  81:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  */
  82:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** __STATIC_INLINE void NVIC_DisableAllIRQs(void)
  83:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** {
  84:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****     __set_PRIMASK(1);
  85:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** }
  86:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  87:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** #if (__CORTEX_M >= 3)
  88:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** 
  89:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** /**
  90:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @brief  NVIC interrupt priority configuration setting macro.
  91:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @param  IRQn: the selected @ref IRQn_Type line to configure
  92:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @param  PreemptPriority: the preemption priority value
  93:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  * @param  SubPriority: the subpriority value
  94:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****  */
  95:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** __STATIC_INLINE void NVIC_SetPriorityConfig(IRQn_Type IRQn,
 150              		.loc 4 95 22 view .LVU28
 151              		.loc 4 95 22 is_stmt 0 view .LVU29
 152              	.LBE47:
  96:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****         uint32_t PreemptPriority,
  97:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****         uint32_t SubPriority)
  98:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h **** {
  99:STM32_XPD/STM32H7_XPD/inc/xpd_nvic.h ****     NVIC_SetPriority(IRQn,
 153              		.loc 4 99 5 is_stmt 1 view .LVU30
 154              	.LBB62:
 155              	.LBB48:
 156              	.LBI48:
1983:STM32_XPD/CMSIS/Include/core_cm7.h **** {
 157              		.loc 2 1983 26 view .LVU31
 158              	.LBB49:
1985:STM32_XPD/CMSIS/Include/core_cm7.h **** }
 159              		.loc 2 1985 3 view .LVU32
1985:STM32_XPD/CMSIS/Include/core_cm7.h **** }
 160              		.loc 2 1985 26 is_stmt 0 view .LVU33
 161 0014 0E4B     		ldr	r3, .L10+4
 162              	.LBE49:
 163              	.LBE48:
 164              	.LBB51:
 165              	.LBB52:
2038:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2039:STM32_XPD/CMSIS/Include/core_cm7.h **** }
2040:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2041:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2042:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
2043:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Get Pending Interrupt
2044:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
2045:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2046:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return             0  Interrupt status is not pending.
ARM GAS  /tmp/ccQmNNsx.s 			page 58


2047:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return             1  Interrupt status is pending.
2048:STM32_XPD/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
2049:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
2050:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
2051:STM32_XPD/CMSIS/Include/core_cm7.h **** {
2052:STM32_XPD/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2053:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2054:STM32_XPD/CMSIS/Include/core_cm7.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
2055:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2056:STM32_XPD/CMSIS/Include/core_cm7.h ****   else
2057:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2058:STM32_XPD/CMSIS/Include/core_cm7.h ****     return(0U);
2059:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2060:STM32_XPD/CMSIS/Include/core_cm7.h **** }
2061:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2062:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2063:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
2064:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Set Pending Interrupt
2065:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
2066:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2067:STM32_XPD/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
2068:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
2069:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
2070:STM32_XPD/CMSIS/Include/core_cm7.h **** {
2071:STM32_XPD/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2072:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2073:STM32_XPD/CMSIS/Include/core_cm7.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2074:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2075:STM32_XPD/CMSIS/Include/core_cm7.h **** }
2076:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2077:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2078:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
2079:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Clear Pending Interrupt
2080:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
2081:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2082:STM32_XPD/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
2083:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
2084:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
2085:STM32_XPD/CMSIS/Include/core_cm7.h **** {
2086:STM32_XPD/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2087:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2088:STM32_XPD/CMSIS/Include/core_cm7.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
2089:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2090:STM32_XPD/CMSIS/Include/core_cm7.h **** }
2091:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2092:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2093:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
2094:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Get Active Interrupt
2095:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
2096:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
2097:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return             0  Interrupt status is not active.
2098:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return             1  Interrupt status is active.
2099:STM32_XPD/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
2100:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
2101:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
2102:STM32_XPD/CMSIS/Include/core_cm7.h **** {
2103:STM32_XPD/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /tmp/ccQmNNsx.s 			page 59


2104:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2105:STM32_XPD/CMSIS/Include/core_cm7.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
2106:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2107:STM32_XPD/CMSIS/Include/core_cm7.h ****   else
2108:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2109:STM32_XPD/CMSIS/Include/core_cm7.h ****     return(0U);
2110:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2111:STM32_XPD/CMSIS/Include/core_cm7.h **** }
2112:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2113:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2114:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
2115:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Set Interrupt Priority
2116:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
2117:STM32_XPD/CMSIS/Include/core_cm7.h ****            The interrupt number can be positive to specify a device specific interrupt,
2118:STM32_XPD/CMSIS/Include/core_cm7.h ****            or negative to specify a processor exception.
2119:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Interrupt number.
2120:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]  priority  Priority to set.
2121:STM32_XPD/CMSIS/Include/core_cm7.h ****   \note    The priority cannot be set for every processor exception.
2122:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
2123:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
2124:STM32_XPD/CMSIS/Include/core_cm7.h **** {
2125:STM32_XPD/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2126:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2127:STM32_XPD/CMSIS/Include/core_cm7.h ****     NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (
 166              		.loc 2 2127 47 view .LVU34
 167 0016 0F48     		ldr	r0, .L10+8
 168              	.LBE52:
 169              	.LBE51:
 170              	.LBB55:
 171              	.LBB50:
1985:STM32_XPD/CMSIS/Include/core_cm7.h **** }
 172              		.loc 2 1985 26 view .LVU35
 173 0018 DA68     		ldr	r2, [r3, #12]
1985:STM32_XPD/CMSIS/Include/core_cm7.h **** }
 174              		.loc 2 1985 11 view .LVU36
 175 001a C2F30222 		ubfx	r2, r2, #8, #3
 176              	.LVL9:
1985:STM32_XPD/CMSIS/Include/core_cm7.h **** }
 177              		.loc 2 1985 11 view .LVU37
 178              	.LBE50:
 179              	.LBE55:
 180              	.LBB56:
 181              	.LBI56:
2128:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2129:STM32_XPD/CMSIS/Include/core_cm7.h ****   else
2130:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2131:STM32_XPD/CMSIS/Include/core_cm7.h ****     SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (
2132:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2133:STM32_XPD/CMSIS/Include/core_cm7.h **** }
2134:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2135:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2136:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
2137:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Get Interrupt Priority
2138:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
2139:STM32_XPD/CMSIS/Include/core_cm7.h ****            The interrupt number can be positive to specify a device specific interrupt,
2140:STM32_XPD/CMSIS/Include/core_cm7.h ****            or negative to specify a processor exception.
2141:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]   IRQn  Interrupt number.
ARM GAS  /tmp/ccQmNNsx.s 			page 60


2142:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return             Interrupt Priority.
2143:STM32_XPD/CMSIS/Include/core_cm7.h ****                       Value is aligned automatically to the implemented priority bits of the microc
2144:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
2145:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
2146:STM32_XPD/CMSIS/Include/core_cm7.h **** {
2147:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2148:STM32_XPD/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2149:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2150:STM32_XPD/CMSIS/Include/core_cm7.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
2151:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2152:STM32_XPD/CMSIS/Include/core_cm7.h ****   else
2153:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
2154:STM32_XPD/CMSIS/Include/core_cm7.h ****     return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
2155:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
2156:STM32_XPD/CMSIS/Include/core_cm7.h **** }
2157:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2158:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2159:STM32_XPD/CMSIS/Include/core_cm7.h **** /**
2160:STM32_XPD/CMSIS/Include/core_cm7.h ****   \brief   Encode Priority
2161:STM32_XPD/CMSIS/Include/core_cm7.h ****   \details Encodes the priority for an interrupt with the given priority group,
2162:STM32_XPD/CMSIS/Include/core_cm7.h ****            preemptive priority value, and subpriority value.
2163:STM32_XPD/CMSIS/Include/core_cm7.h ****            In case of a conflict between priority grouping and available
2164:STM32_XPD/CMSIS/Include/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
2165:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]     PriorityGroup  Used priority group.
2166:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
2167:STM32_XPD/CMSIS/Include/core_cm7.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
2168:STM32_XPD/CMSIS/Include/core_cm7.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
2169:STM32_XPD/CMSIS/Include/core_cm7.h ****  */
2170:STM32_XPD/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
 182              		.loc 2 2170 26 is_stmt 1 view .LVU38
 183              	.LBB57:
2171:STM32_XPD/CMSIS/Include/core_cm7.h **** {
2172:STM32_XPD/CMSIS/Include/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
 184              		.loc 2 2172 3 view .LVU39
2173:STM32_XPD/CMSIS/Include/core_cm7.h ****   uint32_t PreemptPriorityBits;
 185              		.loc 2 2173 3 view .LVU40
2174:STM32_XPD/CMSIS/Include/core_cm7.h ****   uint32_t SubPriorityBits;
 186              		.loc 2 2174 3 view .LVU41
2175:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2176:STM32_XPD/CMSIS/Include/core_cm7.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
 187              		.loc 2 2176 3 view .LVU42
 188              		.loc 2 2176 31 is_stmt 0 view .LVU43
 189 001e C2F10701 		rsb	r1, r2, #7
2177:STM32_XPD/CMSIS/Include/core_cm7.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 190              		.loc 2 2177 44 view .LVU44
 191 0022 131D     		adds	r3, r2, #4
2176:STM32_XPD/CMSIS/Include/core_cm7.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
 192              		.loc 2 2176 23 view .LVU45
 193 0024 0429     		cmp	r1, #4
 194 0026 28BF     		it	cs
 195 0028 0421     		movcs	r1, #4
 196              	.LVL10:
 197              		.loc 2 2177 3 is_stmt 1 view .LVU46
 198              		.loc 2 2177 109 is_stmt 0 view .LVU47
 199 002a 062B     		cmp	r3, #6
2178:STM32_XPD/CMSIS/Include/core_cm7.h **** 
2179:STM32_XPD/CMSIS/Include/core_cm7.h ****   return (
ARM GAS  /tmp/ccQmNNsx.s 			page 61


2180:STM32_XPD/CMSIS/Include/core_cm7.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 200              		.loc 2 2180 30 view .LVU48
 201 002c 4FF0FF33 		mov	r3, #-1
2177:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 202              		.loc 2 2177 109 view .LVU49
 203 0030 8CBF     		ite	hi
 204 0032 033A     		subhi	r2, r2, #3
 205              	.LVL11:
2177:STM32_XPD/CMSIS/Include/core_cm7.h **** 
 206              		.loc 2 2177 109 view .LVU50
 207 0034 0022     		movls	r2, #0
 208              	.LVL12:
2179:STM32_XPD/CMSIS/Include/core_cm7.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 209              		.loc 2 2179 3 is_stmt 1 view .LVU51
2179:STM32_XPD/CMSIS/Include/core_cm7.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
 210              		.loc 2 2179 3 is_stmt 0 view .LVU52
 211              	.LBE57:
 212              	.LBE56:
 213              	.LBB59:
 214              	.LBI51:
2123:STM32_XPD/CMSIS/Include/core_cm7.h **** {
 215              		.loc 2 2123 22 is_stmt 1 view .LVU53
 216              	.LBB53:
2125:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
 217              		.loc 2 2125 3 view .LVU54
2127:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
 218              		.loc 2 2127 5 view .LVU55
 219              	.LBE53:
 220              	.LBE59:
 221              	.LBB60:
 222              	.LBB58:
 223              		.loc 2 2180 30 is_stmt 0 view .LVU56
 224 0036 8B40     		lsls	r3, r3, r1
 225 0038 DB43     		mvns	r3, r3
 226 003a 03F00603 		and	r3, r3, #6
 227              		.loc 2 2180 82 view .LVU57
 228 003e 9340     		lsls	r3, r3, r2
 229              	.LVL13:
 230              		.loc 2 2180 82 view .LVU58
 231              	.LBE58:
 232              	.LBE60:
 233              	.LBB61:
 234              	.LBB54:
2127:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
 235              		.loc 2 2127 49 view .LVU59
 236 0040 1B01     		lsls	r3, r3, #4
 237              	.LVL14:
2127:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
 238              		.loc 2 2127 49 view .LVU60
 239 0042 DBB2     		uxtb	r3, r3
2127:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
 240              		.loc 2 2127 47 view .LVU61
 241 0044 80F86533 		strb	r3, [r0, #869]
 242              	.LVL15:
2127:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
 243              		.loc 2 2127 47 view .LVU62
 244              	.LBE54:
ARM GAS  /tmp/ccQmNNsx.s 			page 62


 245              	.LBE61:
 246              	.LBE62:
  38:BSP_STM32H7xx/bsp_usb.c **** }
 247              		.loc 1 38 5 is_stmt 1 view .LVU63
 248              	.LBB63:
 249              	.LBI44:
1995:STM32_XPD/CMSIS/Include/core_cm7.h **** {
 250              		.loc 2 1995 22 view .LVU64
 251              	.LBB46:
1997:STM32_XPD/CMSIS/Include/core_cm7.h ****   {
 252              		.loc 2 1997 3 view .LVU65
1999:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
 253              		.loc 2 1999 5 view .LVU66
1999:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
 254              		.loc 2 1999 43 is_stmt 0 view .LVU67
 255 0048 C460     		str	r4, [r0, #12]
 256              	.LVL16:
1999:STM32_XPD/CMSIS/Include/core_cm7.h ****   }
 257              		.loc 2 1999 43 view .LVU68
 258              	.LBE46:
 259              	.LBE63:
  39:BSP_STM32H7xx/bsp_usb.c **** 
 260              		.loc 1 39 1 view .LVU69
 261 004a 10BD     		pop	{r4, pc}
 262              	.L11:
 263              		.align	2
 264              	.L10:
 265 004c 00000000 		.word	BSP_IOCfg
 266 0050 00ED00E0 		.word	-536810240
 267 0054 00E100E0 		.word	-536813312
 268              		.cfi_endproc
 269              	.LFE157:
 271              		.section	.text.BSP_USB_Bind,"ax",%progbits
 272              		.align	1
 273              		.p2align 2,,3
 274              		.global	BSP_USB_Bind
 275              		.syntax unified
 276              		.thumb
 277              		.thumb_func
 278              		.fpu fpv4-sp-d16
 280              	BSP_USB_Bind:
 281              	.LFB159:
  48:BSP_STM32H7xx/bsp_usb.c **** 
  49:BSP_STM32H7xx/bsp_usb.c **** extern USB_HandleType *const UsbDevice;
  50:BSP_STM32H7xx/bsp_usb.c **** 
  51:BSP_STM32H7xx/bsp_usb.c **** void BSP_USB_Bind(void)
  52:BSP_STM32H7xx/bsp_usb.c **** {
 282              		.loc 1 52 1 is_stmt 1 view -0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 0, uses_anonymous_args = 0
 286              		@ link register save eliminated.
  53:BSP_STM32H7xx/bsp_usb.c ****     USB_INST2HANDLE(UsbDevice, USB_OTG_FS);
 287              		.loc 1 53 5 view .LVU71
 288 0000 044B     		ldr	r3, .L13
 289 0002 0548     		ldr	r0, .L13+4
 290 0004 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccQmNNsx.s 			page 63


  54:BSP_STM32H7xx/bsp_usb.c ****     UsbDevice->Callbacks.DepInit = BSP_USB_Init;
 291              		.loc 1 54 34 is_stmt 0 view .LVU72
 292 0006 0549     		ldr	r1, .L13+8
  55:BSP_STM32H7xx/bsp_usb.c ****     UsbDevice->Callbacks.DepDeinit = BSP_USB_Deinit;
 293              		.loc 1 55 36 view .LVU73
 294 0008 054A     		ldr	r2, .L13+12
  54:BSP_STM32H7xx/bsp_usb.c ****     UsbDevice->Callbacks.DepInit = BSP_USB_Init;
 295              		.loc 1 54 34 view .LVU74
 296 000a C3E90301 		strd	r0, r1, [r3, #12]
 297              		.loc 1 55 5 is_stmt 1 view .LVU75
 298              		.loc 1 55 36 is_stmt 0 view .LVU76
 299 000e 5A61     		str	r2, [r3, #20]
  56:BSP_STM32H7xx/bsp_usb.c **** }
 300              		.loc 1 56 1 view .LVU77
 301 0010 7047     		bx	lr
 302              	.L14:
 303 0012 00BF     		.align	2
 304              	.L13:
 305 0014 00000000 		.word	UsbDevice
 306 0018 00000840 		.word	1074266112
 307 001c 00000000 		.word	BSP_USB_Init
 308 0020 00000000 		.word	BSP_USB_Deinit
 309              		.cfi_endproc
 310              	.LFE159:
 312              		.section	.text.OTG_FS_IRQHandler,"ax",%progbits
 313              		.align	1
 314              		.p2align 2,,3
 315              		.global	OTG_FS_IRQHandler
 316              		.syntax unified
 317              		.thumb
 318              		.thumb_func
 319              		.fpu fpv4-sp-d16
 321              	OTG_FS_IRQHandler:
 322              	.LFB160:
  57:BSP_STM32H7xx/bsp_usb.c **** 
  58:BSP_STM32H7xx/bsp_usb.c **** /* Common interrupt handler for USB core and WKUP line */
  59:BSP_STM32H7xx/bsp_usb.c **** void OTG_FS_IRQHandler(void)
  60:BSP_STM32H7xx/bsp_usb.c **** {
 323              		.loc 1 60 1 is_stmt 1 view -0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 0
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 327              		@ link register save eliminated.
  61:BSP_STM32H7xx/bsp_usb.c ****     /* Handle USB interrupts */
  62:BSP_STM32H7xx/bsp_usb.c ****     USB_vIRQHandler(UsbDevice);
 328              		.loc 1 62 5 view .LVU79
 329 0000 014B     		ldr	r3, .L16
 330 0002 1868     		ldr	r0, [r3]
 331 0004 FFF7FEBF 		b	USB_vDevIRQHandler
 332              	.LVL17:
 333              	.L17:
 334              		.align	2
 335              	.L16:
 336 0008 00000000 		.word	UsbDevice
 337              		.cfi_endproc
 338              	.LFE160:
 340              		.section	.text.OTG_FS_WKUP_IRQHandler,"ax",%progbits
ARM GAS  /tmp/ccQmNNsx.s 			page 64


 341              		.align	1
 342              		.p2align 2,,3
 343              		.global	OTG_FS_WKUP_IRQHandler
 344              		.syntax unified
 345              		.thumb
 346              		.thumb_func
 347              		.fpu fpv4-sp-d16
 349              	OTG_FS_WKUP_IRQHandler:
 350              	.LFB161:
  63:BSP_STM32H7xx/bsp_usb.c **** }
  64:BSP_STM32H7xx/bsp_usb.c **** 
  65:BSP_STM32H7xx/bsp_usb.c **** void OTG_FS_WKUP_IRQHandler(void)
  66:BSP_STM32H7xx/bsp_usb.c **** {
 351              		.loc 1 66 1 view -0
 352              		.cfi_startproc
 353              		@ args = 0, pretend = 0, frame = 0
 354              		@ frame_needed = 0, uses_anonymous_args = 0
 355              		@ link register save eliminated.
  67:BSP_STM32H7xx/bsp_usb.c ****     EXTI_vClearFlag(USB_OTG_FS_WAKEUP_EXTI_LINE);
 356              		.loc 1 67 5 view .LVU81
 357              	.LVL18:
 358              	.LBB64:
 359              	.LBI64:
 360              		.file 5 "STM32_XPD/STM32H7_XPD/inc/xpd_exti.h"
   1:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /**
   2:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   ******************************************************************************
   3:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * @file    xpd_exti.h
   4:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * @author  Benedek Kupper
   5:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * @version 0.2
   6:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * @date    2018-01-28
   7:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * @brief   STM32 eXtensible Peripheral Drivers EXTI Module
   8:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   *
   9:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * Copyright (c) 2018 Benedek Kupper
  10:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   *
  11:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * Licensed under the Apache License, Version 2.0 (the "License");
  12:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * you may not use this file except in compliance with the License.
  13:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * You may obtain a copy of the License at
  14:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   *
  15:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   *     http://www.apache.org/licenses/LICENSE-2.0
  16:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   *
  17:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * Unless required by applicable law or agreed to in writing, software
  18:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * distributed under the License is distributed on an "AS IS" BASIS,
  19:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  20:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * See the License for the specific language governing permissions and
  21:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   * limitations under the License.
  22:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****   */
  23:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** #ifndef __XPD_EXTI_H_
  24:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** #define __XPD_EXTI_H_
  25:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  26:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** #ifdef __cplusplus
  27:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** extern "C"
  28:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** {
  29:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** #endif
  30:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  31:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** #include <xpd_common.h>
  32:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  33:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /** @defgroup EXTI
ARM GAS  /tmp/ccQmNNsx.s 			page 65


  34:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  * @{ */
  35:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  36:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /** @defgroup EXTI_Exported_Types EXTI Exported Types
  37:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  * @{ */
  38:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  39:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /** @brief EXTI setup structure */
  40:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** typedef union
  41:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** {
  42:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****     struct {
  43:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****     ReactionType Reaction : 2;  /*!< Type of generated reaction for the detected edge */
  44:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****     EdgeType     Edge : 2;      /*!< The selected edges trigger a reaction */
  45:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****     uint8_t : 4;
  46:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****     };
  47:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****     uint8_t w;
  48:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** }EXTI_InitType;
  49:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  50:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /** @} */
  51:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  52:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /** @defgroup EXTI_Exported_Variables EXTI Exported Variables
  53:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  * @{ */
  54:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  55:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /** @brief EXTI GPIO Pin callbacks container array */
  56:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** extern XPD_ValueCallbackType EXTI_xPinCallbacks[16];
  57:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  58:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /** @} */
  59:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  60:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /** @addtogroup EXTI_Exported_Functions
  61:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  * @{ */
  62:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** void            EXTI_vInit           (uint8_t ucLine, const EXTI_InitType * pxConfig);
  63:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** void            EXTI_vDeinit         (uint8_t ucLine);
  64:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  65:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** const EXTI_InitType * EXTI_pxDefaultConfig(void);
  66:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  67:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /**
  68:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  * @brief Gets the pending flag for the line.
  69:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  * @param ucLine: the selected EXTI line
  70:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  * @return The EXTI line flag status
  71:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  */
  72:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** __STATIC_INLINE FlagStatus EXTI_eGetFlag(uint8_t ucLine)
  73:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** {
  74:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** #ifdef EXTI_BB
  75:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****     return EXTI_BB->PR[ucLine];
  76:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** #else
  77:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****     return (EXTI->PR1 >> ucLine) & 1;
  78:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** #endif
  79:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** }
  80:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** 
  81:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** /**
  82:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  * @brief Clears the pending flag for the line.
  83:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  * @param ucLine: the selected EXTI line to clear
  84:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****  */
  85:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** __STATIC_INLINE void EXTI_vClearFlag(uint8_t ucLine)
 361              		.loc 5 85 22 view .LVU82
 362              	.LBB65:
  86:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h **** {
  87:STM32_XPD/STM32H7_XPD/inc/xpd_exti.h ****     EXTI->PR1 = 1 << ucLine;
 363              		.loc 5 87 5 view .LVU83
ARM GAS  /tmp/ccQmNNsx.s 			page 66


 364              		.loc 5 87 15 is_stmt 0 view .LVU84
 365 0000 4FF0B042 		mov	r2, #1476395008
 366 0004 4FF48021 		mov	r1, #262144
 367              	.LBE65:
 368              	.LBE64:
  68:BSP_STM32H7xx/bsp_usb.c ****     USB_vIRQHandler(UsbDevice);
 369              		.loc 1 68 5 view .LVU85
 370 0008 024B     		ldr	r3, .L19
 371              	.LBB67:
 372              	.LBB66:
 373              		.loc 5 87 15 view .LVU86
 374 000a C2F88810 		str	r1, [r2, #136]
 375              	.LVL19:
 376              		.loc 5 87 15 view .LVU87
 377              	.LBE66:
 378              	.LBE67:
 379              		.loc 1 68 5 is_stmt 1 view .LVU88
 380 000e 1868     		ldr	r0, [r3]
 381 0010 FFF7FEBF 		b	USB_vDevIRQHandler
 382              	.LVL20:
 383              	.L20:
 384              		.align	2
 385              	.L19:
 386 0014 00000000 		.word	UsbDevice
 387              		.cfi_endproc
 388              	.LFE161:
 390              		.text
 391              	.Letext0:
 392              		.file 6 "/usr/arm-none-eabi/include/machine/_default_types.h"
 393              		.file 7 "/usr/arm-none-eabi/include/sys/_stdint.h"
 394              		.file 8 "STM32_XPD/STM32H7_XPD/inc/xpd_common.h"
 395              		.file 9 "STM32_XPD/CMSIS/Device/ST/STM32H7xx/Include/stm32h743xx.h"
 396              		.file 10 "STM32_XPD/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 397              		.file 11 "STM32_XPD/STM32H7_XPD/inc/xpd_gpio.h"
 398              		.file 12 "BSP_STM32H7xx/bsp_io.h"
 399              		.file 13 "USBDevice/Include/usb_types.h"
 400              		.file 14 "USBDevice/PDs/STM32_XPD/usbd_pd_def.h"
 401              		.file 15 "USBDevice/Include/usbd_types.h"
 402              		.file 16 "USBDevice/PDs/STM32_XPD/xpd_usb_wrapper.h"
 403              		.file 17 "STM32_XPD/STM32H7_XPD/inc/xpd_usb_otg.h"
ARM GAS  /tmp/ccQmNNsx.s 			page 67


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bsp_usb.c
     /tmp/ccQmNNsx.s:18     .text.BSP_USB_Deinit:0000000000000000 $t
     /tmp/ccQmNNsx.s:26     .text.BSP_USB_Deinit:0000000000000000 BSP_USB_Deinit
     /tmp/ccQmNNsx.s:101    .text.BSP_USB_Deinit:0000000000000020 $d
     /tmp/ccQmNNsx.s:106    .text.BSP_USB_Init:0000000000000000 $t
     /tmp/ccQmNNsx.s:113    .text.BSP_USB_Init:0000000000000000 BSP_USB_Init
     /tmp/ccQmNNsx.s:265    .text.BSP_USB_Init:000000000000004c $d
     /tmp/ccQmNNsx.s:272    .text.BSP_USB_Bind:0000000000000000 $t
     /tmp/ccQmNNsx.s:280    .text.BSP_USB_Bind:0000000000000000 BSP_USB_Bind
     /tmp/ccQmNNsx.s:305    .text.BSP_USB_Bind:0000000000000014 $d
     /tmp/ccQmNNsx.s:313    .text.OTG_FS_IRQHandler:0000000000000000 $t
     /tmp/ccQmNNsx.s:321    .text.OTG_FS_IRQHandler:0000000000000000 OTG_FS_IRQHandler
     /tmp/ccQmNNsx.s:336    .text.OTG_FS_IRQHandler:0000000000000008 $d
     /tmp/ccQmNNsx.s:341    .text.OTG_FS_WKUP_IRQHandler:0000000000000000 $t
     /tmp/ccQmNNsx.s:349    .text.OTG_FS_WKUP_IRQHandler:0000000000000000 OTG_FS_WKUP_IRQHandler
     /tmp/ccQmNNsx.s:386    .text.OTG_FS_WKUP_IRQHandler:0000000000000014 $d

UNDEFINED SYMBOLS
GPIO_vDeinitPin
GPIO_vInitPin
BSP_IOCfg
UsbDevice
USB_vDevIRQHandler
