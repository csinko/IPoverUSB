ARM GAS  /tmp/ccMmskdD.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"inet_chksum.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.lwip_standard_chksum,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	lwip_standard_chksum
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	lwip_standard_chksum:
  28              	.LVL0:
  29              	.LFB105:
  30              		.file 1 "lwIP/src/core/inet_chksum.c"
   1:lwIP/src/core/inet_chksum.c **** /**
   2:lwIP/src/core/inet_chksum.c ****  * @file
   3:lwIP/src/core/inet_chksum.c ****  * Internet checksum functions.\n
   4:lwIP/src/core/inet_chksum.c ****  *
   5:lwIP/src/core/inet_chksum.c ****  * These are some reference implementations of the checksum algorithm, with the
   6:lwIP/src/core/inet_chksum.c ****  * aim of being simple, correct and fully portable. Checksumming is the
   7:lwIP/src/core/inet_chksum.c ****  * first thing you would want to optimize for your platform. If you create
   8:lwIP/src/core/inet_chksum.c ****  * your own version, link it in and in your cc.h put:
   9:lwIP/src/core/inet_chksum.c ****  *
  10:lwIP/src/core/inet_chksum.c ****  * \#define LWIP_CHKSUM your_checksum_routine
  11:lwIP/src/core/inet_chksum.c ****  *
  12:lwIP/src/core/inet_chksum.c ****  * Or you can select from the implementations below by defining
  13:lwIP/src/core/inet_chksum.c ****  * LWIP_CHKSUM_ALGORITHM to 1, 2 or 3.
  14:lwIP/src/core/inet_chksum.c ****  */
  15:lwIP/src/core/inet_chksum.c **** 
  16:lwIP/src/core/inet_chksum.c **** /*
  17:lwIP/src/core/inet_chksum.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
  18:lwIP/src/core/inet_chksum.c ****  * All rights reserved.
  19:lwIP/src/core/inet_chksum.c ****  *
  20:lwIP/src/core/inet_chksum.c ****  * Redistribution and use in source and binary forms, with or without modification,
  21:lwIP/src/core/inet_chksum.c ****  * are permitted provided that the following conditions are met:
  22:lwIP/src/core/inet_chksum.c ****  *
  23:lwIP/src/core/inet_chksum.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  24:lwIP/src/core/inet_chksum.c ****  *    this list of conditions and the following disclaimer.
  25:lwIP/src/core/inet_chksum.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  26:lwIP/src/core/inet_chksum.c ****  *    this list of conditions and the following disclaimer in the documentation
  27:lwIP/src/core/inet_chksum.c ****  *    and/or other materials provided with the distribution.
  28:lwIP/src/core/inet_chksum.c ****  * 3. The name of the author may not be used to endorse or promote products
ARM GAS  /tmp/ccMmskdD.s 			page 2


  29:lwIP/src/core/inet_chksum.c ****  *    derived from this software without specific prior written permission.
  30:lwIP/src/core/inet_chksum.c ****  *
  31:lwIP/src/core/inet_chksum.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  32:lwIP/src/core/inet_chksum.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  33:lwIP/src/core/inet_chksum.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  34:lwIP/src/core/inet_chksum.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  35:lwIP/src/core/inet_chksum.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
  36:lwIP/src/core/inet_chksum.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  37:lwIP/src/core/inet_chksum.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  38:lwIP/src/core/inet_chksum.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  39:lwIP/src/core/inet_chksum.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  40:lwIP/src/core/inet_chksum.c ****  * OF SUCH DAMAGE.
  41:lwIP/src/core/inet_chksum.c ****  *
  42:lwIP/src/core/inet_chksum.c ****  * This file is part of the lwIP TCP/IP stack.
  43:lwIP/src/core/inet_chksum.c ****  *
  44:lwIP/src/core/inet_chksum.c ****  * Author: Adam Dunkels <adam@sics.se>
  45:lwIP/src/core/inet_chksum.c ****  *
  46:lwIP/src/core/inet_chksum.c ****  */
  47:lwIP/src/core/inet_chksum.c **** 
  48:lwIP/src/core/inet_chksum.c **** #include "lwip/opt.h"
  49:lwIP/src/core/inet_chksum.c **** 
  50:lwIP/src/core/inet_chksum.c **** #include "lwip/inet_chksum.h"
  51:lwIP/src/core/inet_chksum.c **** #include "lwip/def.h"
  52:lwIP/src/core/inet_chksum.c **** #include "lwip/ip_addr.h"
  53:lwIP/src/core/inet_chksum.c **** 
  54:lwIP/src/core/inet_chksum.c **** #include <string.h>
  55:lwIP/src/core/inet_chksum.c **** 
  56:lwIP/src/core/inet_chksum.c **** #ifndef LWIP_CHKSUM
  57:lwIP/src/core/inet_chksum.c **** # define LWIP_CHKSUM lwip_standard_chksum
  58:lwIP/src/core/inet_chksum.c **** # ifndef LWIP_CHKSUM_ALGORITHM
  59:lwIP/src/core/inet_chksum.c **** #  define LWIP_CHKSUM_ALGORITHM 2
  60:lwIP/src/core/inet_chksum.c **** # endif
  61:lwIP/src/core/inet_chksum.c **** u16_t lwip_standard_chksum(const void *dataptr, int len);
  62:lwIP/src/core/inet_chksum.c **** #endif
  63:lwIP/src/core/inet_chksum.c **** /* If none set: */
  64:lwIP/src/core/inet_chksum.c **** #ifndef LWIP_CHKSUM_ALGORITHM
  65:lwIP/src/core/inet_chksum.c **** # define LWIP_CHKSUM_ALGORITHM 0
  66:lwIP/src/core/inet_chksum.c **** #endif
  67:lwIP/src/core/inet_chksum.c **** 
  68:lwIP/src/core/inet_chksum.c **** #if (LWIP_CHKSUM_ALGORITHM == 1) /* Version #1 */
  69:lwIP/src/core/inet_chksum.c **** /**
  70:lwIP/src/core/inet_chksum.c ****  * lwip checksum
  71:lwIP/src/core/inet_chksum.c ****  *
  72:lwIP/src/core/inet_chksum.c ****  * @param dataptr points to start of data to be summed at any boundary
  73:lwIP/src/core/inet_chksum.c ****  * @param len length of data to be summed
  74:lwIP/src/core/inet_chksum.c ****  * @return host order (!) lwip checksum (non-inverted Internet sum)
  75:lwIP/src/core/inet_chksum.c ****  *
  76:lwIP/src/core/inet_chksum.c ****  * @note accumulator size limits summable length to 64k
  77:lwIP/src/core/inet_chksum.c ****  * @note host endianess is irrelevant (p3 RFC1071)
  78:lwIP/src/core/inet_chksum.c ****  */
  79:lwIP/src/core/inet_chksum.c **** u16_t
  80:lwIP/src/core/inet_chksum.c **** lwip_standard_chksum(const void *dataptr, int len)
  81:lwIP/src/core/inet_chksum.c **** {
  82:lwIP/src/core/inet_chksum.c ****   u32_t acc;
  83:lwIP/src/core/inet_chksum.c ****   u16_t src;
  84:lwIP/src/core/inet_chksum.c ****   const u8_t *octetptr;
  85:lwIP/src/core/inet_chksum.c **** 
ARM GAS  /tmp/ccMmskdD.s 			page 3


  86:lwIP/src/core/inet_chksum.c ****   acc = 0;
  87:lwIP/src/core/inet_chksum.c ****   /* dataptr may be at odd or even addresses */
  88:lwIP/src/core/inet_chksum.c ****   octetptr = (const u8_t *)dataptr;
  89:lwIP/src/core/inet_chksum.c ****   while (len > 1) {
  90:lwIP/src/core/inet_chksum.c ****     /* declare first octet as most significant
  91:lwIP/src/core/inet_chksum.c ****        thus assume network order, ignoring host order */
  92:lwIP/src/core/inet_chksum.c ****     src = (*octetptr) << 8;
  93:lwIP/src/core/inet_chksum.c ****     octetptr++;
  94:lwIP/src/core/inet_chksum.c ****     /* declare second octet as least significant */
  95:lwIP/src/core/inet_chksum.c ****     src |= (*octetptr);
  96:lwIP/src/core/inet_chksum.c ****     octetptr++;
  97:lwIP/src/core/inet_chksum.c ****     acc += src;
  98:lwIP/src/core/inet_chksum.c ****     len -= 2;
  99:lwIP/src/core/inet_chksum.c ****   }
 100:lwIP/src/core/inet_chksum.c ****   if (len > 0) {
 101:lwIP/src/core/inet_chksum.c ****     /* accumulate remaining octet */
 102:lwIP/src/core/inet_chksum.c ****     src = (*octetptr) << 8;
 103:lwIP/src/core/inet_chksum.c ****     acc += src;
 104:lwIP/src/core/inet_chksum.c ****   }
 105:lwIP/src/core/inet_chksum.c ****   /* add deferred carry bits */
 106:lwIP/src/core/inet_chksum.c ****   acc = (acc >> 16) + (acc & 0x0000ffffUL);
 107:lwIP/src/core/inet_chksum.c ****   if ((acc & 0xffff0000UL) != 0) {
 108:lwIP/src/core/inet_chksum.c ****     acc = (acc >> 16) + (acc & 0x0000ffffUL);
 109:lwIP/src/core/inet_chksum.c ****   }
 110:lwIP/src/core/inet_chksum.c ****   /* This maybe a little confusing: reorder sum using lwip_htons()
 111:lwIP/src/core/inet_chksum.c ****      instead of lwip_ntohs() since it has a little less call overhead.
 112:lwIP/src/core/inet_chksum.c ****      The caller must invert bits for Internet sum ! */
 113:lwIP/src/core/inet_chksum.c ****   return lwip_htons((u16_t)acc);
 114:lwIP/src/core/inet_chksum.c **** }
 115:lwIP/src/core/inet_chksum.c **** #endif
 116:lwIP/src/core/inet_chksum.c **** 
 117:lwIP/src/core/inet_chksum.c **** #if (LWIP_CHKSUM_ALGORITHM == 2) /* Alternative version #2 */
 118:lwIP/src/core/inet_chksum.c **** /*
 119:lwIP/src/core/inet_chksum.c ****  * Curt McDowell
 120:lwIP/src/core/inet_chksum.c ****  * Broadcom Corp.
 121:lwIP/src/core/inet_chksum.c ****  * csm@broadcom.com
 122:lwIP/src/core/inet_chksum.c ****  *
 123:lwIP/src/core/inet_chksum.c ****  * IP checksum two bytes at a time with support for
 124:lwIP/src/core/inet_chksum.c ****  * unaligned buffer.
 125:lwIP/src/core/inet_chksum.c ****  * Works for len up to and including 0x20000.
 126:lwIP/src/core/inet_chksum.c ****  * by Curt McDowell, Broadcom Corp. 12/08/2005
 127:lwIP/src/core/inet_chksum.c ****  *
 128:lwIP/src/core/inet_chksum.c ****  * @param dataptr points to start of data to be summed at any boundary
 129:lwIP/src/core/inet_chksum.c ****  * @param len length of data to be summed
 130:lwIP/src/core/inet_chksum.c ****  * @return host order (!) lwip checksum (non-inverted Internet sum)
 131:lwIP/src/core/inet_chksum.c ****  */
 132:lwIP/src/core/inet_chksum.c **** u16_t
 133:lwIP/src/core/inet_chksum.c **** lwip_standard_chksum(const void *dataptr, int len)
 134:lwIP/src/core/inet_chksum.c **** {
  31              		.loc 1 134 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 8
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
 135:lwIP/src/core/inet_chksum.c ****   const u8_t *pb = (const u8_t *)dataptr;
 136:lwIP/src/core/inet_chksum.c ****   const u16_t *ps;
 137:lwIP/src/core/inet_chksum.c ****   u16_t t = 0;
ARM GAS  /tmp/ccMmskdD.s 			page 4


  36              		.loc 1 137 9 is_stmt 0 view .LVU1
  37 0000 0023     		movs	r3, #0
 135:lwIP/src/core/inet_chksum.c ****   const u8_t *pb = (const u8_t *)dataptr;
  38              		.loc 1 135 3 is_stmt 1 view .LVU2
  39              	.LVL1:
 136:lwIP/src/core/inet_chksum.c ****   u16_t t = 0;
  40              		.loc 1 136 3 view .LVU3
  41              		.loc 1 137 3 view .LVU4
 134:lwIP/src/core/inet_chksum.c ****   const u8_t *pb = (const u8_t *)dataptr;
  42              		.loc 1 134 1 is_stmt 0 view .LVU5
  43 0002 70B4     		push	{r4, r5, r6}
  44              	.LCFI0:
  45              		.cfi_def_cfa_offset 12
  46              		.cfi_offset 4, -12
  47              		.cfi_offset 5, -8
  48              		.cfi_offset 6, -4
 138:lwIP/src/core/inet_chksum.c ****   u32_t sum = 0;
 139:lwIP/src/core/inet_chksum.c ****   int odd = ((mem_ptr_t)pb & 1);
 140:lwIP/src/core/inet_chksum.c **** 
 141:lwIP/src/core/inet_chksum.c ****   /* Get aligned to u16_t */
 142:lwIP/src/core/inet_chksum.c ****   if (odd && len > 0) {
  49              		.loc 1 142 6 view .LVU6
  50 0004 9942     		cmp	r1, r3
 134:lwIP/src/core/inet_chksum.c ****   const u8_t *pb = (const u8_t *)dataptr;
  51              		.loc 1 134 1 view .LVU7
  52 0006 83B0     		sub	sp, sp, #12
  53              	.LCFI1:
  54              		.cfi_def_cfa_offset 24
 139:lwIP/src/core/inet_chksum.c **** 
  55              		.loc 1 139 7 view .LVU8
  56 0008 00F00106 		and	r6, r0, #1
 137:lwIP/src/core/inet_chksum.c ****   u32_t sum = 0;
  57              		.loc 1 137 9 view .LVU9
  58 000c ADF80630 		strh	r3, [sp, #6]	@ movhi
 138:lwIP/src/core/inet_chksum.c ****   u32_t sum = 0;
  59              		.loc 1 138 3 is_stmt 1 view .LVU10
  60              	.LVL2:
 139:lwIP/src/core/inet_chksum.c **** 
  61              		.loc 1 139 3 view .LVU11
  62              		.loc 1 142 3 view .LVU12
  63              		.loc 1 142 6 is_stmt 0 view .LVU13
  64 0010 05DD     		ble	.L2
  65 0012 26B1     		cbz	r6, .L2
 143:lwIP/src/core/inet_chksum.c ****     ((u8_t *)&t)[1] = *pb++;
  66              		.loc 1 143 5 is_stmt 1 view .LVU14
  67              	.LVL3:
  68              		.loc 1 143 21 is_stmt 0 view .LVU15
  69 0014 10F8013B 		ldrb	r3, [r0], #1	@ zero_extendqisi2
  70              	.LVL4:
 144:lwIP/src/core/inet_chksum.c ****     len--;
  71              		.loc 1 144 8 view .LVU16
  72 0018 0139     		subs	r1, r1, #1
  73              	.LVL5:
 143:lwIP/src/core/inet_chksum.c ****     ((u8_t *)&t)[1] = *pb++;
  74              		.loc 1 143 21 view .LVU17
  75 001a 8DF80730 		strb	r3, [sp, #7]
  76              		.loc 1 144 5 is_stmt 1 view .LVU18
ARM GAS  /tmp/ccMmskdD.s 			page 5


  77              	.LVL6:
  78              	.L2:
 145:lwIP/src/core/inet_chksum.c ****   }
 146:lwIP/src/core/inet_chksum.c **** 
 147:lwIP/src/core/inet_chksum.c ****   /* Add the bulk of the data */
 148:lwIP/src/core/inet_chksum.c ****   ps = (const u16_t *)(const void *)pb;
  79              		.loc 1 148 3 view .LVU19
 149:lwIP/src/core/inet_chksum.c ****   while (len > 1) {
  80              		.loc 1 149 3 view .LVU20
  81              		.loc 1 149 9 view .LVU21
  82 001e 0129     		cmp	r1, #1
  83 0020 26DD     		ble	.L7
  84              		.loc 1 149 9 is_stmt 0 view .LVU22
  85 0022 0239     		subs	r1, r1, #2
 138:lwIP/src/core/inet_chksum.c ****   int odd = ((mem_ptr_t)pb & 1);
  86              		.loc 1 138 9 view .LVU23
  87 0024 0023     		movs	r3, #0
  88 0026 4D08     		lsrs	r5, r1, #1
  89 0028 6C1C     		adds	r4, r5, #1
  90 002a 00EB4404 		add	r4, r0, r4, lsl #1
  91              	.LVL7:
  92              	.L4:
 150:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
  93              		.loc 1 150 5 is_stmt 1 view .LVU24
  94              		.loc 1 150 12 is_stmt 0 view .LVU25
  95 002e 30F8022B 		ldrh	r2, [r0], #2
  96              	.LVL8:
 149:lwIP/src/core/inet_chksum.c ****   while (len > 1) {
  97              		.loc 1 149 9 view .LVU26
  98 0032 A042     		cmp	r0, r4
  99              		.loc 1 150 9 view .LVU27
 100 0034 1344     		add	r3, r3, r2
 101              	.LVL9:
 151:lwIP/src/core/inet_chksum.c ****     len -= 2;
 102              		.loc 1 151 5 is_stmt 1 view .LVU28
 149:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
 103              		.loc 1 149 9 view .LVU29
 104 0036 FAD1     		bne	.L4
 105 0038 C5EBC575 		rsb	r5, r5, r5, lsl #31
 106              	.LVL10:
 149:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
 107              		.loc 1 149 9 is_stmt 0 view .LVU30
 108 003c 01EB4501 		add	r1, r1, r5, lsl #1
 109              	.LVL11:
 110              	.L3:
 152:lwIP/src/core/inet_chksum.c ****   }
 153:lwIP/src/core/inet_chksum.c **** 
 154:lwIP/src/core/inet_chksum.c ****   /* Consume left-over byte, if any */
 155:lwIP/src/core/inet_chksum.c ****   if (len > 0) {
 111              		.loc 1 155 3 is_stmt 1 view .LVU31
 112              		.loc 1 155 6 is_stmt 0 view .LVU32
 113 0040 0129     		cmp	r1, #1
 114 0042 02D1     		bne	.L5
 156:lwIP/src/core/inet_chksum.c ****     ((u8_t *)&t)[0] = *(const u8_t *)ps;
 115              		.loc 1 156 5 is_stmt 1 view .LVU33
 116              		.loc 1 156 21 is_stmt 0 view .LVU34
 117 0044 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
ARM GAS  /tmp/ccMmskdD.s 			page 6


 118 0046 8DF80620 		strb	r2, [sp, #6]
 119              	.L5:
 157:lwIP/src/core/inet_chksum.c ****   }
 158:lwIP/src/core/inet_chksum.c **** 
 159:lwIP/src/core/inet_chksum.c ****   /* Add end bytes */
 160:lwIP/src/core/inet_chksum.c ****   sum += t;
 120              		.loc 1 160 3 is_stmt 1 view .LVU35
 121              		.loc 1 160 7 is_stmt 0 view .LVU36
 122 004a BDF80600 		ldrh	r0, [sp, #6]
 123              	.LVL12:
 124              		.loc 1 160 7 view .LVU37
 125 004e 0344     		add	r3, r3, r0
 126              	.LVL13:
 161:lwIP/src/core/inet_chksum.c **** 
 162:lwIP/src/core/inet_chksum.c ****   /* Fold 32-bit sum to 16 bits
 163:lwIP/src/core/inet_chksum.c ****      calling this twice is probably faster than if statements... */
 164:lwIP/src/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 127              		.loc 1 164 3 is_stmt 1 view .LVU38
 128              		.loc 1 164 9 is_stmt 0 view .LVU39
 129 0050 98B2     		uxth	r0, r3
 130              		.loc 1 164 7 view .LVU40
 131 0052 00EB1343 		add	r3, r0, r3, lsr #16
 132              	.LVL14:
 165:lwIP/src/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 133              		.loc 1 165 3 is_stmt 1 view .LVU41
 134              		.loc 1 165 9 is_stmt 0 view .LVU42
 135 0056 98B2     		uxth	r0, r3
 136              		.loc 1 165 7 view .LVU43
 137 0058 00EB1340 		add	r0, r0, r3, lsr #16
 138              	.LVL15:
 166:lwIP/src/core/inet_chksum.c **** 
 167:lwIP/src/core/inet_chksum.c ****   /* Swap if alignment was odd */
 168:lwIP/src/core/inet_chksum.c ****   if (odd) {
 139              		.loc 1 168 3 is_stmt 1 view .LVU44
 140              		.loc 1 168 6 is_stmt 0 view .LVU45
 141 005c 26B1     		cbz	r6, .L6
 169:lwIP/src/core/inet_chksum.c ****     sum = SWAP_BYTES_IN_WORD(sum);
 142              		.loc 1 169 5 is_stmt 1 view .LVU46
 143              		.loc 1 169 11 is_stmt 0 view .LVU47
 144 005e 0302     		lsls	r3, r0, #8
 145 0060 C0F30720 		ubfx	r0, r0, #8, #8
 146              	.LVL16:
 147              		.loc 1 169 11 view .LVU48
 148 0064 9BB2     		uxth	r3, r3
 149              		.loc 1 169 9 view .LVU49
 150 0066 1843     		orrs	r0, r0, r3
 151              	.LVL17:
 152              	.L6:
 170:lwIP/src/core/inet_chksum.c ****   }
 171:lwIP/src/core/inet_chksum.c **** 
 172:lwIP/src/core/inet_chksum.c ****   return (u16_t)sum;
 153              		.loc 1 172 3 is_stmt 1 view .LVU50
 173:lwIP/src/core/inet_chksum.c **** }
 154              		.loc 1 173 1 is_stmt 0 view .LVU51
 155 0068 80B2     		uxth	r0, r0
 156              	.LVL18:
 157              		.loc 1 173 1 view .LVU52
ARM GAS  /tmp/ccMmskdD.s 			page 7


 158 006a 03B0     		add	sp, sp, #12
 159              	.LCFI2:
 160              		.cfi_remember_state
 161              		.cfi_def_cfa_offset 12
 162              		@ sp needed
 163 006c 70BC     		pop	{r4, r5, r6}
 164              	.LCFI3:
 165              		.cfi_restore 6
 166              		.cfi_restore 5
 167              		.cfi_restore 4
 168              		.cfi_def_cfa_offset 0
 169              	.LVL19:
 170              		.loc 1 173 1 view .LVU53
 171 006e 7047     		bx	lr
 172              	.LVL20:
 173              	.L7:
 174              	.LCFI4:
 175              		.cfi_restore_state
 148:lwIP/src/core/inet_chksum.c ****   while (len > 1) {
 176              		.loc 1 148 6 view .LVU54
 177 0070 0446     		mov	r4, r0
 138:lwIP/src/core/inet_chksum.c ****   int odd = ((mem_ptr_t)pb & 1);
 178              		.loc 1 138 9 view .LVU55
 179 0072 0023     		movs	r3, #0
 180 0074 E4E7     		b	.L3
 181              		.cfi_endproc
 182              	.LFE105:
 184 0076 00BF     		.section	.text.inet_chksum_pseudo,"ax",%progbits
 185              		.align	1
 186              		.p2align 2,,3
 187              		.global	inet_chksum_pseudo
 188              		.syntax unified
 189              		.thumb
 190              		.thumb_func
 191              		.fpu fpv4-sp-d16
 193              	inet_chksum_pseudo:
 194              	.LVL21:
 195              	.LFB107:
 174:lwIP/src/core/inet_chksum.c **** #endif
 175:lwIP/src/core/inet_chksum.c **** 
 176:lwIP/src/core/inet_chksum.c **** #if (LWIP_CHKSUM_ALGORITHM == 3) /* Alternative version #3 */
 177:lwIP/src/core/inet_chksum.c **** /**
 178:lwIP/src/core/inet_chksum.c ****  * An optimized checksum routine. Basically, it uses loop-unrolling on
 179:lwIP/src/core/inet_chksum.c ****  * the checksum loop, treating the head and tail bytes specially, whereas
 180:lwIP/src/core/inet_chksum.c ****  * the inner loop acts on 8 bytes at a time.
 181:lwIP/src/core/inet_chksum.c ****  *
 182:lwIP/src/core/inet_chksum.c ****  * @arg start of buffer to be checksummed. May be an odd byte address.
 183:lwIP/src/core/inet_chksum.c ****  * @len number of bytes in the buffer to be checksummed.
 184:lwIP/src/core/inet_chksum.c ****  * @return host order (!) lwip checksum (non-inverted Internet sum)
 185:lwIP/src/core/inet_chksum.c ****  *
 186:lwIP/src/core/inet_chksum.c ****  * by Curt McDowell, Broadcom Corp. December 8th, 2005
 187:lwIP/src/core/inet_chksum.c ****  */
 188:lwIP/src/core/inet_chksum.c **** u16_t
 189:lwIP/src/core/inet_chksum.c **** lwip_standard_chksum(const void *dataptr, int len)
 190:lwIP/src/core/inet_chksum.c **** {
 191:lwIP/src/core/inet_chksum.c ****   const u8_t *pb = (const u8_t *)dataptr;
 192:lwIP/src/core/inet_chksum.c ****   const u16_t *ps;
ARM GAS  /tmp/ccMmskdD.s 			page 8


 193:lwIP/src/core/inet_chksum.c ****   u16_t t = 0;
 194:lwIP/src/core/inet_chksum.c ****   const u32_t *pl;
 195:lwIP/src/core/inet_chksum.c ****   u32_t sum = 0, tmp;
 196:lwIP/src/core/inet_chksum.c ****   /* starts at odd byte address? */
 197:lwIP/src/core/inet_chksum.c ****   int odd = ((mem_ptr_t)pb & 1);
 198:lwIP/src/core/inet_chksum.c **** 
 199:lwIP/src/core/inet_chksum.c ****   if (odd && len > 0) {
 200:lwIP/src/core/inet_chksum.c ****     ((u8_t *)&t)[1] = *pb++;
 201:lwIP/src/core/inet_chksum.c ****     len--;
 202:lwIP/src/core/inet_chksum.c ****   }
 203:lwIP/src/core/inet_chksum.c **** 
 204:lwIP/src/core/inet_chksum.c ****   ps = (const u16_t *)(const void *)pb;
 205:lwIP/src/core/inet_chksum.c **** 
 206:lwIP/src/core/inet_chksum.c ****   if (((mem_ptr_t)ps & 3) && len > 1) {
 207:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
 208:lwIP/src/core/inet_chksum.c ****     len -= 2;
 209:lwIP/src/core/inet_chksum.c ****   }
 210:lwIP/src/core/inet_chksum.c **** 
 211:lwIP/src/core/inet_chksum.c ****   pl = (const u32_t *)(const void *)ps;
 212:lwIP/src/core/inet_chksum.c **** 
 213:lwIP/src/core/inet_chksum.c ****   while (len > 7)  {
 214:lwIP/src/core/inet_chksum.c ****     tmp = sum + *pl++;          /* ping */
 215:lwIP/src/core/inet_chksum.c ****     if (tmp < sum) {
 216:lwIP/src/core/inet_chksum.c ****       tmp++;                    /* add back carry */
 217:lwIP/src/core/inet_chksum.c ****     }
 218:lwIP/src/core/inet_chksum.c **** 
 219:lwIP/src/core/inet_chksum.c ****     sum = tmp + *pl++;          /* pong */
 220:lwIP/src/core/inet_chksum.c ****     if (sum < tmp) {
 221:lwIP/src/core/inet_chksum.c ****       sum++;                    /* add back carry */
 222:lwIP/src/core/inet_chksum.c ****     }
 223:lwIP/src/core/inet_chksum.c **** 
 224:lwIP/src/core/inet_chksum.c ****     len -= 8;
 225:lwIP/src/core/inet_chksum.c ****   }
 226:lwIP/src/core/inet_chksum.c **** 
 227:lwIP/src/core/inet_chksum.c ****   /* make room in upper bits */
 228:lwIP/src/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 229:lwIP/src/core/inet_chksum.c **** 
 230:lwIP/src/core/inet_chksum.c ****   ps = (const u16_t *)pl;
 231:lwIP/src/core/inet_chksum.c **** 
 232:lwIP/src/core/inet_chksum.c ****   /* 16-bit aligned word remaining? */
 233:lwIP/src/core/inet_chksum.c ****   while (len > 1) {
 234:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
 235:lwIP/src/core/inet_chksum.c ****     len -= 2;
 236:lwIP/src/core/inet_chksum.c ****   }
 237:lwIP/src/core/inet_chksum.c **** 
 238:lwIP/src/core/inet_chksum.c ****   /* dangling tail byte remaining? */
 239:lwIP/src/core/inet_chksum.c ****   if (len > 0) {                /* include odd byte */
 240:lwIP/src/core/inet_chksum.c ****     ((u8_t *)&t)[0] = *(const u8_t *)ps;
 241:lwIP/src/core/inet_chksum.c ****   }
 242:lwIP/src/core/inet_chksum.c **** 
 243:lwIP/src/core/inet_chksum.c ****   sum += t;                     /* add end bytes */
 244:lwIP/src/core/inet_chksum.c **** 
 245:lwIP/src/core/inet_chksum.c ****   /* Fold 32-bit sum to 16 bits
 246:lwIP/src/core/inet_chksum.c ****      calling this twice is probably faster than if statements... */
 247:lwIP/src/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 248:lwIP/src/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 249:lwIP/src/core/inet_chksum.c **** 
ARM GAS  /tmp/ccMmskdD.s 			page 9


 250:lwIP/src/core/inet_chksum.c ****   if (odd) {
 251:lwIP/src/core/inet_chksum.c ****     sum = SWAP_BYTES_IN_WORD(sum);
 252:lwIP/src/core/inet_chksum.c ****   }
 253:lwIP/src/core/inet_chksum.c **** 
 254:lwIP/src/core/inet_chksum.c ****   return (u16_t)sum;
 255:lwIP/src/core/inet_chksum.c **** }
 256:lwIP/src/core/inet_chksum.c **** #endif
 257:lwIP/src/core/inet_chksum.c **** 
 258:lwIP/src/core/inet_chksum.c **** /** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
 259:lwIP/src/core/inet_chksum.c **** static u16_t
 260:lwIP/src/core/inet_chksum.c **** inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
 261:lwIP/src/core/inet_chksum.c **** {
 262:lwIP/src/core/inet_chksum.c ****   struct pbuf *q;
 263:lwIP/src/core/inet_chksum.c ****   int swapped = 0;
 264:lwIP/src/core/inet_chksum.c **** 
 265:lwIP/src/core/inet_chksum.c ****   /* iterate through all pbuf in chain */
 266:lwIP/src/core/inet_chksum.c ****   for (q = p; q != NULL; q = q->next) {
 267:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 268:lwIP/src/core/inet_chksum.c ****                              (void *)q, (void *)q->next));
 269:lwIP/src/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 270:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 271:lwIP/src/core/inet_chksum.c ****     /* just executing this next line is probably faster that the if statement needed
 272:lwIP/src/core/inet_chksum.c ****        to check whether we really need to execute it, and does no harm */
 273:lwIP/src/core/inet_chksum.c ****     acc = FOLD_U32T(acc);
 274:lwIP/src/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 275:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 276:lwIP/src/core/inet_chksum.c ****       acc = SWAP_BYTES_IN_WORD(acc);
 277:lwIP/src/core/inet_chksum.c ****     }
 278:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
 279:lwIP/src/core/inet_chksum.c ****   }
 280:lwIP/src/core/inet_chksum.c **** 
 281:lwIP/src/core/inet_chksum.c ****   if (swapped) {
 282:lwIP/src/core/inet_chksum.c ****     acc = SWAP_BYTES_IN_WORD(acc);
 283:lwIP/src/core/inet_chksum.c ****   }
 284:lwIP/src/core/inet_chksum.c **** 
 285:lwIP/src/core/inet_chksum.c ****   acc += (u32_t)lwip_htons((u16_t)proto);
 286:lwIP/src/core/inet_chksum.c ****   acc += (u32_t)lwip_htons(proto_len);
 287:lwIP/src/core/inet_chksum.c **** 
 288:lwIP/src/core/inet_chksum.c ****   /* Fold 32-bit sum to 16 bits
 289:lwIP/src/core/inet_chksum.c ****      calling this twice is probably faster than if statements... */
 290:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 291:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 292:lwIP/src/core/inet_chksum.c ****   LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
 293:lwIP/src/core/inet_chksum.c ****   return (u16_t)~(acc & 0xffffUL);
 294:lwIP/src/core/inet_chksum.c **** }
 295:lwIP/src/core/inet_chksum.c **** 
 296:lwIP/src/core/inet_chksum.c **** #if LWIP_IPV4
 297:lwIP/src/core/inet_chksum.c **** /* inet_chksum_pseudo:
 298:lwIP/src/core/inet_chksum.c ****  *
 299:lwIP/src/core/inet_chksum.c ****  * Calculates the IPv4 pseudo Internet checksum used by TCP and UDP for a pbuf chain.
 300:lwIP/src/core/inet_chksum.c ****  * IP addresses are expected to be in network byte order.
 301:lwIP/src/core/inet_chksum.c ****  *
 302:lwIP/src/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 303:lwIP/src/core/inet_chksum.c ****  * @param src source ip address (used for checksum of pseudo header)
 304:lwIP/src/core/inet_chksum.c ****  * @param dst destination ip address (used for checksum of pseudo header)
 305:lwIP/src/core/inet_chksum.c ****  * @param proto ip protocol (used for checksum of pseudo header)
 306:lwIP/src/core/inet_chksum.c ****  * @param proto_len length of the ip data part (used for checksum of pseudo header)
ARM GAS  /tmp/ccMmskdD.s 			page 10


 307:lwIP/src/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 308:lwIP/src/core/inet_chksum.c ****  */
 309:lwIP/src/core/inet_chksum.c **** u16_t
 310:lwIP/src/core/inet_chksum.c **** inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
 311:lwIP/src/core/inet_chksum.c ****                    const ip4_addr_t *src, const ip4_addr_t *dest)
 312:lwIP/src/core/inet_chksum.c **** {
 196              		.loc 1 312 1 is_stmt 1 view -0
 197              		.cfi_startproc
 198              		@ args = 4, pretend = 0, frame = 0
 199              		@ frame_needed = 0, uses_anonymous_args = 0
 313:lwIP/src/core/inet_chksum.c ****   u32_t acc;
 200              		.loc 1 313 3 view .LVU57
 314:lwIP/src/core/inet_chksum.c ****   u32_t addr;
 201              		.loc 1 314 3 view .LVU58
 315:lwIP/src/core/inet_chksum.c **** 
 316:lwIP/src/core/inet_chksum.c ****   addr = ip4_addr_get_u32(src);
 202              		.loc 1 316 3 view .LVU59
 312:lwIP/src/core/inet_chksum.c ****   u32_t acc;
 203              		.loc 1 312 1 is_stmt 0 view .LVU60
 204 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 205              	.LCFI5:
 206              		.cfi_def_cfa_offset 24
 207              		.cfi_offset 4, -24
 208              		.cfi_offset 5, -20
 209              		.cfi_offset 6, -16
 210              		.cfi_offset 7, -12
 211              		.cfi_offset 8, -8
 212              		.cfi_offset 14, -4
 312:lwIP/src/core/inet_chksum.c ****   u32_t acc;
 213              		.loc 1 312 1 view .LVU61
 214 0004 069C     		ldr	r4, [sp, #24]
 215 0006 0F46     		mov	r7, r1
 216              		.loc 1 316 8 view .LVU62
 217 0008 1B68     		ldr	r3, [r3]
 218              	.LVL22:
 317:lwIP/src/core/inet_chksum.c ****   acc = (addr & 0xffffUL);
 219              		.loc 1 317 3 is_stmt 1 view .LVU63
 318:lwIP/src/core/inet_chksum.c ****   acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 220              		.loc 1 318 3 view .LVU64
 319:lwIP/src/core/inet_chksum.c ****   addr = ip4_addr_get_u32(dest);
 221              		.loc 1 319 3 view .LVU65
 312:lwIP/src/core/inet_chksum.c ****   u32_t acc;
 222              		.loc 1 312 1 is_stmt 0 view .LVU66
 223 000a 9046     		mov	r8, r2
 224              		.loc 1 319 8 view .LVU67
 225 000c 2668     		ldr	r6, [r4]
 226              	.LVL23:
 320:lwIP/src/core/inet_chksum.c ****   acc = (u32_t)(acc + (addr & 0xffffUL));
 227              		.loc 1 320 3 is_stmt 1 view .LVU68
 321:lwIP/src/core/inet_chksum.c ****   acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 228              		.loc 1 321 3 view .LVU69
 229              		.loc 1 321 30 is_stmt 0 view .LVU70
 230 000e 310C     		lsrs	r1, r6, #16
 231              	.LVL24:
 232              		.loc 1 321 30 view .LVU71
 233 0010 11FA86F6 		uxtah	r6, r1, r6
 234              	.LVL25:
ARM GAS  /tmp/ccMmskdD.s 			page 11


 235              		.loc 1 321 30 view .LVU72
 236 0014 16FA83F6 		uxtah	r6, r6, r3
 237              		.loc 1 321 7 view .LVU73
 238 0018 06EB1346 		add	r6, r6, r3, lsr #16
 239              	.LVL26:
 322:lwIP/src/core/inet_chksum.c ****   /* fold down to 16 bits */
 323:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 240              		.loc 1 323 3 is_stmt 1 view .LVU74
 241              		.loc 1 323 9 is_stmt 0 view .LVU75
 242 001c B4B2     		uxth	r4, r6
 243              	.LVL27:
 244              		.loc 1 323 7 view .LVU76
 245 001e 04EB1646 		add	r6, r4, r6, lsr #16
 246              	.LVL28:
 324:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 247              		.loc 1 324 3 is_stmt 1 view .LVU77
 248              		.loc 1 324 9 is_stmt 0 view .LVU78
 249 0022 B4B2     		uxth	r4, r6
 250              		.loc 1 324 7 view .LVU79
 251 0024 04EB1644 		add	r4, r4, r6, lsr #16
 252              	.LVL29:
 325:lwIP/src/core/inet_chksum.c **** 
 326:lwIP/src/core/inet_chksum.c ****   return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 253              		.loc 1 326 3 is_stmt 1 view .LVU80
 254              	.LBB16:
 255              	.LBI16:
 260:lwIP/src/core/inet_chksum.c **** {
 256              		.loc 1 260 1 view .LVU81
 257              	.LBB17:
 262:lwIP/src/core/inet_chksum.c ****   int swapped = 0;
 258              		.loc 1 262 3 view .LVU82
 263:lwIP/src/core/inet_chksum.c **** 
 259              		.loc 1 263 3 view .LVU83
 266:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 260              		.loc 1 266 3 view .LVU84
 266:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 261              		.loc 1 266 15 view .LVU85
 266:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 262              		.loc 1 266 3 is_stmt 0 view .LVU86
 263 0028 F0B1     		cbz	r0, .L21
 264 002a 0546     		mov	r5, r0
 263:lwIP/src/core/inet_chksum.c **** 
 265              		.loc 1 263 7 view .LVU87
 266 002c 0026     		movs	r6, #0
 267              	.LVL30:
 268              	.L23:
 268:lwIP/src/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 269              		.loc 1 268 58 is_stmt 1 view .LVU88
 269:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 270              		.loc 1 269 5 view .LVU89
 269:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 271              		.loc 1 269 12 is_stmt 0 view .LVU90
 272 002e 6989     		ldrh	r1, [r5, #10]
 273 0030 6868     		ldr	r0, [r5, #4]
 274 0032 FFF7FEFF 		bl	lwip_standard_chksum
 275              	.LVL31:
 275:lwIP/src/core/inet_chksum.c ****       acc = SWAP_BYTES_IN_WORD(acc);
ARM GAS  /tmp/ccMmskdD.s 			page 12


 276              		.loc 1 275 7 is_stmt 1 view .LVU91
 269:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 277              		.loc 1 269 9 is_stmt 0 view .LVU92
 278 0036 2044     		add	r0, r0, r4
 279              	.LVL32:
 273:lwIP/src/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 280              		.loc 1 273 5 is_stmt 1 view .LVU93
 274:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 281              		.loc 1 274 20 is_stmt 0 view .LVU94
 282 0038 6B89     		ldrh	r3, [r5, #10]
 273:lwIP/src/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 283              		.loc 1 273 11 view .LVU95
 284 003a 84B2     		uxth	r4, r0
 274:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 285              		.loc 1 274 8 view .LVU96
 286 003c 13F0010F 		tst	r3, #1
 273:lwIP/src/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 287              		.loc 1 273 9 view .LVU97
 288 0040 04EB1044 		add	r4, r4, r0, lsr #16
 289              	.LVL33:
 274:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 290              		.loc 1 274 5 is_stmt 1 view .LVU98
 276:lwIP/src/core/inet_chksum.c ****     }
 291              		.loc 1 276 13 is_stmt 0 view .LVU99
 292 0044 4FEA0420 		lsl	r0, r4, #8
 293 0048 C4F30723 		ubfx	r3, r4, #8, #8
 274:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 294              		.loc 1 274 8 view .LVU100
 295 004c 03D0     		beq	.L22
 276:lwIP/src/core/inet_chksum.c ****     }
 296              		.loc 1 276 13 view .LVU101
 297 004e 84B2     		uxth	r4, r0
 298              	.LVL34:
 276:lwIP/src/core/inet_chksum.c ****     }
 299              		.loc 1 276 13 view .LVU102
 300 0050 86F00106 		eor	r6, r6, #1
 301              	.LVL35:
 276:lwIP/src/core/inet_chksum.c ****     }
 302              		.loc 1 276 7 is_stmt 1 view .LVU103
 276:lwIP/src/core/inet_chksum.c ****     }
 303              		.loc 1 276 11 is_stmt 0 view .LVU104
 304 0054 1C43     		orrs	r4, r4, r3
 305              	.LVL36:
 306              	.L22:
 266:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 307              		.loc 1 266 26 is_stmt 1 view .LVU105
 266:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 308              		.loc 1 266 28 is_stmt 0 view .LVU106
 309 0056 2D68     		ldr	r5, [r5]
 310              	.LVL37:
 266:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 311              		.loc 1 266 15 is_stmt 1 view .LVU107
 266:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 312              		.loc 1 266 3 is_stmt 0 view .LVU108
 313 0058 002D     		cmp	r5, #0
 314 005a E8D1     		bne	.L23
 281:lwIP/src/core/inet_chksum.c ****     acc = SWAP_BYTES_IN_WORD(acc);
ARM GAS  /tmp/ccMmskdD.s 			page 13


 315              		.loc 1 281 3 is_stmt 1 view .LVU109
 281:lwIP/src/core/inet_chksum.c ****     acc = SWAP_BYTES_IN_WORD(acc);
 316              		.loc 1 281 6 is_stmt 0 view .LVU110
 317 005c 26B1     		cbz	r6, .L21
 282:lwIP/src/core/inet_chksum.c ****   }
 318              		.loc 1 282 5 is_stmt 1 view .LVU111
 282:lwIP/src/core/inet_chksum.c ****   }
 319              		.loc 1 282 11 is_stmt 0 view .LVU112
 320 005e 2302     		lsls	r3, r4, #8
 321 0060 C4F30724 		ubfx	r4, r4, #8, #8
 322              	.LVL38:
 282:lwIP/src/core/inet_chksum.c ****   }
 323              		.loc 1 282 11 view .LVU113
 324 0064 9BB2     		uxth	r3, r3
 282:lwIP/src/core/inet_chksum.c ****   }
 325              		.loc 1 282 9 view .LVU114
 326 0066 1C43     		orrs	r4, r4, r3
 327              	.LVL39:
 328              	.L21:
 285:lwIP/src/core/inet_chksum.c ****   acc += (u32_t)lwip_htons(proto_len);
 329              		.loc 1 285 3 is_stmt 1 view .LVU115
 330              	.LBB18:
 331              	.LBI18:
 332              		.file 2 "STM32_XPD/CMSIS/Include/cmsis_gcc.h"
   1:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccMmskdD.s 			page 14


  34:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
ARM GAS  /tmp/ccMmskdD.s 			page 15


  91:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 117:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 118:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   @{
 122:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 123:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 129:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 131:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 133:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 134:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 136:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 140:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 142:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 144:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 145:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 146:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 147:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
ARM GAS  /tmp/ccMmskdD.s 			page 16


 148:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 151:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 153:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 155:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 158:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 159:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 160:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 162:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 166:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 168:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 170:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 173:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 174:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 175:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 176:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 177:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 181:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 183:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 185:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 186:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 187:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 189:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 193:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 195:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 197:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 198:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 200:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 201:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccMmskdD.s 			page 17


 205:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 207:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 209:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 212:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 213:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 214:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 215:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 219:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 221:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 223:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 226:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 227:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 228:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 229:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 233:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 235:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 240:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 241:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 242:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 243:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 247:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 249:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 254:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 255:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 256:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 258:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccMmskdD.s 			page 18


 262:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 264:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 266:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 269:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 270:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 271:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 272:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 273:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 277:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 279:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 281:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 282:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 283:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 285:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 289:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 291:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 293:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 294:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 295:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 296:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 297:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 301:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 303:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 308:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 309:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 310:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 312:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 316:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 318:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccMmskdD.s 			page 19


 319:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 320:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 323:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 324:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 325:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 326:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 327:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 331:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 333:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 335:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 336:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 337:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 339:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 343:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 345:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 347:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 348:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 349:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 350:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 352:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 356:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 358:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 360:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 363:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 364:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 365:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 366:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 370:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 372:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 374:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 375:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccMmskdD.s 			page 20


 376:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 377:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 378:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 382:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 384:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 386:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 389:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 390:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 391:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 393:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 397:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 399:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 401:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 404:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 405:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 406:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 407:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 408:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 412:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 414:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 416:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 417:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 418:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 420:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 424:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 426:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 428:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 429:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 430:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 431:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
ARM GAS  /tmp/ccMmskdD.s 			page 21


 433:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 435:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 439:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 441:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 443:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 444:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 445:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 446:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 450:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 452:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 454:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 455:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 456:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 457:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 461:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 463:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 465:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 468:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 469:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 470:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 472:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 476:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 478:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 480:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 483:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 484:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 485:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 486:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 487:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
ARM GAS  /tmp/ccMmskdD.s 			page 22


 490:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 491:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 493:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 495:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 496:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 497:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 499:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 503:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 505:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 507:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 508:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 509:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 510:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 511:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 516:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 518:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 520:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 521:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 522:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 523:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 527:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 529:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 531:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 534:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 535:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 536:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 538:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 542:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 544:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 546:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
ARM GAS  /tmp/ccMmskdD.s 			page 23


 547:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 549:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 550:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 551:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 552:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 553:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 557:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 559:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 561:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 562:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 563:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 565:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 569:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 571:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 573:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 574:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 575:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 579:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 580:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 583:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 584:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   
 589:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 592:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 594:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 599:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 603:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccMmskdD.s 			page 24


 604:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 605:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 607:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 611:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 614:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 616:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 620:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 624:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 625:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 626:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 627:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 628:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 629:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   
 634:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 637:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 639:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 644:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 646:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 647:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 648:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 649:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 651:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 655:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 658:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 660:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
ARM GAS  /tmp/ccMmskdD.s 			page 25


 661:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 664:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 666:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 667:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 668:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 669:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 670:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 671:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 676:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 679:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 681:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 686:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 690:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 691:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 692:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 693:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 695:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 699:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 702:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 704:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 708:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 712:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 713:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 714:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 715:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 716:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 717:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
ARM GAS  /tmp/ccMmskdD.s 			page 26


 718:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 722:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 725:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 727:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 732:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 734:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 735:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 736:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 737:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 739:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 743:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 746:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 748:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 752:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 754:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 755:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 756:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 757:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 760:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 761:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 762:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 766:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 768:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
ARM GAS  /tmp/ccMmskdD.s 			page 27


 775:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 776:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 778:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 781:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 782:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 784:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 785:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 786:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 787:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 788:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 792:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 794:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 802:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 804:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 805:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 807:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 808:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 809:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 810:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 812:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 813:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   @{
 817:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** */
 818:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 819:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 827:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 831:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccMmskdD.s 			page 28


 832:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 833:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 836:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 838:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 839:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 842:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 844:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 845:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 846:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 850:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 852:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 853:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 854:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 857:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 859:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 860:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 861:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 866:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 868:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 870:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 871:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 872:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 873:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 877:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 879:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 881:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 882:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 883:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 884:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 888:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
ARM GAS  /tmp/ccMmskdD.s 			page 29


 889:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 890:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 892:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 893:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 894:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 895:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 900:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 902:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 905:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 907:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 910:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 911:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 912:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 913:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 914:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 919:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 921:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 923:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 926:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 927:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 928:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 929:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 333              		.loc 2 934 30 view .LVU116
 334              	.LBB19:
 935:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 936:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 335              		.loc 2 937 3 view .LVU117
 336              	.LBE19:
 337              	.LBE18:
 338              	.LBB21:
 339              	.LBB22:
 340              		.loc 2 937 19 is_stmt 0 view .LVU118
ARM GAS  /tmp/ccMmskdD.s 			page 30


 341 0068 98FA98F8 		rev16	r8, r8
 342              	.LVL40:
 343              		.loc 2 937 19 view .LVU119
 344              	.LBE22:
 345              	.LBE21:
 346              	.LBB24:
 347              	.LBB20:
 348 006c 7FBA     		rev16	r7, r7
 349              	.LVL41:
 350              		.loc 2 937 19 view .LVU120
 351              	.LBE20:
 352              	.LBE24:
 286:lwIP/src/core/inet_chksum.c **** 
 353              		.loc 1 286 3 is_stmt 1 view .LVU121
 354              	.LBB25:
 355              	.LBI21:
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 356              		.loc 2 934 30 view .LVU122
 357              	.LBB23:
 358              		.loc 2 937 3 view .LVU123
 359              		.loc 2 937 19 is_stmt 0 view .LVU124
 360 006e 1FFA88F8 		uxth	r8, r8
 361              		.loc 2 937 19 view .LVU125
 362              	.LBE23:
 363              	.LBE25:
 286:lwIP/src/core/inet_chksum.c **** 
 364              		.loc 1 286 7 view .LVU126
 365 0072 18FA87F7 		uxtah	r7, r8, r7
 366              	.LVL42:
 286:lwIP/src/core/inet_chksum.c **** 
 367              		.loc 1 286 7 view .LVU127
 368 0076 3C44     		add	r4, r4, r7
 369              	.LVL43:
 290:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 370              		.loc 1 290 3 is_stmt 1 view .LVU128
 290:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 371              		.loc 1 290 9 is_stmt 0 view .LVU129
 372 0078 A0B2     		uxth	r0, r4
 290:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 373              		.loc 1 290 7 view .LVU130
 374 007a 00EB1444 		add	r4, r0, r4, lsr #16
 375              	.LVL44:
 291:lwIP/src/core/inet_chksum.c ****   LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
 376              		.loc 1 291 3 is_stmt 1 view .LVU131
 291:lwIP/src/core/inet_chksum.c ****   LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
 377              		.loc 1 291 9 is_stmt 0 view .LVU132
 378 007e A0B2     		uxth	r0, r4
 379              	.LVL45:
 292:lwIP/src/core/inet_chksum.c ****   return (u16_t)~(acc & 0xffffUL);
 380              		.loc 1 292 94 is_stmt 1 view .LVU133
 293:lwIP/src/core/inet_chksum.c **** }
 381              		.loc 1 293 3 view .LVU134
 291:lwIP/src/core/inet_chksum.c ****   LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
 382              		.loc 1 291 7 is_stmt 0 view .LVU135
 383 0080 00EB1440 		add	r0, r0, r4, lsr #16
 293:lwIP/src/core/inet_chksum.c **** }
 384              		.loc 1 293 10 view .LVU136
ARM GAS  /tmp/ccMmskdD.s 			page 31


 385 0084 C043     		mvns	r0, r0
 386              	.LBE17:
 387              	.LBE16:
 327:lwIP/src/core/inet_chksum.c **** }
 388              		.loc 1 327 1 view .LVU137
 389 0086 80B2     		uxth	r0, r0
 390 0088 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 391              		.loc 1 327 1 view .LVU138
 392              		.cfi_endproc
 393              	.LFE107:
 395              		.section	.text.ip_chksum_pseudo,"ax",%progbits
 396              		.align	1
 397              		.p2align 2,,3
 398              		.global	ip_chksum_pseudo
 399              		.syntax unified
 400              		.thumb
 401              		.thumb_func
 402              		.fpu fpv4-sp-d16
 404              	ip_chksum_pseudo:
 405              	.LVL46:
 406              	.LFB108:
 328:lwIP/src/core/inet_chksum.c **** #endif /* LWIP_IPV4 */
 329:lwIP/src/core/inet_chksum.c **** 
 330:lwIP/src/core/inet_chksum.c **** #if LWIP_IPV6
 331:lwIP/src/core/inet_chksum.c **** /**
 332:lwIP/src/core/inet_chksum.c ****  * Calculates the checksum with IPv6 pseudo header used by TCP and UDP for a pbuf chain.
 333:lwIP/src/core/inet_chksum.c ****  * IPv6 addresses are expected to be in network byte order.
 334:lwIP/src/core/inet_chksum.c ****  *
 335:lwIP/src/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 336:lwIP/src/core/inet_chksum.c ****  * @param proto ipv6 protocol/next header (used for checksum of pseudo header)
 337:lwIP/src/core/inet_chksum.c ****  * @param proto_len length of the ipv6 payload (used for checksum of pseudo header)
 338:lwIP/src/core/inet_chksum.c ****  * @param src source ipv6 address (used for checksum of pseudo header)
 339:lwIP/src/core/inet_chksum.c ****  * @param dest destination ipv6 address (used for checksum of pseudo header)
 340:lwIP/src/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 341:lwIP/src/core/inet_chksum.c ****  */
 342:lwIP/src/core/inet_chksum.c **** u16_t
 343:lwIP/src/core/inet_chksum.c **** ip6_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
 344:lwIP/src/core/inet_chksum.c ****                   const ip6_addr_t *src, const ip6_addr_t *dest)
 345:lwIP/src/core/inet_chksum.c **** {
 346:lwIP/src/core/inet_chksum.c ****   u32_t acc = 0;
 347:lwIP/src/core/inet_chksum.c ****   u32_t addr;
 348:lwIP/src/core/inet_chksum.c ****   u8_t addr_part;
 349:lwIP/src/core/inet_chksum.c **** 
 350:lwIP/src/core/inet_chksum.c ****   for (addr_part = 0; addr_part < 4; addr_part++) {
 351:lwIP/src/core/inet_chksum.c ****     addr = src->addr[addr_part];
 352:lwIP/src/core/inet_chksum.c ****     acc = (u32_t)(acc + (addr & 0xffffUL));
 353:lwIP/src/core/inet_chksum.c ****     acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 354:lwIP/src/core/inet_chksum.c ****     addr = dest->addr[addr_part];
 355:lwIP/src/core/inet_chksum.c ****     acc = (u32_t)(acc + (addr & 0xffffUL));
 356:lwIP/src/core/inet_chksum.c ****     acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 357:lwIP/src/core/inet_chksum.c ****   }
 358:lwIP/src/core/inet_chksum.c ****   /* fold down to 16 bits */
 359:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 360:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 361:lwIP/src/core/inet_chksum.c **** 
 362:lwIP/src/core/inet_chksum.c ****   return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 363:lwIP/src/core/inet_chksum.c **** }
ARM GAS  /tmp/ccMmskdD.s 			page 32


 364:lwIP/src/core/inet_chksum.c **** #endif /* LWIP_IPV6 */
 365:lwIP/src/core/inet_chksum.c **** 
 366:lwIP/src/core/inet_chksum.c **** /* ip_chksum_pseudo:
 367:lwIP/src/core/inet_chksum.c ****  *
 368:lwIP/src/core/inet_chksum.c ****  * Calculates the IPv4 or IPv6 pseudo Internet checksum used by TCP and UDP for a pbuf chain.
 369:lwIP/src/core/inet_chksum.c ****  * IP addresses are expected to be in network byte order.
 370:lwIP/src/core/inet_chksum.c ****  *
 371:lwIP/src/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 372:lwIP/src/core/inet_chksum.c ****  * @param src source ip address (used for checksum of pseudo header)
 373:lwIP/src/core/inet_chksum.c ****  * @param dst destination ip address (used for checksum of pseudo header)
 374:lwIP/src/core/inet_chksum.c ****  * @param proto ip protocol (used for checksum of pseudo header)
 375:lwIP/src/core/inet_chksum.c ****  * @param proto_len length of the ip data part (used for checksum of pseudo header)
 376:lwIP/src/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 377:lwIP/src/core/inet_chksum.c ****  */
 378:lwIP/src/core/inet_chksum.c **** u16_t
 379:lwIP/src/core/inet_chksum.c **** ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
 380:lwIP/src/core/inet_chksum.c ****                  const ip_addr_t *src, const ip_addr_t *dest)
 381:lwIP/src/core/inet_chksum.c **** {
 407              		.loc 1 381 1 is_stmt 1 view -0
 408              		.cfi_startproc
 409              		@ args = 4, pretend = 0, frame = 0
 410              		@ frame_needed = 0, uses_anonymous_args = 0
 411              		@ link register save eliminated.
 382:lwIP/src/core/inet_chksum.c **** #if LWIP_IPV6
 383:lwIP/src/core/inet_chksum.c ****   if (IP_IS_V6(dest)) {
 384:lwIP/src/core/inet_chksum.c ****     return ip6_chksum_pseudo(p, proto, proto_len, ip_2_ip6(src), ip_2_ip6(dest));
 385:lwIP/src/core/inet_chksum.c ****   }
 386:lwIP/src/core/inet_chksum.c **** #endif /* LWIP_IPV6 */
 387:lwIP/src/core/inet_chksum.c **** #if LWIP_IPV4 && LWIP_IPV6
 388:lwIP/src/core/inet_chksum.c ****   else
 389:lwIP/src/core/inet_chksum.c **** #endif /* LWIP_IPV4 && LWIP_IPV6 */
 390:lwIP/src/core/inet_chksum.c **** #if LWIP_IPV4
 391:lwIP/src/core/inet_chksum.c ****   {
 392:lwIP/src/core/inet_chksum.c ****     return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 412              		.loc 1 392 5 view .LVU140
 413              		.loc 1 392 12 is_stmt 0 view .LVU141
 414 0000 FFF7FEBF 		b	inet_chksum_pseudo
 415              	.LVL47:
 416              		.loc 1 392 12 view .LVU142
 417              		.cfi_endproc
 418              	.LFE108:
 420              		.section	.rodata.inet_chksum_pseudo_partial.str1.4,"aMS",%progbits,1
 421              		.align	2
 422              	.LC0:
 423 0000 64656C65 		.ascii	"delete me\000"
 423      7465206D 
 423      6500
 424              		.section	.text.inet_chksum_pseudo_partial,"ax",%progbits
 425              		.align	1
 426              		.p2align 2,,3
 427              		.global	inet_chksum_pseudo_partial
 428              		.syntax unified
 429              		.thumb
 430              		.thumb_func
 431              		.fpu fpv4-sp-d16
 433              	inet_chksum_pseudo_partial:
 434              	.LVL48:
ARM GAS  /tmp/ccMmskdD.s 			page 33


 435              	.LFB110:
 393:lwIP/src/core/inet_chksum.c ****   }
 394:lwIP/src/core/inet_chksum.c **** #endif /* LWIP_IPV4 */
 395:lwIP/src/core/inet_chksum.c **** }
 396:lwIP/src/core/inet_chksum.c **** 
 397:lwIP/src/core/inet_chksum.c **** /** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
 398:lwIP/src/core/inet_chksum.c **** static u16_t
 399:lwIP/src/core/inet_chksum.c **** inet_cksum_pseudo_partial_base(struct pbuf *p, u8_t proto, u16_t proto_len,
 400:lwIP/src/core/inet_chksum.c ****                                u16_t chksum_len, u32_t acc)
 401:lwIP/src/core/inet_chksum.c **** {
 402:lwIP/src/core/inet_chksum.c ****   struct pbuf *q;
 403:lwIP/src/core/inet_chksum.c ****   int swapped = 0;
 404:lwIP/src/core/inet_chksum.c ****   u16_t chklen;
 405:lwIP/src/core/inet_chksum.c **** 
 406:lwIP/src/core/inet_chksum.c ****   /* iterate through all pbuf in chain */
 407:lwIP/src/core/inet_chksum.c ****   for (q = p; (q != NULL) && (chksum_len > 0); q = q->next) {
 408:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 409:lwIP/src/core/inet_chksum.c ****                              (void *)q, (void *)q->next));
 410:lwIP/src/core/inet_chksum.c ****     chklen = q->len;
 411:lwIP/src/core/inet_chksum.c ****     if (chklen > chksum_len) {
 412:lwIP/src/core/inet_chksum.c ****       chklen = chksum_len;
 413:lwIP/src/core/inet_chksum.c ****     }
 414:lwIP/src/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, chklen);
 415:lwIP/src/core/inet_chksum.c ****     chksum_len = (u16_t)(chksum_len - chklen);
 416:lwIP/src/core/inet_chksum.c ****     LWIP_ASSERT("delete me", chksum_len < 0x7fff);
 417:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 418:lwIP/src/core/inet_chksum.c ****     /* fold the upper bit down */
 419:lwIP/src/core/inet_chksum.c ****     acc = FOLD_U32T(acc);
 420:lwIP/src/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 421:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 422:lwIP/src/core/inet_chksum.c ****       acc = SWAP_BYTES_IN_WORD(acc);
 423:lwIP/src/core/inet_chksum.c ****     }
 424:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
 425:lwIP/src/core/inet_chksum.c ****   }
 426:lwIP/src/core/inet_chksum.c **** 
 427:lwIP/src/core/inet_chksum.c ****   if (swapped) {
 428:lwIP/src/core/inet_chksum.c ****     acc = SWAP_BYTES_IN_WORD(acc);
 429:lwIP/src/core/inet_chksum.c ****   }
 430:lwIP/src/core/inet_chksum.c **** 
 431:lwIP/src/core/inet_chksum.c ****   acc += (u32_t)lwip_htons((u16_t)proto);
 432:lwIP/src/core/inet_chksum.c ****   acc += (u32_t)lwip_htons(proto_len);
 433:lwIP/src/core/inet_chksum.c **** 
 434:lwIP/src/core/inet_chksum.c ****   /* Fold 32-bit sum to 16 bits
 435:lwIP/src/core/inet_chksum.c ****      calling this twice is probably faster than if statements... */
 436:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 437:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 438:lwIP/src/core/inet_chksum.c ****   LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
 439:lwIP/src/core/inet_chksum.c ****   return (u16_t)~(acc & 0xffffUL);
 440:lwIP/src/core/inet_chksum.c **** }
 441:lwIP/src/core/inet_chksum.c **** 
 442:lwIP/src/core/inet_chksum.c **** #if LWIP_IPV4
 443:lwIP/src/core/inet_chksum.c **** /* inet_chksum_pseudo_partial:
 444:lwIP/src/core/inet_chksum.c ****  *
 445:lwIP/src/core/inet_chksum.c ****  * Calculates the IPv4 pseudo Internet checksum used by TCP and UDP for a pbuf chain.
 446:lwIP/src/core/inet_chksum.c ****  * IP addresses are expected to be in network byte order.
 447:lwIP/src/core/inet_chksum.c ****  *
 448:lwIP/src/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
ARM GAS  /tmp/ccMmskdD.s 			page 34


 449:lwIP/src/core/inet_chksum.c ****  * @param src source ip address (used for checksum of pseudo header)
 450:lwIP/src/core/inet_chksum.c ****  * @param dst destination ip address (used for checksum of pseudo header)
 451:lwIP/src/core/inet_chksum.c ****  * @param proto ip protocol (used for checksum of pseudo header)
 452:lwIP/src/core/inet_chksum.c ****  * @param proto_len length of the ip data part (used for checksum of pseudo header)
 453:lwIP/src/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 454:lwIP/src/core/inet_chksum.c ****  */
 455:lwIP/src/core/inet_chksum.c **** u16_t
 456:lwIP/src/core/inet_chksum.c **** inet_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
 457:lwIP/src/core/inet_chksum.c ****                            u16_t chksum_len, const ip4_addr_t *src, const ip4_addr_t *dest)
 458:lwIP/src/core/inet_chksum.c **** {
 436              		.loc 1 458 1 is_stmt 1 view -0
 437              		.cfi_startproc
 438              		@ args = 8, pretend = 0, frame = 0
 439              		@ frame_needed = 0, uses_anonymous_args = 0
 459:lwIP/src/core/inet_chksum.c ****   u32_t acc;
 440              		.loc 1 459 3 view .LVU144
 460:lwIP/src/core/inet_chksum.c ****   u32_t addr;
 441              		.loc 1 460 3 view .LVU145
 461:lwIP/src/core/inet_chksum.c **** 
 462:lwIP/src/core/inet_chksum.c ****   addr = ip4_addr_get_u32(src);
 442              		.loc 1 462 3 view .LVU146
 458:lwIP/src/core/inet_chksum.c ****   u32_t acc;
 443              		.loc 1 458 1 is_stmt 0 view .LVU147
 444 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 445              	.LCFI6:
 446              		.cfi_def_cfa_offset 40
 447              		.cfi_offset 3, -40
 448              		.cfi_offset 4, -36
 449              		.cfi_offset 5, -32
 450              		.cfi_offset 6, -28
 451              		.cfi_offset 7, -24
 452              		.cfi_offset 8, -20
 453              		.cfi_offset 9, -16
 454              		.cfi_offset 10, -12
 455              		.cfi_offset 11, -8
 456              		.cfi_offset 14, -4
 458:lwIP/src/core/inet_chksum.c ****   u32_t acc;
 457              		.loc 1 458 1 view .LVU148
 458 0004 0B9C     		ldr	r4, [sp, #44]
 459 0006 9046     		mov	r8, r2
 460              		.loc 1 462 8 view .LVU149
 461 0008 0A9A     		ldr	r2, [sp, #40]
 462              	.LVL49:
 458:lwIP/src/core/inet_chksum.c ****   u32_t acc;
 463              		.loc 1 458 1 view .LVU150
 464 000a 0F46     		mov	r7, r1
 463:lwIP/src/core/inet_chksum.c ****   acc = (addr & 0xffffUL);
 464:lwIP/src/core/inet_chksum.c ****   acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 465:lwIP/src/core/inet_chksum.c ****   addr = ip4_addr_get_u32(dest);
 465              		.loc 1 465 8 view .LVU151
 466 000c 2668     		ldr	r6, [r4]
 462:lwIP/src/core/inet_chksum.c ****   acc = (addr & 0xffffUL);
 467              		.loc 1 462 8 view .LVU152
 468 000e 1468     		ldr	r4, [r2]
 469              	.LVL50:
 463:lwIP/src/core/inet_chksum.c ****   acc = (addr & 0xffffUL);
 470              		.loc 1 463 3 is_stmt 1 view .LVU153
ARM GAS  /tmp/ccMmskdD.s 			page 35


 464:lwIP/src/core/inet_chksum.c ****   addr = ip4_addr_get_u32(dest);
 471              		.loc 1 464 3 view .LVU154
 472              		.loc 1 465 3 view .LVU155
 466:lwIP/src/core/inet_chksum.c ****   acc = (u32_t)(acc + (addr & 0xffffUL));
 473              		.loc 1 466 3 view .LVU156
 467:lwIP/src/core/inet_chksum.c ****   acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 474              		.loc 1 467 3 view .LVU157
 475              		.loc 1 467 30 is_stmt 0 view .LVU158
 476 0010 350C     		lsrs	r5, r6, #16
 477 0012 15FA86F6 		uxtah	r6, r5, r6
 478              	.LVL51:
 479              		.loc 1 467 30 view .LVU159
 480 0016 16FA84F6 		uxtah	r6, r6, r4
 481              		.loc 1 467 7 view .LVU160
 482 001a 06EB1446 		add	r6, r6, r4, lsr #16
 483              	.LVL52:
 468:lwIP/src/core/inet_chksum.c ****   /* fold down to 16 bits */
 469:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 484              		.loc 1 469 3 is_stmt 1 view .LVU161
 485              		.loc 1 469 9 is_stmt 0 view .LVU162
 486 001e B4B2     		uxth	r4, r6
 487              		.loc 1 469 7 view .LVU163
 488 0020 04EB1646 		add	r6, r4, r6, lsr #16
 489              	.LVL53:
 470:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 490              		.loc 1 470 3 is_stmt 1 view .LVU164
 491              		.loc 1 470 9 is_stmt 0 view .LVU165
 492 0024 B4B2     		uxth	r4, r6
 493              		.loc 1 470 7 view .LVU166
 494 0026 04EB1644 		add	r4, r4, r6, lsr #16
 495              	.LVL54:
 471:lwIP/src/core/inet_chksum.c **** 
 472:lwIP/src/core/inet_chksum.c ****   return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
 496              		.loc 1 472 3 is_stmt 1 view .LVU167
 497              	.LBB32:
 498              	.LBI32:
 399:lwIP/src/core/inet_chksum.c ****                                u16_t chksum_len, u32_t acc)
 499              		.loc 1 399 1 view .LVU168
 500              	.LBB33:
 402:lwIP/src/core/inet_chksum.c ****   int swapped = 0;
 501              		.loc 1 402 3 view .LVU169
 403:lwIP/src/core/inet_chksum.c ****   u16_t chklen;
 502              		.loc 1 403 3 view .LVU170
 404:lwIP/src/core/inet_chksum.c **** 
 503              		.loc 1 404 3 view .LVU171
 407:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 504              		.loc 1 407 3 view .LVU172
 407:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 505              		.loc 1 407 15 view .LVU173
 407:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 506              		.loc 1 407 3 is_stmt 0 view .LVU174
 507 002a 0028     		cmp	r0, #0
 508 002c 35D0     		beq	.L37
 509 002e 9946     		mov	r9, r3
 510 0030 9BB3     		cbz	r3, .L37
 511 0032 0546     		mov	r5, r0
 403:lwIP/src/core/inet_chksum.c ****   u16_t chklen;
ARM GAS  /tmp/ccMmskdD.s 			page 36


 512              		.loc 1 403 7 view .LVU175
 513 0034 4FF0000B 		mov	fp, #0
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 514              		.loc 1 416 5 view .LVU176
 515 0038 47F6FE7A 		movw	r10, #32766
 516 003c 0FE0     		b	.L41
 517              	.LVL55:
 518              	.L38:
 420:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 519              		.loc 1 420 20 view .LVU177
 520 003e 6989     		ldrh	r1, [r5, #10]
 422:lwIP/src/core/inet_chksum.c ****     }
 521              		.loc 1 422 13 view .LVU178
 522 0040 2302     		lsls	r3, r4, #8
 523 0042 C4F30722 		ubfx	r2, r4, #8, #8
 420:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 524              		.loc 1 420 8 view .LVU179
 525 0046 C907     		lsls	r1, r1, #31
 422:lwIP/src/core/inet_chksum.c ****     }
 526              		.loc 1 422 13 view .LVU180
 527 0048 9BB2     		uxth	r3, r3
 420:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 528              		.loc 1 420 8 view .LVU181
 529 004a 03D5     		bpl	.L40
 420:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 530              		.loc 1 420 8 view .LVU182
 531 004c 8BF0010B 		eor	fp, fp, #1
 532              	.LVL56:
 422:lwIP/src/core/inet_chksum.c ****     }
 533              		.loc 1 422 7 is_stmt 1 view .LVU183
 422:lwIP/src/core/inet_chksum.c ****     }
 534              		.loc 1 422 11 is_stmt 0 view .LVU184
 535 0050 43EA0204 		orr	r4, r3, r2
 536              	.LVL57:
 537              	.L40:
 407:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 538              		.loc 1 407 48 is_stmt 1 view .LVU185
 407:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 539              		.loc 1 407 50 is_stmt 0 view .LVU186
 540 0054 2D68     		ldr	r5, [r5]
 541              	.LVL58:
 407:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 542              		.loc 1 407 15 is_stmt 1 view .LVU187
 407:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 543              		.loc 1 407 3 is_stmt 0 view .LVU188
 544 0056 C5B1     		cbz	r5, .L43
 407:lwIP/src/core/inet_chksum.c ****     LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
 545              		.loc 1 407 3 view .LVU189
 546 0058 B9F1000F 		cmp	r9, #0
 547 005c 15D0     		beq	.L43
 548              	.LVL59:
 549              	.L41:
 409:lwIP/src/core/inet_chksum.c ****     chklen = q->len;
 550              		.loc 1 409 58 is_stmt 1 view .LVU190
 410:lwIP/src/core/inet_chksum.c ****     if (chklen > chksum_len) {
 551              		.loc 1 410 5 view .LVU191
 410:lwIP/src/core/inet_chksum.c ****     if (chklen > chksum_len) {
ARM GAS  /tmp/ccMmskdD.s 			page 37


 552              		.loc 1 410 12 is_stmt 0 view .LVU192
 553 005e 6E89     		ldrh	r6, [r5, #10]
 554              	.LVL60:
 411:lwIP/src/core/inet_chksum.c ****       chklen = chksum_len;
 555              		.loc 1 411 5 is_stmt 1 view .LVU193
 414:lwIP/src/core/inet_chksum.c ****     chksum_len = (u16_t)(chksum_len - chklen);
 556              		.loc 1 414 12 is_stmt 0 view .LVU194
 557 0060 6868     		ldr	r0, [r5, #4]
 558 0062 4E45     		cmp	r6, r9
 559 0064 28BF     		it	cs
 560 0066 4E46     		movcs	r6, r9
 561              	.LVL61:
 414:lwIP/src/core/inet_chksum.c ****     chksum_len = (u16_t)(chksum_len - chklen);
 562              		.loc 1 414 5 is_stmt 1 view .LVU195
 415:lwIP/src/core/inet_chksum.c ****     LWIP_ASSERT("delete me", chksum_len < 0x7fff);
 563              		.loc 1 415 16 is_stmt 0 view .LVU196
 564 0068 A9EB0609 		sub	r9, r9, r6
 565              	.LVL62:
 414:lwIP/src/core/inet_chksum.c ****     chksum_len = (u16_t)(chksum_len - chklen);
 566              		.loc 1 414 12 view .LVU197
 567 006c 3146     		mov	r1, r6
 568 006e FFF7FEFF 		bl	lwip_standard_chksum
 569              	.LVL63:
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 570              		.loc 1 416 5 is_stmt 1 view .LVU198
 419:lwIP/src/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 571              		.loc 1 419 5 view .LVU199
 421:lwIP/src/core/inet_chksum.c ****       acc = SWAP_BYTES_IN_WORD(acc);
 572              		.loc 1 421 7 view .LVU200
 414:lwIP/src/core/inet_chksum.c ****     chksum_len = (u16_t)(chksum_len - chklen);
 573              		.loc 1 414 9 is_stmt 0 view .LVU201
 574 0072 2044     		add	r0, r0, r4
 575              	.LVL64:
 415:lwIP/src/core/inet_chksum.c ****     LWIP_ASSERT("delete me", chksum_len < 0x7fff);
 576              		.loc 1 415 5 is_stmt 1 view .LVU202
 415:lwIP/src/core/inet_chksum.c ****     LWIP_ASSERT("delete me", chksum_len < 0x7fff);
 577              		.loc 1 415 16 is_stmt 0 view .LVU203
 578 0074 1FFA89F9 		uxth	r9, r9
 579              	.LVL65:
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 580              		.loc 1 416 5 is_stmt 1 view .LVU204
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 581              		.loc 1 416 5 view .LVU205
 419:lwIP/src/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 582              		.loc 1 419 11 is_stmt 0 view .LVU206
 583 0078 84B2     		uxth	r4, r0
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 584              		.loc 1 416 5 view .LVU207
 585 007a D145     		cmp	r9, r10
 419:lwIP/src/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 586              		.loc 1 419 9 view .LVU208
 587 007c 04EB1044 		add	r4, r4, r0, lsr #16
 588              	.LVL66:
 420:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 589              		.loc 1 420 5 is_stmt 1 view .LVU209
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 590              		.loc 1 416 5 is_stmt 0 view .LVU210
ARM GAS  /tmp/ccMmskdD.s 			page 38


 591 0080 DDD9     		bls	.L38
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 592              		.loc 1 416 5 is_stmt 1 view .LVU211
 593 0082 0F48     		ldr	r0, .L61
 594 0084 FFF7FEFF 		bl	printf
 595              	.LVL67:
 596              	.L39:
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 597              		.loc 1 416 5 view .LVU212
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 598              		.loc 1 416 5 view .LVU213
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 599              		.loc 1 416 5 view .LVU214
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 600              		.loc 1 416 5 view .LVU215
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 601              		.loc 1 416 5 view .LVU216
 416:lwIP/src/core/inet_chksum.c ****     /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*
 602              		.loc 1 416 5 view .LVU217
 603 0088 FEE7     		b	.L39
 604              	.L43:
 427:lwIP/src/core/inet_chksum.c ****     acc = SWAP_BYTES_IN_WORD(acc);
 605              		.loc 1 427 3 view .LVU218
 427:lwIP/src/core/inet_chksum.c ****     acc = SWAP_BYTES_IN_WORD(acc);
 606              		.loc 1 427 6 is_stmt 0 view .LVU219
 607 008a BBF1000F 		cmp	fp, #0
 608 008e 04D0     		beq	.L37
 428:lwIP/src/core/inet_chksum.c ****   }
 609              		.loc 1 428 5 is_stmt 1 view .LVU220
 428:lwIP/src/core/inet_chksum.c ****   }
 610              		.loc 1 428 11 is_stmt 0 view .LVU221
 611 0090 2302     		lsls	r3, r4, #8
 612 0092 C4F30724 		ubfx	r4, r4, #8, #8
 613              	.LVL68:
 428:lwIP/src/core/inet_chksum.c ****   }
 614              		.loc 1 428 11 view .LVU222
 615 0096 9BB2     		uxth	r3, r3
 428:lwIP/src/core/inet_chksum.c ****   }
 616              		.loc 1 428 9 view .LVU223
 617 0098 1C43     		orrs	r4, r4, r3
 618              	.LVL69:
 619              	.L37:
 431:lwIP/src/core/inet_chksum.c ****   acc += (u32_t)lwip_htons(proto_len);
 620              		.loc 1 431 3 is_stmt 1 view .LVU224
 621              	.LBB34:
 622              	.LBI34:
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 623              		.loc 2 934 30 view .LVU225
 624              	.LBB35:
 625              		.loc 2 937 3 view .LVU226
 626              	.LBE35:
 627              	.LBE34:
 628              	.LBB37:
 629              	.LBB38:
 630              		.loc 2 937 19 is_stmt 0 view .LVU227
 631 009a 98FA98F8 		rev16	r8, r8
 632              	.LVL70:
ARM GAS  /tmp/ccMmskdD.s 			page 39


 633              		.loc 2 937 19 view .LVU228
 634              	.LBE38:
 635              	.LBE37:
 636              	.LBB40:
 637              	.LBB36:
 638 009e 7FBA     		rev16	r7, r7
 639              	.LVL71:
 640              		.loc 2 937 19 view .LVU229
 641              	.LBE36:
 642              	.LBE40:
 432:lwIP/src/core/inet_chksum.c **** 
 643              		.loc 1 432 3 is_stmt 1 view .LVU230
 644              	.LBB41:
 645              	.LBI37:
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 646              		.loc 2 934 30 view .LVU231
 647              	.LBB39:
 648              		.loc 2 937 3 view .LVU232
 649              		.loc 2 937 19 is_stmt 0 view .LVU233
 650 00a0 1FFA88F8 		uxth	r8, r8
 651              		.loc 2 937 19 view .LVU234
 652              	.LBE39:
 653              	.LBE41:
 432:lwIP/src/core/inet_chksum.c **** 
 654              		.loc 1 432 7 view .LVU235
 655 00a4 18FA87F7 		uxtah	r7, r8, r7
 656              	.LVL72:
 432:lwIP/src/core/inet_chksum.c **** 
 657              		.loc 1 432 7 view .LVU236
 658 00a8 3C44     		add	r4, r4, r7
 659              	.LVL73:
 436:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 660              		.loc 1 436 3 is_stmt 1 view .LVU237
 436:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 661              		.loc 1 436 9 is_stmt 0 view .LVU238
 662 00aa A0B2     		uxth	r0, r4
 436:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 663              		.loc 1 436 7 view .LVU239
 664 00ac 00EB1444 		add	r4, r0, r4, lsr #16
 665              	.LVL74:
 437:lwIP/src/core/inet_chksum.c ****   LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
 666              		.loc 1 437 3 is_stmt 1 view .LVU240
 437:lwIP/src/core/inet_chksum.c ****   LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
 667              		.loc 1 437 9 is_stmt 0 view .LVU241
 668 00b0 A0B2     		uxth	r0, r4
 669              	.LVL75:
 438:lwIP/src/core/inet_chksum.c ****   return (u16_t)~(acc & 0xffffUL);
 670              		.loc 1 438 94 is_stmt 1 view .LVU242
 439:lwIP/src/core/inet_chksum.c **** }
 671              		.loc 1 439 3 view .LVU243
 437:lwIP/src/core/inet_chksum.c ****   LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
 672              		.loc 1 437 7 is_stmt 0 view .LVU244
 673 00b2 00EB1440 		add	r0, r0, r4, lsr #16
 439:lwIP/src/core/inet_chksum.c **** }
 674              		.loc 1 439 10 view .LVU245
 675 00b6 C043     		mvns	r0, r0
 676              	.LBE33:
ARM GAS  /tmp/ccMmskdD.s 			page 40


 677              	.LBE32:
 473:lwIP/src/core/inet_chksum.c **** }
 678              		.loc 1 473 1 view .LVU246
 679 00b8 80B2     		uxth	r0, r0
 680 00ba BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 681              	.LVL76:
 682              	.L62:
 683              		.loc 1 473 1 view .LVU247
 684 00be 00BF     		.align	2
 685              	.L61:
 686 00c0 00000000 		.word	.LC0
 687              		.cfi_endproc
 688              	.LFE110:
 690              		.section	.text.ip_chksum_pseudo_partial,"ax",%progbits
 691              		.align	1
 692              		.p2align 2,,3
 693              		.global	ip_chksum_pseudo_partial
 694              		.syntax unified
 695              		.thumb
 696              		.thumb_func
 697              		.fpu fpv4-sp-d16
 699              	ip_chksum_pseudo_partial:
 700              	.LVL77:
 701              	.LFB111:
 474:lwIP/src/core/inet_chksum.c **** #endif /* LWIP_IPV4 */
 475:lwIP/src/core/inet_chksum.c **** 
 476:lwIP/src/core/inet_chksum.c **** #if LWIP_IPV6
 477:lwIP/src/core/inet_chksum.c **** /**
 478:lwIP/src/core/inet_chksum.c ****  * Calculates the checksum with IPv6 pseudo header used by TCP and UDP for a pbuf chain.
 479:lwIP/src/core/inet_chksum.c ****  * IPv6 addresses are expected to be in network byte order. Will only compute for a
 480:lwIP/src/core/inet_chksum.c ****  * portion of the payload.
 481:lwIP/src/core/inet_chksum.c ****  *
 482:lwIP/src/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 483:lwIP/src/core/inet_chksum.c ****  * @param proto ipv6 protocol/next header (used for checksum of pseudo header)
 484:lwIP/src/core/inet_chksum.c ****  * @param proto_len length of the ipv6 payload (used for checksum of pseudo header)
 485:lwIP/src/core/inet_chksum.c ****  * @param chksum_len number of payload bytes used to compute chksum
 486:lwIP/src/core/inet_chksum.c ****  * @param src source ipv6 address (used for checksum of pseudo header)
 487:lwIP/src/core/inet_chksum.c ****  * @param dest destination ipv6 address (used for checksum of pseudo header)
 488:lwIP/src/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 489:lwIP/src/core/inet_chksum.c ****  */
 490:lwIP/src/core/inet_chksum.c **** u16_t
 491:lwIP/src/core/inet_chksum.c **** ip6_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
 492:lwIP/src/core/inet_chksum.c ****                           u16_t chksum_len, const ip6_addr_t *src, const ip6_addr_t *dest)
 493:lwIP/src/core/inet_chksum.c **** {
 494:lwIP/src/core/inet_chksum.c ****   u32_t acc = 0;
 495:lwIP/src/core/inet_chksum.c ****   u32_t addr;
 496:lwIP/src/core/inet_chksum.c ****   u8_t addr_part;
 497:lwIP/src/core/inet_chksum.c **** 
 498:lwIP/src/core/inet_chksum.c ****   for (addr_part = 0; addr_part < 4; addr_part++) {
 499:lwIP/src/core/inet_chksum.c ****     addr = src->addr[addr_part];
 500:lwIP/src/core/inet_chksum.c ****     acc = (u32_t)(acc + (addr & 0xffffUL));
 501:lwIP/src/core/inet_chksum.c ****     acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 502:lwIP/src/core/inet_chksum.c ****     addr = dest->addr[addr_part];
 503:lwIP/src/core/inet_chksum.c ****     acc = (u32_t)(acc + (addr & 0xffffUL));
 504:lwIP/src/core/inet_chksum.c ****     acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 505:lwIP/src/core/inet_chksum.c ****   }
 506:lwIP/src/core/inet_chksum.c ****   /* fold down to 16 bits */
ARM GAS  /tmp/ccMmskdD.s 			page 41


 507:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 508:lwIP/src/core/inet_chksum.c ****   acc = FOLD_U32T(acc);
 509:lwIP/src/core/inet_chksum.c **** 
 510:lwIP/src/core/inet_chksum.c ****   return inet_cksum_pseudo_partial_base(p, proto, proto_len, chksum_len, acc);
 511:lwIP/src/core/inet_chksum.c **** }
 512:lwIP/src/core/inet_chksum.c **** #endif /* LWIP_IPV6 */
 513:lwIP/src/core/inet_chksum.c **** 
 514:lwIP/src/core/inet_chksum.c **** /* ip_chksum_pseudo_partial:
 515:lwIP/src/core/inet_chksum.c ****  *
 516:lwIP/src/core/inet_chksum.c ****  * Calculates the IPv4 or IPv6 pseudo Internet checksum used by TCP and UDP for a pbuf chain.
 517:lwIP/src/core/inet_chksum.c ****  *
 518:lwIP/src/core/inet_chksum.c ****  * @param p chain of pbufs over that a checksum should be calculated (ip data part)
 519:lwIP/src/core/inet_chksum.c ****  * @param src source ip address (used for checksum of pseudo header)
 520:lwIP/src/core/inet_chksum.c ****  * @param dst destination ip address (used for checksum of pseudo header)
 521:lwIP/src/core/inet_chksum.c ****  * @param proto ip protocol (used for checksum of pseudo header)
 522:lwIP/src/core/inet_chksum.c ****  * @param proto_len length of the ip data part (used for checksum of pseudo header)
 523:lwIP/src/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 524:lwIP/src/core/inet_chksum.c ****  */
 525:lwIP/src/core/inet_chksum.c **** u16_t
 526:lwIP/src/core/inet_chksum.c **** ip_chksum_pseudo_partial(struct pbuf *p, u8_t proto, u16_t proto_len,
 527:lwIP/src/core/inet_chksum.c ****                          u16_t chksum_len, const ip_addr_t *src, const ip_addr_t *dest)
 528:lwIP/src/core/inet_chksum.c **** {
 702              		.loc 1 528 1 is_stmt 1 view -0
 703              		.cfi_startproc
 704              		@ args = 8, pretend = 0, frame = 0
 705              		@ frame_needed = 0, uses_anonymous_args = 0
 706              		@ link register save eliminated.
 529:lwIP/src/core/inet_chksum.c **** #if LWIP_IPV6
 530:lwIP/src/core/inet_chksum.c ****   if (IP_IS_V6(dest)) {
 531:lwIP/src/core/inet_chksum.c ****     return ip6_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip6(src), ip_2_ip6(dest)
 532:lwIP/src/core/inet_chksum.c ****   }
 533:lwIP/src/core/inet_chksum.c **** #endif /* LWIP_IPV6 */
 534:lwIP/src/core/inet_chksum.c **** #if LWIP_IPV4 && LWIP_IPV6
 535:lwIP/src/core/inet_chksum.c ****   else
 536:lwIP/src/core/inet_chksum.c **** #endif /* LWIP_IPV4 && LWIP_IPV6 */
 537:lwIP/src/core/inet_chksum.c **** #if LWIP_IPV4
 538:lwIP/src/core/inet_chksum.c ****   {
 539:lwIP/src/core/inet_chksum.c ****     return inet_chksum_pseudo_partial(p, proto, proto_len, chksum_len, ip_2_ip4(src), ip_2_ip4(dest
 707              		.loc 1 539 5 view .LVU249
 708              		.loc 1 539 12 is_stmt 0 view .LVU250
 709 0000 FFF7FEBF 		b	inet_chksum_pseudo_partial
 710              	.LVL78:
 711              		.loc 1 539 12 view .LVU251
 712              		.cfi_endproc
 713              	.LFE111:
 715              		.section	.text.inet_chksum,"ax",%progbits
 716              		.align	1
 717              		.p2align 2,,3
 718              		.global	inet_chksum
 719              		.syntax unified
 720              		.thumb
 721              		.thumb_func
 722              		.fpu fpv4-sp-d16
 724              	inet_chksum:
 725              	.LVL79:
 726              	.LFB112:
 540:lwIP/src/core/inet_chksum.c ****   }
ARM GAS  /tmp/ccMmskdD.s 			page 42


 541:lwIP/src/core/inet_chksum.c **** #endif /* LWIP_IPV4 */
 542:lwIP/src/core/inet_chksum.c **** }
 543:lwIP/src/core/inet_chksum.c **** 
 544:lwIP/src/core/inet_chksum.c **** /* inet_chksum:
 545:lwIP/src/core/inet_chksum.c ****  *
 546:lwIP/src/core/inet_chksum.c ****  * Calculates the Internet checksum over a portion of memory. Used primarily for IP
 547:lwIP/src/core/inet_chksum.c ****  * and ICMP.
 548:lwIP/src/core/inet_chksum.c ****  *
 549:lwIP/src/core/inet_chksum.c ****  * @param dataptr start of the buffer to calculate the checksum (no alignment needed)
 550:lwIP/src/core/inet_chksum.c ****  * @param len length of the buffer to calculate the checksum
 551:lwIP/src/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 552:lwIP/src/core/inet_chksum.c ****  */
 553:lwIP/src/core/inet_chksum.c **** 
 554:lwIP/src/core/inet_chksum.c **** u16_t
 555:lwIP/src/core/inet_chksum.c **** inet_chksum(const void *dataptr, u16_t len)
 556:lwIP/src/core/inet_chksum.c **** {
 727              		.loc 1 556 1 is_stmt 1 view -0
 728              		.cfi_startproc
 729              		@ args = 0, pretend = 0, frame = 8
 730              		@ frame_needed = 0, uses_anonymous_args = 0
 731              		@ link register save eliminated.
 732              		.loc 1 556 1 is_stmt 0 view .LVU253
 733 0000 70B4     		push	{r4, r5, r6}
 734              	.LCFI7:
 735              		.cfi_def_cfa_offset 12
 736              		.cfi_offset 4, -12
 737              		.cfi_offset 5, -8
 738              		.cfi_offset 6, -4
 739              	.LBB44:
 740              	.LBB45:
 137:lwIP/src/core/inet_chksum.c ****   u32_t sum = 0;
 741              		.loc 1 137 9 view .LVU254
 742 0002 0023     		movs	r3, #0
 743              	.LBE45:
 744              	.LBE44:
 557:lwIP/src/core/inet_chksum.c ****   return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 745              		.loc 1 557 3 is_stmt 1 view .LVU255
 746              	.LVL80:
 747              	.LBB49:
 748              	.LBI44:
 133:lwIP/src/core/inet_chksum.c **** {
 749              		.loc 1 133 1 view .LVU256
 750              	.LBB46:
 135:lwIP/src/core/inet_chksum.c ****   const u16_t *ps;
 751              		.loc 1 135 3 view .LVU257
 136:lwIP/src/core/inet_chksum.c ****   u16_t t = 0;
 752              		.loc 1 136 3 view .LVU258
 137:lwIP/src/core/inet_chksum.c ****   u32_t sum = 0;
 753              		.loc 1 137 3 view .LVU259
 754              	.LBE46:
 755              	.LBE49:
 556:lwIP/src/core/inet_chksum.c ****   return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 756              		.loc 1 556 1 is_stmt 0 view .LVU260
 757 0004 83B0     		sub	sp, sp, #12
 758              	.LCFI8:
 759              		.cfi_def_cfa_offset 24
 760              	.LBB50:
ARM GAS  /tmp/ccMmskdD.s 			page 43


 761              	.LBB47:
 139:lwIP/src/core/inet_chksum.c **** 
 762              		.loc 1 139 7 view .LVU261
 763 0006 00F00104 		and	r4, r0, #1
 137:lwIP/src/core/inet_chksum.c ****   u32_t sum = 0;
 764              		.loc 1 137 9 view .LVU262
 765 000a ADF80630 		strh	r3, [sp, #6]	@ movhi
 138:lwIP/src/core/inet_chksum.c ****   int odd = ((mem_ptr_t)pb & 1);
 766              		.loc 1 138 3 is_stmt 1 view .LVU263
 767              	.LVL81:
 139:lwIP/src/core/inet_chksum.c **** 
 768              		.loc 1 139 3 view .LVU264
 142:lwIP/src/core/inet_chksum.c ****     ((u8_t *)&t)[1] = *pb++;
 769              		.loc 1 142 3 view .LVU265
 142:lwIP/src/core/inet_chksum.c ****     ((u8_t *)&t)[1] = *pb++;
 770              		.loc 1 142 6 is_stmt 0 view .LVU266
 771 000e 29B1     		cbz	r1, .L65
 772 0010 24B1     		cbz	r4, .L65
 143:lwIP/src/core/inet_chksum.c ****     len--;
 773              		.loc 1 143 5 is_stmt 1 view .LVU267
 774              	.LVL82:
 143:lwIP/src/core/inet_chksum.c ****     len--;
 775              		.loc 1 143 21 is_stmt 0 view .LVU268
 776 0012 10F8013B 		ldrb	r3, [r0], #1	@ zero_extendqisi2
 777              	.LVL83:
 144:lwIP/src/core/inet_chksum.c ****   }
 778              		.loc 1 144 8 view .LVU269
 779 0016 0139     		subs	r1, r1, #1
 780              	.LVL84:
 143:lwIP/src/core/inet_chksum.c ****     len--;
 781              		.loc 1 143 21 view .LVU270
 782 0018 8DF80730 		strb	r3, [sp, #7]
 144:lwIP/src/core/inet_chksum.c ****   }
 783              		.loc 1 144 5 is_stmt 1 view .LVU271
 784              	.LVL85:
 785              	.L65:
 148:lwIP/src/core/inet_chksum.c ****   while (len > 1) {
 786              		.loc 1 148 3 view .LVU272
 149:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
 787              		.loc 1 149 3 view .LVU273
 149:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
 788              		.loc 1 149 9 view .LVU274
 789 001c 0129     		cmp	r1, #1
 790 001e 27DD     		ble	.L70
 149:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
 791              		.loc 1 149 9 is_stmt 0 view .LVU275
 792 0020 0239     		subs	r1, r1, #2
 138:lwIP/src/core/inet_chksum.c ****   int odd = ((mem_ptr_t)pb & 1);
 793              		.loc 1 138 9 view .LVU276
 794 0022 0025     		movs	r5, #0
 795 0024 4B08     		lsrs	r3, r1, #1
 796 0026 5A1C     		adds	r2, r3, #1
 797 0028 00EB4202 		add	r2, r0, r2, lsl #1
 798              	.LVL86:
 799              	.L67:
 150:lwIP/src/core/inet_chksum.c ****     len -= 2;
 800              		.loc 1 150 5 is_stmt 1 view .LVU277
ARM GAS  /tmp/ccMmskdD.s 			page 44


 150:lwIP/src/core/inet_chksum.c ****     len -= 2;
 801              		.loc 1 150 12 is_stmt 0 view .LVU278
 802 002c 30F8026B 		ldrh	r6, [r0], #2
 803              	.LVL87:
 149:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
 804              		.loc 1 149 9 view .LVU279
 805 0030 9042     		cmp	r0, r2
 150:lwIP/src/core/inet_chksum.c ****     len -= 2;
 806              		.loc 1 150 9 view .LVU280
 807 0032 3544     		add	r5, r5, r6
 808              	.LVL88:
 151:lwIP/src/core/inet_chksum.c ****   }
 809              		.loc 1 151 5 is_stmt 1 view .LVU281
 149:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
 810              		.loc 1 149 9 view .LVU282
 811 0034 FAD1     		bne	.L67
 812 0036 C3EBC373 		rsb	r3, r3, r3, lsl #31
 813              	.LVL89:
 149:lwIP/src/core/inet_chksum.c ****     sum += *ps++;
 814              		.loc 1 149 9 is_stmt 0 view .LVU283
 815 003a 01EB4301 		add	r1, r1, r3, lsl #1
 816              	.LVL90:
 817              	.L66:
 155:lwIP/src/core/inet_chksum.c ****     ((u8_t *)&t)[0] = *(const u8_t *)ps;
 818              		.loc 1 155 3 is_stmt 1 view .LVU284
 155:lwIP/src/core/inet_chksum.c ****     ((u8_t *)&t)[0] = *(const u8_t *)ps;
 819              		.loc 1 155 6 is_stmt 0 view .LVU285
 820 003e 0129     		cmp	r1, #1
 821 0040 02D1     		bne	.L68
 156:lwIP/src/core/inet_chksum.c ****   }
 822              		.loc 1 156 5 is_stmt 1 view .LVU286
 156:lwIP/src/core/inet_chksum.c ****   }
 823              		.loc 1 156 21 is_stmt 0 view .LVU287
 824 0042 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 825 0044 8DF80630 		strb	r3, [sp, #6]
 826              	.L68:
 160:lwIP/src/core/inet_chksum.c **** 
 827              		.loc 1 160 3 is_stmt 1 view .LVU288
 160:lwIP/src/core/inet_chksum.c **** 
 828              		.loc 1 160 7 is_stmt 0 view .LVU289
 829 0048 BDF80630 		ldrh	r3, [sp, #6]
 830 004c 2B44     		add	r3, r3, r5
 831              	.LVL91:
 164:lwIP/src/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 832              		.loc 1 164 3 is_stmt 1 view .LVU290
 164:lwIP/src/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 833              		.loc 1 164 9 is_stmt 0 view .LVU291
 834 004e 98B2     		uxth	r0, r3
 835              	.LVL92:
 164:lwIP/src/core/inet_chksum.c ****   sum = FOLD_U32T(sum);
 836              		.loc 1 164 7 view .LVU292
 837 0050 00EB1343 		add	r3, r0, r3, lsr #16
 838              	.LVL93:
 165:lwIP/src/core/inet_chksum.c **** 
 839              		.loc 1 165 3 is_stmt 1 view .LVU293
 165:lwIP/src/core/inet_chksum.c **** 
 840              		.loc 1 165 9 is_stmt 0 view .LVU294
ARM GAS  /tmp/ccMmskdD.s 			page 45


 841 0054 98B2     		uxth	r0, r3
 165:lwIP/src/core/inet_chksum.c **** 
 842              		.loc 1 165 7 view .LVU295
 843 0056 00EB1340 		add	r0, r0, r3, lsr #16
 844              	.LVL94:
 168:lwIP/src/core/inet_chksum.c ****     sum = SWAP_BYTES_IN_WORD(sum);
 845              		.loc 1 168 3 is_stmt 1 view .LVU296
 168:lwIP/src/core/inet_chksum.c ****     sum = SWAP_BYTES_IN_WORD(sum);
 846              		.loc 1 168 6 is_stmt 0 view .LVU297
 847 005a 24B1     		cbz	r4, .L69
 169:lwIP/src/core/inet_chksum.c ****   }
 848              		.loc 1 169 5 is_stmt 1 view .LVU298
 169:lwIP/src/core/inet_chksum.c ****   }
 849              		.loc 1 169 11 is_stmt 0 view .LVU299
 850 005c 0302     		lsls	r3, r0, #8
 851 005e C0F30720 		ubfx	r0, r0, #8, #8
 852              	.LVL95:
 169:lwIP/src/core/inet_chksum.c ****   }
 853              		.loc 1 169 11 view .LVU300
 854 0062 9BB2     		uxth	r3, r3
 169:lwIP/src/core/inet_chksum.c ****   }
 855              		.loc 1 169 9 view .LVU301
 856 0064 1843     		orrs	r0, r0, r3
 857              	.LVL96:
 858              	.L69:
 172:lwIP/src/core/inet_chksum.c **** }
 859              		.loc 1 172 3 is_stmt 1 view .LVU302
 172:lwIP/src/core/inet_chksum.c **** }
 860              		.loc 1 172 3 is_stmt 0 view .LVU303
 861              	.LBE47:
 862              	.LBE50:
 863              		.loc 1 557 10 view .LVU304
 864 0066 C043     		mvns	r0, r0
 558:lwIP/src/core/inet_chksum.c **** }
 865              		.loc 1 558 1 view .LVU305
 866 0068 80B2     		uxth	r0, r0
 867 006a 03B0     		add	sp, sp, #12
 868              	.LCFI9:
 869              		.cfi_remember_state
 870              		.cfi_def_cfa_offset 12
 871              		@ sp needed
 872 006c 70BC     		pop	{r4, r5, r6}
 873              	.LCFI10:
 874              		.cfi_restore 6
 875              		.cfi_restore 5
 876              		.cfi_restore 4
 877              		.cfi_def_cfa_offset 0
 878 006e 7047     		bx	lr
 879              	.LVL97:
 880              	.L70:
 881              	.LCFI11:
 882              		.cfi_restore_state
 883              	.LBB51:
 884              	.LBB48:
 148:lwIP/src/core/inet_chksum.c ****   while (len > 1) {
 885              		.loc 1 148 6 view .LVU306
 886 0070 0246     		mov	r2, r0
ARM GAS  /tmp/ccMmskdD.s 			page 46


 138:lwIP/src/core/inet_chksum.c ****   int odd = ((mem_ptr_t)pb & 1);
 887              		.loc 1 138 9 view .LVU307
 888 0072 0025     		movs	r5, #0
 889 0074 E3E7     		b	.L66
 890              	.LBE48:
 891              	.LBE51:
 892              		.cfi_endproc
 893              	.LFE112:
 895 0076 00BF     		.section	.text.inet_chksum_pbuf,"ax",%progbits
 896              		.align	1
 897              		.p2align 2,,3
 898              		.global	inet_chksum_pbuf
 899              		.syntax unified
 900              		.thumb
 901              		.thumb_func
 902              		.fpu fpv4-sp-d16
 904              	inet_chksum_pbuf:
 905              	.LVL98:
 906              	.LFB113:
 559:lwIP/src/core/inet_chksum.c **** 
 560:lwIP/src/core/inet_chksum.c **** /**
 561:lwIP/src/core/inet_chksum.c ****  * Calculate a checksum over a chain of pbufs (without pseudo-header, much like
 562:lwIP/src/core/inet_chksum.c ****  * inet_chksum only pbufs are used).
 563:lwIP/src/core/inet_chksum.c ****  *
 564:lwIP/src/core/inet_chksum.c ****  * @param p pbuf chain over that the checksum should be calculated
 565:lwIP/src/core/inet_chksum.c ****  * @return checksum (as u16_t) to be saved directly in the protocol header
 566:lwIP/src/core/inet_chksum.c ****  */
 567:lwIP/src/core/inet_chksum.c **** u16_t
 568:lwIP/src/core/inet_chksum.c **** inet_chksum_pbuf(struct pbuf *p)
 569:lwIP/src/core/inet_chksum.c **** {
 907              		.loc 1 569 1 is_stmt 1 view -0
 908              		.cfi_startproc
 909              		@ args = 0, pretend = 0, frame = 0
 910              		@ frame_needed = 0, uses_anonymous_args = 0
 570:lwIP/src/core/inet_chksum.c ****   u32_t acc;
 911              		.loc 1 570 3 view .LVU309
 571:lwIP/src/core/inet_chksum.c ****   struct pbuf *q;
 912              		.loc 1 571 3 view .LVU310
 572:lwIP/src/core/inet_chksum.c ****   int swapped = 0;
 913              		.loc 1 572 3 view .LVU311
 573:lwIP/src/core/inet_chksum.c **** 
 574:lwIP/src/core/inet_chksum.c ****   acc = 0;
 914              		.loc 1 574 3 view .LVU312
 575:lwIP/src/core/inet_chksum.c ****   for (q = p; q != NULL; q = q->next) {
 915              		.loc 1 575 3 view .LVU313
 916              		.loc 1 575 15 view .LVU314
 917              		.loc 1 575 3 is_stmt 0 view .LVU315
 918 0000 30B3     		cbz	r0, .L87
 569:lwIP/src/core/inet_chksum.c ****   u32_t acc;
 919              		.loc 1 569 1 view .LVU316
 920 0002 70B5     		push	{r4, r5, r6, lr}
 921              	.LCFI12:
 922              		.cfi_def_cfa_offset 16
 923              		.cfi_offset 4, -16
 924              		.cfi_offset 5, -12
 925              		.cfi_offset 6, -8
 926              		.cfi_offset 14, -4
ARM GAS  /tmp/ccMmskdD.s 			page 47


 572:lwIP/src/core/inet_chksum.c **** 
 927              		.loc 1 572 7 view .LVU317
 928 0004 0026     		movs	r6, #0
 929 0006 0546     		mov	r5, r0
 574:lwIP/src/core/inet_chksum.c ****   for (q = p; q != NULL; q = q->next) {
 930              		.loc 1 574 7 view .LVU318
 931 0008 3446     		mov	r4, r6
 932              	.LVL99:
 933              	.L85:
 576:lwIP/src/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 934              		.loc 1 576 5 is_stmt 1 view .LVU319
 935              		.loc 1 576 12 is_stmt 0 view .LVU320
 936 000a 6989     		ldrh	r1, [r5, #10]
 937 000c 6868     		ldr	r0, [r5, #4]
 938 000e FFF7FEFF 		bl	lwip_standard_chksum
 939              	.LVL100:
 577:lwIP/src/core/inet_chksum.c ****     acc = FOLD_U32T(acc);
 578:lwIP/src/core/inet_chksum.c ****     if (q->len % 2 != 0) {
 579:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 940              		.loc 1 579 7 is_stmt 1 view .LVU321
 576:lwIP/src/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 941              		.loc 1 576 9 is_stmt 0 view .LVU322
 942 0012 0444     		add	r4, r4, r0
 943              	.LVL101:
 577:lwIP/src/core/inet_chksum.c ****     acc = FOLD_U32T(acc);
 944              		.loc 1 577 5 is_stmt 1 view .LVU323
 578:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 945              		.loc 1 578 20 is_stmt 0 view .LVU324
 946 0014 6B89     		ldrh	r3, [r5, #10]
 577:lwIP/src/core/inet_chksum.c ****     acc = FOLD_U32T(acc);
 947              		.loc 1 577 11 view .LVU325
 948 0016 A0B2     		uxth	r0, r4
 578:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 949              		.loc 1 578 8 view .LVU326
 950 0018 13F0010F 		tst	r3, #1
 577:lwIP/src/core/inet_chksum.c ****     acc = FOLD_U32T(acc);
 951              		.loc 1 577 9 view .LVU327
 952 001c 00EB1444 		add	r4, r0, r4, lsr #16
 953              	.LVL102:
 578:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 954              		.loc 1 578 5 is_stmt 1 view .LVU328
 580:lwIP/src/core/inet_chksum.c ****       acc = SWAP_BYTES_IN_WORD(acc);
 955              		.loc 1 580 13 is_stmt 0 view .LVU329
 956 0020 4FEA0420 		lsl	r0, r4, #8
 957 0024 C4F30723 		ubfx	r3, r4, #8, #8
 578:lwIP/src/core/inet_chksum.c ****       swapped = !swapped;
 958              		.loc 1 578 8 view .LVU330
 959 0028 03D0     		beq	.L84
 960              		.loc 1 580 13 view .LVU331
 961 002a 84B2     		uxth	r4, r0
 962              	.LVL103:
 963              		.loc 1 580 13 view .LVU332
 964 002c 86F00106 		eor	r6, r6, #1
 965              	.LVL104:
 966              		.loc 1 580 7 is_stmt 1 view .LVU333
 967              		.loc 1 580 11 is_stmt 0 view .LVU334
 968 0030 1C43     		orrs	r4, r4, r3
ARM GAS  /tmp/ccMmskdD.s 			page 48


 969              	.LVL105:
 970              	.L84:
 575:lwIP/src/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 971              		.loc 1 575 26 is_stmt 1 discriminator 2 view .LVU335
 575:lwIP/src/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 972              		.loc 1 575 28 is_stmt 0 discriminator 2 view .LVU336
 973 0032 2D68     		ldr	r5, [r5]
 974              	.LVL106:
 575:lwIP/src/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 975              		.loc 1 575 15 is_stmt 1 discriminator 2 view .LVU337
 575:lwIP/src/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 976              		.loc 1 575 3 is_stmt 0 discriminator 2 view .LVU338
 977 0034 002D     		cmp	r5, #0
 978 0036 E8D1     		bne	.L85
 581:lwIP/src/core/inet_chksum.c ****     }
 582:lwIP/src/core/inet_chksum.c ****   }
 583:lwIP/src/core/inet_chksum.c **** 
 584:lwIP/src/core/inet_chksum.c ****   if (swapped) {
 979              		.loc 1 584 3 is_stmt 1 view .LVU339
 980              		.loc 1 584 6 is_stmt 0 view .LVU340
 981 0038 3EB1     		cbz	r6, .L96
 585:lwIP/src/core/inet_chksum.c ****     acc = SWAP_BYTES_IN_WORD(acc);
 982              		.loc 1 585 5 is_stmt 1 view .LVU341
 983              		.loc 1 585 11 is_stmt 0 view .LVU342
 984 003a 2002     		lsls	r0, r4, #8
 985 003c C4F30724 		ubfx	r4, r4, #8, #8
 986              	.LVL107:
 987              		.loc 1 585 11 view .LVU343
 988 0040 80B2     		uxth	r0, r0
 989              	.LVL108:
 990              		.loc 1 585 9 view .LVU344
 991 0042 2043     		orrs	r0, r0, r4
 992              	.LVL109:
 993              		.loc 1 585 9 view .LVU345
 994 0044 C043     		mvns	r0, r0
 995              	.LVL110:
 996              		.loc 1 585 9 view .LVU346
 997 0046 80B2     		uxth	r0, r0
 998              	.LVL111:
 586:lwIP/src/core/inet_chksum.c ****   }
 587:lwIP/src/core/inet_chksum.c ****   return (u16_t)~(acc & 0xffffUL);
 999              		.loc 1 587 3 is_stmt 1 view .LVU347
 588:lwIP/src/core/inet_chksum.c **** }
 1000              		.loc 1 588 1 is_stmt 0 view .LVU348
 1001 0048 70BD     		pop	{r4, r5, r6, pc}
 1002              	.LVL112:
 1003              	.L96:
 1004              		.loc 1 588 1 view .LVU349
 1005 004a E043     		mvns	r0, r4
 1006 004c 80B2     		uxth	r0, r0
 1007              	.LVL113:
 587:lwIP/src/core/inet_chksum.c **** }
 1008              		.loc 1 587 3 is_stmt 1 view .LVU350
 1009              		.loc 1 588 1 is_stmt 0 view .LVU351
 1010 004e 70BD     		pop	{r4, r5, r6, pc}
 1011              	.LVL114:
 1012              	.L87:
ARM GAS  /tmp/ccMmskdD.s 			page 49


 1013              	.LCFI13:
 1014              		.cfi_def_cfa_offset 0
 1015              		.cfi_restore 4
 1016              		.cfi_restore 5
 1017              		.cfi_restore 6
 1018              		.cfi_restore 14
 575:lwIP/src/core/inet_chksum.c ****     acc += LWIP_CHKSUM(q->payload, q->len);
 1019              		.loc 1 575 3 view .LVU352
 1020 0050 4FF6FF70 		movw	r0, #65535
 1021              	.LVL115:
 587:lwIP/src/core/inet_chksum.c **** }
 1022              		.loc 1 587 3 is_stmt 1 view .LVU353
 1023              		.loc 1 588 1 is_stmt 0 view .LVU354
 1024 0054 7047     		bx	lr
 1025              		.cfi_endproc
 1026              	.LFE113:
 1028 0056 00BF     		.text
 1029              	.Letext0:
 1030              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1031              		.file 4 "/usr/arm-none-eabi/include/sys/lock.h"
 1032              		.file 5 "/usr/arm-none-eabi/include/sys/_types.h"
 1033              		.file 6 "/usr/lib/gcc/arm-none-eabi/9.2.0/include/stddef.h"
 1034              		.file 7 "/usr/arm-none-eabi/include/sys/reent.h"
 1035              		.file 8 "/usr/arm-none-eabi/include/stdlib.h"
 1036              		.file 9 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1037              		.file 10 "lwIP/src/include/lwip/arch.h"
 1038              		.file 11 "/usr/arm-none-eabi/include/ctype.h"
 1039              		.file 12 "lwIP/src/include/lwip/pbuf.h"
 1040              		.file 13 "lwIP/src/include/lwip/ip4_addr.h"
 1041              		.file 14 "lwIP/src/include/lwip/ip_addr.h"
 1042              		.file 15 "/usr/arm-none-eabi/include/stdio.h"
ARM GAS  /tmp/ccMmskdD.s 			page 50


DEFINED SYMBOLS
                            *ABS*:0000000000000000 inet_chksum.c
     /tmp/ccMmskdD.s:18     .text.lwip_standard_chksum:0000000000000000 $t
     /tmp/ccMmskdD.s:27     .text.lwip_standard_chksum:0000000000000000 lwip_standard_chksum
     /tmp/ccMmskdD.s:185    .text.inet_chksum_pseudo:0000000000000000 $t
     /tmp/ccMmskdD.s:193    .text.inet_chksum_pseudo:0000000000000000 inet_chksum_pseudo
     /tmp/ccMmskdD.s:396    .text.ip_chksum_pseudo:0000000000000000 $t
     /tmp/ccMmskdD.s:404    .text.ip_chksum_pseudo:0000000000000000 ip_chksum_pseudo
     /tmp/ccMmskdD.s:421    .rodata.inet_chksum_pseudo_partial.str1.4:0000000000000000 $d
     /tmp/ccMmskdD.s:425    .text.inet_chksum_pseudo_partial:0000000000000000 $t
     /tmp/ccMmskdD.s:433    .text.inet_chksum_pseudo_partial:0000000000000000 inet_chksum_pseudo_partial
     /tmp/ccMmskdD.s:686    .text.inet_chksum_pseudo_partial:00000000000000c0 $d
     /tmp/ccMmskdD.s:691    .text.ip_chksum_pseudo_partial:0000000000000000 $t
     /tmp/ccMmskdD.s:699    .text.ip_chksum_pseudo_partial:0000000000000000 ip_chksum_pseudo_partial
     /tmp/ccMmskdD.s:716    .text.inet_chksum:0000000000000000 $t
     /tmp/ccMmskdD.s:724    .text.inet_chksum:0000000000000000 inet_chksum
     /tmp/ccMmskdD.s:896    .text.inet_chksum_pbuf:0000000000000000 $t
     /tmp/ccMmskdD.s:904    .text.inet_chksum_pbuf:0000000000000000 inet_chksum_pbuf

UNDEFINED SYMBOLS
printf
