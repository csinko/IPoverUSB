ARM GAS  /tmp/ccjJALFP.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"ip4.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.ip4_route,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	ip4_route
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	ip4_route:
  28              	.LVL0:
  29              	.LFB105:
  30              		.file 1 "lwIP/src/core/ipv4/ip4.c"
   1:lwIP/src/core/ipv4/ip4.c **** /**
   2:lwIP/src/core/ipv4/ip4.c ****  * @file
   3:lwIP/src/core/ipv4/ip4.c ****  * This is the IPv4 layer implementation for incoming and outgoing IP traffic.
   4:lwIP/src/core/ipv4/ip4.c ****  *
   5:lwIP/src/core/ipv4/ip4.c ****  * @see ip_frag.c
   6:lwIP/src/core/ipv4/ip4.c ****  *
   7:lwIP/src/core/ipv4/ip4.c ****  */
   8:lwIP/src/core/ipv4/ip4.c **** 
   9:lwIP/src/core/ipv4/ip4.c **** /*
  10:lwIP/src/core/ipv4/ip4.c ****  * Copyright (c) 2001-2004 Swedish Institute of Computer Science.
  11:lwIP/src/core/ipv4/ip4.c ****  * All rights reserved.
  12:lwIP/src/core/ipv4/ip4.c ****  *
  13:lwIP/src/core/ipv4/ip4.c ****  * Redistribution and use in source and binary forms, with or without modification,
  14:lwIP/src/core/ipv4/ip4.c ****  * are permitted provided that the following conditions are met:
  15:lwIP/src/core/ipv4/ip4.c ****  *
  16:lwIP/src/core/ipv4/ip4.c ****  * 1. Redistributions of source code must retain the above copyright notice,
  17:lwIP/src/core/ipv4/ip4.c ****  *    this list of conditions and the following disclaimer.
  18:lwIP/src/core/ipv4/ip4.c ****  * 2. Redistributions in binary form must reproduce the above copyright notice,
  19:lwIP/src/core/ipv4/ip4.c ****  *    this list of conditions and the following disclaimer in the documentation
  20:lwIP/src/core/ipv4/ip4.c ****  *    and/or other materials provided with the distribution.
  21:lwIP/src/core/ipv4/ip4.c ****  * 3. The name of the author may not be used to endorse or promote products
  22:lwIP/src/core/ipv4/ip4.c ****  *    derived from this software without specific prior written permission.
  23:lwIP/src/core/ipv4/ip4.c ****  *
  24:lwIP/src/core/ipv4/ip4.c ****  * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
  25:lwIP/src/core/ipv4/ip4.c ****  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
  26:lwIP/src/core/ipv4/ip4.c ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  27:lwIP/src/core/ipv4/ip4.c ****  * SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  28:lwIP/src/core/ipv4/ip4.c ****  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
ARM GAS  /tmp/ccjJALFP.s 			page 2


  29:lwIP/src/core/ipv4/ip4.c ****  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  30:lwIP/src/core/ipv4/ip4.c ****  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  31:lwIP/src/core/ipv4/ip4.c ****  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
  32:lwIP/src/core/ipv4/ip4.c ****  * IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
  33:lwIP/src/core/ipv4/ip4.c ****  * OF SUCH DAMAGE.
  34:lwIP/src/core/ipv4/ip4.c ****  *
  35:lwIP/src/core/ipv4/ip4.c ****  * This file is part of the lwIP TCP/IP stack.
  36:lwIP/src/core/ipv4/ip4.c ****  *
  37:lwIP/src/core/ipv4/ip4.c ****  * Author: Adam Dunkels <adam@sics.se>
  38:lwIP/src/core/ipv4/ip4.c ****  *
  39:lwIP/src/core/ipv4/ip4.c ****  */
  40:lwIP/src/core/ipv4/ip4.c **** 
  41:lwIP/src/core/ipv4/ip4.c **** #include "lwip/opt.h"
  42:lwIP/src/core/ipv4/ip4.c **** 
  43:lwIP/src/core/ipv4/ip4.c **** #if LWIP_IPV4
  44:lwIP/src/core/ipv4/ip4.c **** 
  45:lwIP/src/core/ipv4/ip4.c **** #include "lwip/ip.h"
  46:lwIP/src/core/ipv4/ip4.c **** #include "lwip/def.h"
  47:lwIP/src/core/ipv4/ip4.c **** #include "lwip/mem.h"
  48:lwIP/src/core/ipv4/ip4.c **** #include "lwip/ip4_frag.h"
  49:lwIP/src/core/ipv4/ip4.c **** #include "lwip/inet_chksum.h"
  50:lwIP/src/core/ipv4/ip4.c **** #include "lwip/netif.h"
  51:lwIP/src/core/ipv4/ip4.c **** #include "lwip/icmp.h"
  52:lwIP/src/core/ipv4/ip4.c **** #include "lwip/igmp.h"
  53:lwIP/src/core/ipv4/ip4.c **** #include "lwip/priv/raw_priv.h"
  54:lwIP/src/core/ipv4/ip4.c **** #include "lwip/udp.h"
  55:lwIP/src/core/ipv4/ip4.c **** #include "lwip/priv/tcp_priv.h"
  56:lwIP/src/core/ipv4/ip4.c **** #include "lwip/autoip.h"
  57:lwIP/src/core/ipv4/ip4.c **** #include "lwip/stats.h"
  58:lwIP/src/core/ipv4/ip4.c **** #include "lwip/prot/iana.h"
  59:lwIP/src/core/ipv4/ip4.c **** 
  60:lwIP/src/core/ipv4/ip4.c **** #include <string.h>
  61:lwIP/src/core/ipv4/ip4.c **** 
  62:lwIP/src/core/ipv4/ip4.c **** #ifdef LWIP_HOOK_FILENAME
  63:lwIP/src/core/ipv4/ip4.c **** #include LWIP_HOOK_FILENAME
  64:lwIP/src/core/ipv4/ip4.c **** #endif
  65:lwIP/src/core/ipv4/ip4.c **** 
  66:lwIP/src/core/ipv4/ip4.c **** /** Set this to 0 in the rare case of wanting to call an extra function to
  67:lwIP/src/core/ipv4/ip4.c ****  * generate the IP checksum (in contrast to calculating it on-the-fly). */
  68:lwIP/src/core/ipv4/ip4.c **** #ifndef LWIP_INLINE_IP_CHKSUM
  69:lwIP/src/core/ipv4/ip4.c **** #if LWIP_CHECKSUM_CTRL_PER_NETIF
  70:lwIP/src/core/ipv4/ip4.c **** #define LWIP_INLINE_IP_CHKSUM   0
  71:lwIP/src/core/ipv4/ip4.c **** #else /* LWIP_CHECKSUM_CTRL_PER_NETIF */
  72:lwIP/src/core/ipv4/ip4.c **** #define LWIP_INLINE_IP_CHKSUM   1
  73:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
  74:lwIP/src/core/ipv4/ip4.c **** #endif
  75:lwIP/src/core/ipv4/ip4.c **** 
  76:lwIP/src/core/ipv4/ip4.c **** #if LWIP_INLINE_IP_CHKSUM && CHECKSUM_GEN_IP
  77:lwIP/src/core/ipv4/ip4.c **** #define CHECKSUM_GEN_IP_INLINE  1
  78:lwIP/src/core/ipv4/ip4.c **** #else
  79:lwIP/src/core/ipv4/ip4.c **** #define CHECKSUM_GEN_IP_INLINE  0
  80:lwIP/src/core/ipv4/ip4.c **** #endif
  81:lwIP/src/core/ipv4/ip4.c **** 
  82:lwIP/src/core/ipv4/ip4.c **** #if LWIP_DHCP || defined(LWIP_IP_ACCEPT_UDP_PORT)
  83:lwIP/src/core/ipv4/ip4.c **** #define IP_ACCEPT_LINK_LAYER_ADDRESSING 1
  84:lwIP/src/core/ipv4/ip4.c **** 
  85:lwIP/src/core/ipv4/ip4.c **** /** Some defines for DHCP to let link-layer-addressed packets through while the
ARM GAS  /tmp/ccjJALFP.s 			page 3


  86:lwIP/src/core/ipv4/ip4.c ****  * netif is down.
  87:lwIP/src/core/ipv4/ip4.c ****  * To use this in your own application/protocol, define LWIP_IP_ACCEPT_UDP_PORT(port)
  88:lwIP/src/core/ipv4/ip4.c ****  * to return 1 if the port is accepted and 0 if the port is not accepted.
  89:lwIP/src/core/ipv4/ip4.c ****  */
  90:lwIP/src/core/ipv4/ip4.c **** #if LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT)
  91:lwIP/src/core/ipv4/ip4.c **** /* accept DHCP client port and custom port */
  92:lwIP/src/core/ipv4/ip4.c **** #define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) (((port) == PP_NTOHS(LWIP_IANA_PORT_DHCP_CLIENT))
  93:lwIP/src/core/ipv4/ip4.c ****          || (LWIP_IP_ACCEPT_UDP_PORT(port)))
  94:lwIP/src/core/ipv4/ip4.c **** #elif defined(LWIP_IP_ACCEPT_UDP_PORT) /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
  95:lwIP/src/core/ipv4/ip4.c **** /* accept custom port only */
  96:lwIP/src/core/ipv4/ip4.c **** #define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) (LWIP_IP_ACCEPT_UDP_PORT(port))
  97:lwIP/src/core/ipv4/ip4.c **** #else /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
  98:lwIP/src/core/ipv4/ip4.c **** /* accept DHCP client port only */
  99:lwIP/src/core/ipv4/ip4.c **** #define IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(port) ((port) == PP_NTOHS(LWIP_IANA_PORT_DHCP_CLIENT))
 100:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_DHCP && defined(LWIP_IP_ACCEPT_UDP_PORT) */
 101:lwIP/src/core/ipv4/ip4.c **** 
 102:lwIP/src/core/ipv4/ip4.c **** #else /* LWIP_DHCP */
 103:lwIP/src/core/ipv4/ip4.c **** #define IP_ACCEPT_LINK_LAYER_ADDRESSING 0
 104:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_DHCP */
 105:lwIP/src/core/ipv4/ip4.c **** 
 106:lwIP/src/core/ipv4/ip4.c **** /** The IP header ID of the next outgoing IP packet */
 107:lwIP/src/core/ipv4/ip4.c **** static u16_t ip_id;
 108:lwIP/src/core/ipv4/ip4.c **** 
 109:lwIP/src/core/ipv4/ip4.c **** #if LWIP_MULTICAST_TX_OPTIONS
 110:lwIP/src/core/ipv4/ip4.c **** /** The default netif used for multicast */
 111:lwIP/src/core/ipv4/ip4.c **** static struct netif *ip4_default_multicast_netif;
 112:lwIP/src/core/ipv4/ip4.c **** 
 113:lwIP/src/core/ipv4/ip4.c **** /**
 114:lwIP/src/core/ipv4/ip4.c ****  * @ingroup ip4
 115:lwIP/src/core/ipv4/ip4.c ****  * Set a default netif for IPv4 multicast. */
 116:lwIP/src/core/ipv4/ip4.c **** void
 117:lwIP/src/core/ipv4/ip4.c **** ip4_set_default_multicast_netif(struct netif *default_multicast_netif)
 118:lwIP/src/core/ipv4/ip4.c **** {
 119:lwIP/src/core/ipv4/ip4.c ****   ip4_default_multicast_netif = default_multicast_netif;
 120:lwIP/src/core/ipv4/ip4.c **** }
 121:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_MULTICAST_TX_OPTIONS */
 122:lwIP/src/core/ipv4/ip4.c **** 
 123:lwIP/src/core/ipv4/ip4.c **** #ifdef LWIP_HOOK_IP4_ROUTE_SRC
 124:lwIP/src/core/ipv4/ip4.c **** /**
 125:lwIP/src/core/ipv4/ip4.c ****  * Source based IPv4 routing must be fully implemented in
 126:lwIP/src/core/ipv4/ip4.c ****  * LWIP_HOOK_IP4_ROUTE_SRC(). This function only provides the parameters.
 127:lwIP/src/core/ipv4/ip4.c ****  */
 128:lwIP/src/core/ipv4/ip4.c **** struct netif *
 129:lwIP/src/core/ipv4/ip4.c **** ip4_route_src(const ip4_addr_t *src, const ip4_addr_t *dest)
 130:lwIP/src/core/ipv4/ip4.c **** {
 131:lwIP/src/core/ipv4/ip4.c ****   if (src != NULL) {
 132:lwIP/src/core/ipv4/ip4.c ****     /* when src==NULL, the hook is called from ip4_route(dest) */
 133:lwIP/src/core/ipv4/ip4.c ****     struct netif *netif = LWIP_HOOK_IP4_ROUTE_SRC(src, dest);
 134:lwIP/src/core/ipv4/ip4.c ****     if (netif != NULL) {
 135:lwIP/src/core/ipv4/ip4.c ****       return netif;
 136:lwIP/src/core/ipv4/ip4.c ****     }
 137:lwIP/src/core/ipv4/ip4.c ****   }
 138:lwIP/src/core/ipv4/ip4.c ****   return ip4_route(dest);
 139:lwIP/src/core/ipv4/ip4.c **** }
 140:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_HOOK_IP4_ROUTE_SRC */
 141:lwIP/src/core/ipv4/ip4.c **** 
 142:lwIP/src/core/ipv4/ip4.c **** /**
ARM GAS  /tmp/ccjJALFP.s 			page 4


 143:lwIP/src/core/ipv4/ip4.c ****  * Finds the appropriate network interface for a given IP address. It
 144:lwIP/src/core/ipv4/ip4.c ****  * searches the list of network interfaces linearly. A match is found
 145:lwIP/src/core/ipv4/ip4.c ****  * if the masked IP address of the network interface equals the masked
 146:lwIP/src/core/ipv4/ip4.c ****  * IP address given to the function.
 147:lwIP/src/core/ipv4/ip4.c ****  *
 148:lwIP/src/core/ipv4/ip4.c ****  * @param dest the destination IP address for which to find the route
 149:lwIP/src/core/ipv4/ip4.c ****  * @return the netif on which to send to reach dest
 150:lwIP/src/core/ipv4/ip4.c ****  */
 151:lwIP/src/core/ipv4/ip4.c **** struct netif *
 152:lwIP/src/core/ipv4/ip4.c **** ip4_route(const ip4_addr_t *dest)
 153:lwIP/src/core/ipv4/ip4.c **** {
  31              		.loc 1 153 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		@ link register save eliminated.
 154:lwIP/src/core/ipv4/ip4.c **** #if !LWIP_SINGLE_NETIF
 155:lwIP/src/core/ipv4/ip4.c ****   struct netif *netif;
 156:lwIP/src/core/ipv4/ip4.c **** 
 157:lwIP/src/core/ipv4/ip4.c ****   LWIP_ASSERT_CORE_LOCKED();
 158:lwIP/src/core/ipv4/ip4.c **** 
 159:lwIP/src/core/ipv4/ip4.c **** #if LWIP_MULTICAST_TX_OPTIONS
 160:lwIP/src/core/ipv4/ip4.c ****   /* Use administratively selected interface for multicast by default */
 161:lwIP/src/core/ipv4/ip4.c ****   if (ip4_addr_ismulticast(dest) && ip4_default_multicast_netif) {
 162:lwIP/src/core/ipv4/ip4.c ****     return ip4_default_multicast_netif;
 163:lwIP/src/core/ipv4/ip4.c ****   }
 164:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_MULTICAST_TX_OPTIONS */
 165:lwIP/src/core/ipv4/ip4.c **** 
 166:lwIP/src/core/ipv4/ip4.c ****   /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is opti
 167:lwIP/src/core/ipv4/ip4.c ****   LWIP_UNUSED_ARG(dest);
 168:lwIP/src/core/ipv4/ip4.c **** 
 169:lwIP/src/core/ipv4/ip4.c ****   /* iterate through netifs */
 170:lwIP/src/core/ipv4/ip4.c ****   NETIF_FOREACH(netif) {
 171:lwIP/src/core/ipv4/ip4.c ****     /* is the netif up, does it have a link and a valid address? */
 172:lwIP/src/core/ipv4/ip4.c ****     if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif)
 173:lwIP/src/core/ipv4/ip4.c ****       /* network mask matches? */
 174:lwIP/src/core/ipv4/ip4.c ****       if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 175:lwIP/src/core/ipv4/ip4.c ****         /* return netif on which to forward IP packet */
 176:lwIP/src/core/ipv4/ip4.c ****         return netif;
 177:lwIP/src/core/ipv4/ip4.c ****       }
 178:lwIP/src/core/ipv4/ip4.c ****       /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
 179:lwIP/src/core/ipv4/ip4.c ****       if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) 
 180:lwIP/src/core/ipv4/ip4.c ****         /* return netif on which to forward IP packet */
 181:lwIP/src/core/ipv4/ip4.c ****         return netif;
 182:lwIP/src/core/ipv4/ip4.c ****       }
 183:lwIP/src/core/ipv4/ip4.c ****     }
 184:lwIP/src/core/ipv4/ip4.c ****   }
 185:lwIP/src/core/ipv4/ip4.c **** 
 186:lwIP/src/core/ipv4/ip4.c **** #if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
 187:lwIP/src/core/ipv4/ip4.c ****   /* loopif is disabled, looopback traffic is passed through any netif */
 188:lwIP/src/core/ipv4/ip4.c ****   if (ip4_addr_isloopback(dest)) {
 189:lwIP/src/core/ipv4/ip4.c ****     /* don't check for link on loopback traffic */
 190:lwIP/src/core/ipv4/ip4.c ****     if (netif_default != NULL && netif_is_up(netif_default)) {
 191:lwIP/src/core/ipv4/ip4.c ****       return netif_default;
 192:lwIP/src/core/ipv4/ip4.c ****     }
 193:lwIP/src/core/ipv4/ip4.c ****     /* default netif is not up, just use any netif for loopback traffic */
 194:lwIP/src/core/ipv4/ip4.c ****     NETIF_FOREACH(netif) {
ARM GAS  /tmp/ccjJALFP.s 			page 5


 195:lwIP/src/core/ipv4/ip4.c ****       if (netif_is_up(netif)) {
 196:lwIP/src/core/ipv4/ip4.c ****         return netif;
 197:lwIP/src/core/ipv4/ip4.c ****       }
 198:lwIP/src/core/ipv4/ip4.c ****     }
 199:lwIP/src/core/ipv4/ip4.c ****     return NULL;
 200:lwIP/src/core/ipv4/ip4.c ****   }
 201:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
 202:lwIP/src/core/ipv4/ip4.c **** 
 203:lwIP/src/core/ipv4/ip4.c **** #ifdef LWIP_HOOK_IP4_ROUTE_SRC
 204:lwIP/src/core/ipv4/ip4.c ****   netif = LWIP_HOOK_IP4_ROUTE_SRC(NULL, dest);
 205:lwIP/src/core/ipv4/ip4.c ****   if (netif != NULL) {
 206:lwIP/src/core/ipv4/ip4.c ****     return netif;
 207:lwIP/src/core/ipv4/ip4.c ****   }
 208:lwIP/src/core/ipv4/ip4.c **** #elif defined(LWIP_HOOK_IP4_ROUTE)
 209:lwIP/src/core/ipv4/ip4.c ****   netif = LWIP_HOOK_IP4_ROUTE(dest);
 210:lwIP/src/core/ipv4/ip4.c ****   if (netif != NULL) {
 211:lwIP/src/core/ipv4/ip4.c ****     return netif;
 212:lwIP/src/core/ipv4/ip4.c ****   }
 213:lwIP/src/core/ipv4/ip4.c **** #endif
 214:lwIP/src/core/ipv4/ip4.c **** #endif /* !LWIP_SINGLE_NETIF */
 215:lwIP/src/core/ipv4/ip4.c **** 
 216:lwIP/src/core/ipv4/ip4.c ****   if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
  36              		.loc 1 216 3 view .LVU1
  37              		.loc 1 216 22 is_stmt 0 view .LVU2
  38 0000 074B     		ldr	r3, .L9
  39 0002 1868     		ldr	r0, [r3]
  40              	.LVL1:
  41              		.loc 1 216 6 view .LVU3
  42 0004 58B1     		cbz	r0, .L1
  43              		.loc 1 216 62 discriminator 1 view .LVU4
  44 0006 90F82530 		ldrb	r3, [r0, #37]	@ zero_extendqisi2
  45 000a 03F00503 		and	r3, r3, #5
  46 000e 052B     		cmp	r3, #5
  47 0010 04D1     		bne	.L3
  48              		.loc 1 216 98 discriminator 2 view .LVU5
  49 0012 0368     		ldr	r3, [r0]
 217:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 218:lwIP/src/core/ipv4/ip4.c ****     /* No matching netif found and default netif is not usable.
 219:lwIP/src/core/ipv4/ip4.c ****        If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
 220:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16
 221:lwIP/src/core/ipv4/ip4.c ****                 ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
 222:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.rterr);
 223:lwIP/src/core/ipv4/ip4.c ****     MIB2_STATS_INC(mib2.ipoutnoroutes);
 224:lwIP/src/core/ipv4/ip4.c ****     return NULL;
  50              		.loc 1 224 12 discriminator 2 view .LVU6
  51 0014 002B     		cmp	r3, #0
  52 0016 08BF     		it	eq
  53 0018 0020     		moveq	r0, #0
  54 001a 7047     		bx	lr
  55              	.L3:
  56              		.loc 1 224 12 view .LVU7
  57 001c 0020     		movs	r0, #0
  58              	.L1:
 225:lwIP/src/core/ipv4/ip4.c ****   }
 226:lwIP/src/core/ipv4/ip4.c **** 
 227:lwIP/src/core/ipv4/ip4.c ****   return netif_default;
 228:lwIP/src/core/ipv4/ip4.c **** }
ARM GAS  /tmp/ccjJALFP.s 			page 6


  59              		.loc 1 228 1 view .LVU8
  60 001e 7047     		bx	lr
  61              	.L10:
  62              		.align	2
  63              	.L9:
  64 0020 00000000 		.word	netif_default
  65              		.cfi_endproc
  66              	.LFE105:
  68              		.section	.text.ip4_input,"ax",%progbits
  69              		.align	1
  70              		.p2align 2,,3
  71              		.global	ip4_input
  72              		.syntax unified
  73              		.thumb
  74              		.thumb_func
  75              		.fpu fpv4-sp-d16
  77              	ip4_input:
  78              	.LVL2:
  79              	.LFB107:
 229:lwIP/src/core/ipv4/ip4.c **** 
 230:lwIP/src/core/ipv4/ip4.c **** #if IP_FORWARD
 231:lwIP/src/core/ipv4/ip4.c **** /**
 232:lwIP/src/core/ipv4/ip4.c ****  * Determine whether an IP address is in a reserved set of addresses
 233:lwIP/src/core/ipv4/ip4.c ****  * that may not be forwarded, or whether datagrams to that destination
 234:lwIP/src/core/ipv4/ip4.c ****  * may be forwarded.
 235:lwIP/src/core/ipv4/ip4.c ****  * @param p the packet to forward
 236:lwIP/src/core/ipv4/ip4.c ****  * @return 1: can forward 0: discard
 237:lwIP/src/core/ipv4/ip4.c ****  */
 238:lwIP/src/core/ipv4/ip4.c **** static int
 239:lwIP/src/core/ipv4/ip4.c **** ip4_canforward(struct pbuf *p)
 240:lwIP/src/core/ipv4/ip4.c **** {
 241:lwIP/src/core/ipv4/ip4.c ****   u32_t addr = lwip_htonl(ip4_addr_get_u32(ip4_current_dest_addr()));
 242:lwIP/src/core/ipv4/ip4.c **** 
 243:lwIP/src/core/ipv4/ip4.c **** #ifdef LWIP_HOOK_IP4_CANFORWARD
 244:lwIP/src/core/ipv4/ip4.c ****   int ret = LWIP_HOOK_IP4_CANFORWARD(p, addr);
 245:lwIP/src/core/ipv4/ip4.c ****   if (ret >= 0) {
 246:lwIP/src/core/ipv4/ip4.c ****     return ret;
 247:lwIP/src/core/ipv4/ip4.c ****   }
 248:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_HOOK_IP4_CANFORWARD */
 249:lwIP/src/core/ipv4/ip4.c **** 
 250:lwIP/src/core/ipv4/ip4.c ****   if (p->flags & PBUF_FLAG_LLBCAST) {
 251:lwIP/src/core/ipv4/ip4.c ****     /* don't route link-layer broadcasts */
 252:lwIP/src/core/ipv4/ip4.c ****     return 0;
 253:lwIP/src/core/ipv4/ip4.c ****   }
 254:lwIP/src/core/ipv4/ip4.c ****   if ((p->flags & PBUF_FLAG_LLMCAST) || IP_MULTICAST(addr)) {
 255:lwIP/src/core/ipv4/ip4.c ****     /* don't route link-layer multicasts (use LWIP_HOOK_IP4_CANFORWARD instead) */
 256:lwIP/src/core/ipv4/ip4.c ****     return 0;
 257:lwIP/src/core/ipv4/ip4.c ****   }
 258:lwIP/src/core/ipv4/ip4.c ****   if (IP_EXPERIMENTAL(addr)) {
 259:lwIP/src/core/ipv4/ip4.c ****     return 0;
 260:lwIP/src/core/ipv4/ip4.c ****   }
 261:lwIP/src/core/ipv4/ip4.c ****   if (IP_CLASSA(addr)) {
 262:lwIP/src/core/ipv4/ip4.c ****     u32_t net = addr & IP_CLASSA_NET;
 263:lwIP/src/core/ipv4/ip4.c ****     if ((net == 0) || (net == ((u32_t)IP_LOOPBACKNET << IP_CLASSA_NSHIFT))) {
 264:lwIP/src/core/ipv4/ip4.c ****       /* don't route loopback packets */
 265:lwIP/src/core/ipv4/ip4.c ****       return 0;
 266:lwIP/src/core/ipv4/ip4.c ****     }
ARM GAS  /tmp/ccjJALFP.s 			page 7


 267:lwIP/src/core/ipv4/ip4.c ****   }
 268:lwIP/src/core/ipv4/ip4.c ****   return 1;
 269:lwIP/src/core/ipv4/ip4.c **** }
 270:lwIP/src/core/ipv4/ip4.c **** 
 271:lwIP/src/core/ipv4/ip4.c **** /**
 272:lwIP/src/core/ipv4/ip4.c ****  * Forwards an IP packet. It finds an appropriate route for the
 273:lwIP/src/core/ipv4/ip4.c ****  * packet, decrements the TTL value of the packet, adjusts the
 274:lwIP/src/core/ipv4/ip4.c ****  * checksum and outputs the packet on the appropriate interface.
 275:lwIP/src/core/ipv4/ip4.c ****  *
 276:lwIP/src/core/ipv4/ip4.c ****  * @param p the packet to forward (p->payload points to IP header)
 277:lwIP/src/core/ipv4/ip4.c ****  * @param iphdr the IP header of the input packet
 278:lwIP/src/core/ipv4/ip4.c ****  * @param inp the netif on which this packet was received
 279:lwIP/src/core/ipv4/ip4.c ****  */
 280:lwIP/src/core/ipv4/ip4.c **** static void
 281:lwIP/src/core/ipv4/ip4.c **** ip4_forward(struct pbuf *p, struct ip_hdr *iphdr, struct netif *inp)
 282:lwIP/src/core/ipv4/ip4.c **** {
 283:lwIP/src/core/ipv4/ip4.c ****   struct netif *netif;
 284:lwIP/src/core/ipv4/ip4.c **** 
 285:lwIP/src/core/ipv4/ip4.c ****   PERF_START;
 286:lwIP/src/core/ipv4/ip4.c ****   LWIP_UNUSED_ARG(inp);
 287:lwIP/src/core/ipv4/ip4.c **** 
 288:lwIP/src/core/ipv4/ip4.c ****   if (!ip4_canforward(p)) {
 289:lwIP/src/core/ipv4/ip4.c ****     goto return_noroute;
 290:lwIP/src/core/ipv4/ip4.c ****   }
 291:lwIP/src/core/ipv4/ip4.c **** 
 292:lwIP/src/core/ipv4/ip4.c ****   /* RFC3927 2.7: do not forward link-local addresses */
 293:lwIP/src/core/ipv4/ip4.c ****   if (ip4_addr_islinklocal(ip4_current_dest_addr())) {
 294:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG, ("ip4_forward: not forwarding LLA %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 295:lwIP/src/core/ipv4/ip4.c ****                            ip4_addr1_16(ip4_current_dest_addr()), ip4_addr2_16(ip4_current_dest_add
 296:lwIP/src/core/ipv4/ip4.c ****                            ip4_addr3_16(ip4_current_dest_addr()), ip4_addr4_16(ip4_current_dest_add
 297:lwIP/src/core/ipv4/ip4.c ****     goto return_noroute;
 298:lwIP/src/core/ipv4/ip4.c ****   }
 299:lwIP/src/core/ipv4/ip4.c **** 
 300:lwIP/src/core/ipv4/ip4.c ****   /* Find network interface where to forward this IP packet to. */
 301:lwIP/src/core/ipv4/ip4.c ****   netif = ip4_route_src(ip4_current_src_addr(), ip4_current_dest_addr());
 302:lwIP/src/core/ipv4/ip4.c ****   if (netif == NULL) {
 303:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG, ("ip4_forward: no forwarding route for %"U16_F".%"U16_F".%"U16_F".%"U16_F
 304:lwIP/src/core/ipv4/ip4.c ****                            ip4_addr1_16(ip4_current_dest_addr()), ip4_addr2_16(ip4_current_dest_add
 305:lwIP/src/core/ipv4/ip4.c ****                            ip4_addr3_16(ip4_current_dest_addr()), ip4_addr4_16(ip4_current_dest_add
 306:lwIP/src/core/ipv4/ip4.c ****     /* @todo: send ICMP_DUR_NET? */
 307:lwIP/src/core/ipv4/ip4.c ****     goto return_noroute;
 308:lwIP/src/core/ipv4/ip4.c ****   }
 309:lwIP/src/core/ipv4/ip4.c **** #if !IP_FORWARD_ALLOW_TX_ON_RX_NETIF
 310:lwIP/src/core/ipv4/ip4.c ****   /* Do not forward packets onto the same network interface on which
 311:lwIP/src/core/ipv4/ip4.c ****    * they arrived. */
 312:lwIP/src/core/ipv4/ip4.c ****   if (netif == inp) {
 313:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG, ("ip4_forward: not bouncing packets back on incoming interface.\n"));
 314:lwIP/src/core/ipv4/ip4.c ****     goto return_noroute;
 315:lwIP/src/core/ipv4/ip4.c ****   }
 316:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_FORWARD_ALLOW_TX_ON_RX_NETIF */
 317:lwIP/src/core/ipv4/ip4.c **** 
 318:lwIP/src/core/ipv4/ip4.c ****   /* decrement TTL */
 319:lwIP/src/core/ipv4/ip4.c ****   IPH_TTL_SET(iphdr, IPH_TTL(iphdr) - 1);
 320:lwIP/src/core/ipv4/ip4.c ****   /* send ICMP if TTL == 0 */
 321:lwIP/src/core/ipv4/ip4.c ****   if (IPH_TTL(iphdr) == 0) {
 322:lwIP/src/core/ipv4/ip4.c ****     MIB2_STATS_INC(mib2.ipinhdrerrors);
 323:lwIP/src/core/ipv4/ip4.c **** #if LWIP_ICMP
ARM GAS  /tmp/ccjJALFP.s 			page 8


 324:lwIP/src/core/ipv4/ip4.c ****     /* Don't send ICMP messages in response to ICMP messages */
 325:lwIP/src/core/ipv4/ip4.c ****     if (IPH_PROTO(iphdr) != IP_PROTO_ICMP) {
 326:lwIP/src/core/ipv4/ip4.c ****       icmp_time_exceeded(p, ICMP_TE_TTL);
 327:lwIP/src/core/ipv4/ip4.c ****     }
 328:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_ICMP */
 329:lwIP/src/core/ipv4/ip4.c ****     return;
 330:lwIP/src/core/ipv4/ip4.c ****   }
 331:lwIP/src/core/ipv4/ip4.c **** 
 332:lwIP/src/core/ipv4/ip4.c ****   /* Incrementally update the IP checksum. */
 333:lwIP/src/core/ipv4/ip4.c ****   if (IPH_CHKSUM(iphdr) >= PP_HTONS(0xffffU - 0x100)) {
 334:lwIP/src/core/ipv4/ip4.c ****     IPH_CHKSUM_SET(iphdr, (u16_t)(IPH_CHKSUM(iphdr) + PP_HTONS(0x100) + 1));
 335:lwIP/src/core/ipv4/ip4.c ****   } else {
 336:lwIP/src/core/ipv4/ip4.c ****     IPH_CHKSUM_SET(iphdr, (u16_t)(IPH_CHKSUM(iphdr) + PP_HTONS(0x100)));
 337:lwIP/src/core/ipv4/ip4.c ****   }
 338:lwIP/src/core/ipv4/ip4.c **** 
 339:lwIP/src/core/ipv4/ip4.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip4_forward: forwarding packet to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
 340:lwIP/src/core/ipv4/ip4.c ****                          ip4_addr1_16(ip4_current_dest_addr()), ip4_addr2_16(ip4_current_dest_addr(
 341:lwIP/src/core/ipv4/ip4.c ****                          ip4_addr3_16(ip4_current_dest_addr()), ip4_addr4_16(ip4_current_dest_addr(
 342:lwIP/src/core/ipv4/ip4.c **** 
 343:lwIP/src/core/ipv4/ip4.c ****   IP_STATS_INC(ip.fw);
 344:lwIP/src/core/ipv4/ip4.c ****   MIB2_STATS_INC(mib2.ipforwdatagrams);
 345:lwIP/src/core/ipv4/ip4.c ****   IP_STATS_INC(ip.xmit);
 346:lwIP/src/core/ipv4/ip4.c **** 
 347:lwIP/src/core/ipv4/ip4.c ****   PERF_STOP("ip4_forward");
 348:lwIP/src/core/ipv4/ip4.c ****   /* don't fragment if interface has mtu set to 0 [loopif] */
 349:lwIP/src/core/ipv4/ip4.c ****   if (netif->mtu && (p->tot_len > netif->mtu)) {
 350:lwIP/src/core/ipv4/ip4.c ****     if ((IPH_OFFSET(iphdr) & PP_NTOHS(IP_DF)) == 0) {
 351:lwIP/src/core/ipv4/ip4.c **** #if IP_FRAG
 352:lwIP/src/core/ipv4/ip4.c ****       ip4_frag(p, netif, ip4_current_dest_addr());
 353:lwIP/src/core/ipv4/ip4.c **** #else /* IP_FRAG */
 354:lwIP/src/core/ipv4/ip4.c ****       /* @todo: send ICMP Destination Unreachable code 13 "Communication administratively prohibite
 355:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_FRAG */
 356:lwIP/src/core/ipv4/ip4.c ****     } else {
 357:lwIP/src/core/ipv4/ip4.c **** #if LWIP_ICMP
 358:lwIP/src/core/ipv4/ip4.c ****       /* send ICMP Destination Unreachable code 4: "Fragmentation Needed and DF Set" */
 359:lwIP/src/core/ipv4/ip4.c ****       icmp_dest_unreach(p, ICMP_DUR_FRAG);
 360:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_ICMP */
 361:lwIP/src/core/ipv4/ip4.c ****     }
 362:lwIP/src/core/ipv4/ip4.c ****     return;
 363:lwIP/src/core/ipv4/ip4.c ****   }
 364:lwIP/src/core/ipv4/ip4.c ****   /* transmit pbuf on chosen interface */
 365:lwIP/src/core/ipv4/ip4.c ****   netif->output(netif, p, ip4_current_dest_addr());
 366:lwIP/src/core/ipv4/ip4.c ****   return;
 367:lwIP/src/core/ipv4/ip4.c **** return_noroute:
 368:lwIP/src/core/ipv4/ip4.c ****   MIB2_STATS_INC(mib2.ipoutnoroutes);
 369:lwIP/src/core/ipv4/ip4.c **** }
 370:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_FORWARD */
 371:lwIP/src/core/ipv4/ip4.c **** 
 372:lwIP/src/core/ipv4/ip4.c **** /** Return true if the current input packet should be accepted on this netif */
 373:lwIP/src/core/ipv4/ip4.c **** static int
 374:lwIP/src/core/ipv4/ip4.c **** ip4_input_accept(struct netif *netif)
 375:lwIP/src/core/ipv4/ip4.c **** {
 376:lwIP/src/core/ipv4/ip4.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip_input: iphdr->dest 0x%"X32_F" netif->ip_addr 0x%"X32_F" (0x%"X32_F", 0
 377:lwIP/src/core/ipv4/ip4.c ****                          ip4_addr_get_u32(ip4_current_dest_addr()), ip4_addr_get_u32(netif_ip4_addr
 378:lwIP/src/core/ipv4/ip4.c ****                          ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_net
 379:lwIP/src/core/ipv4/ip4.c ****                          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netma
 380:lwIP/src/core/ipv4/ip4.c ****                          ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_ne
ARM GAS  /tmp/ccjJALFP.s 			page 9


 381:lwIP/src/core/ipv4/ip4.c **** 
 382:lwIP/src/core/ipv4/ip4.c ****   /* interface is up and configured? */
 383:lwIP/src/core/ipv4/ip4.c ****   if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 384:lwIP/src/core/ipv4/ip4.c ****     /* unicast to this interface address? */
 385:lwIP/src/core/ipv4/ip4.c ****     if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 386:lwIP/src/core/ipv4/ip4.c ****         /* or broadcast on this interface network address? */
 387:lwIP/src/core/ipv4/ip4.c ****         ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 388:lwIP/src/core/ipv4/ip4.c **** #if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
 389:lwIP/src/core/ipv4/ip4.c ****         || (ip4_addr_get_u32(ip4_current_dest_addr()) == PP_HTONL(IPADDR_LOOPBACK))
 390:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
 391:lwIP/src/core/ipv4/ip4.c ****        ) {
 392:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
 393:lwIP/src/core/ipv4/ip4.c ****                              netif->name[0], netif->name[1]));
 394:lwIP/src/core/ipv4/ip4.c ****       /* accept on this netif */
 395:lwIP/src/core/ipv4/ip4.c ****       return 1;
 396:lwIP/src/core/ipv4/ip4.c ****     }
 397:lwIP/src/core/ipv4/ip4.c **** #if LWIP_AUTOIP
 398:lwIP/src/core/ipv4/ip4.c ****     /* connections to link-local addresses must persist after changing
 399:lwIP/src/core/ipv4/ip4.c ****         the netif's address (RFC3927 ch. 1.9) */
 400:lwIP/src/core/ipv4/ip4.c ****     if (autoip_accept_packet(netif, ip4_current_dest_addr())) {
 401:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG, ("ip4_input: LLA packet accepted on interface %c%c\n",
 402:lwIP/src/core/ipv4/ip4.c ****                              netif->name[0], netif->name[1]));
 403:lwIP/src/core/ipv4/ip4.c ****       /* accept on this netif */
 404:lwIP/src/core/ipv4/ip4.c ****       return 1;
 405:lwIP/src/core/ipv4/ip4.c ****     }
 406:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_AUTOIP */
 407:lwIP/src/core/ipv4/ip4.c ****   }
 408:lwIP/src/core/ipv4/ip4.c ****   return 0;
 409:lwIP/src/core/ipv4/ip4.c **** }
 410:lwIP/src/core/ipv4/ip4.c **** 
 411:lwIP/src/core/ipv4/ip4.c **** /**
 412:lwIP/src/core/ipv4/ip4.c ****  * This function is called by the network interface device driver when
 413:lwIP/src/core/ipv4/ip4.c ****  * an IP packet is received. The function does the basic checks of the
 414:lwIP/src/core/ipv4/ip4.c ****  * IP header such as packet size being at least larger than the header
 415:lwIP/src/core/ipv4/ip4.c ****  * size etc. If the packet was not destined for us, the packet is
 416:lwIP/src/core/ipv4/ip4.c ****  * forwarded (using ip_forward). The IP checksum is always checked.
 417:lwIP/src/core/ipv4/ip4.c ****  *
 418:lwIP/src/core/ipv4/ip4.c ****  * Finally, the packet is sent to the upper layer protocol input function.
 419:lwIP/src/core/ipv4/ip4.c ****  *
 420:lwIP/src/core/ipv4/ip4.c ****  * @param p the received IP packet (p->payload points to IP header)
 421:lwIP/src/core/ipv4/ip4.c ****  * @param inp the netif on which this packet was received
 422:lwIP/src/core/ipv4/ip4.c ****  * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 423:lwIP/src/core/ipv4/ip4.c ****  *         processed, but currently always returns ERR_OK)
 424:lwIP/src/core/ipv4/ip4.c ****  */
 425:lwIP/src/core/ipv4/ip4.c **** err_t
 426:lwIP/src/core/ipv4/ip4.c **** ip4_input(struct pbuf *p, struct netif *inp)
 427:lwIP/src/core/ipv4/ip4.c **** {
  80              		.loc 1 427 1 is_stmt 1 view -0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
 428:lwIP/src/core/ipv4/ip4.c ****   const struct ip_hdr *iphdr;
  84              		.loc 1 428 3 view .LVU10
 429:lwIP/src/core/ipv4/ip4.c ****   struct netif *netif;
  85              		.loc 1 429 3 view .LVU11
 430:lwIP/src/core/ipv4/ip4.c ****   u16_t iphdr_hlen;
  86              		.loc 1 430 3 view .LVU12
ARM GAS  /tmp/ccjJALFP.s 			page 10


 431:lwIP/src/core/ipv4/ip4.c ****   u16_t iphdr_len;
  87              		.loc 1 431 3 view .LVU13
 432:lwIP/src/core/ipv4/ip4.c **** #if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
 433:lwIP/src/core/ipv4/ip4.c ****   int check_ip_src = 1;
  88              		.loc 1 433 3 view .LVU14
 434:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP */
 435:lwIP/src/core/ipv4/ip4.c **** #if LWIP_RAW
 436:lwIP/src/core/ipv4/ip4.c ****   raw_input_state_t raw_status;
 437:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_RAW */
 438:lwIP/src/core/ipv4/ip4.c **** 
 439:lwIP/src/core/ipv4/ip4.c ****   LWIP_ASSERT_CORE_LOCKED();
  89              		.loc 1 439 28 view .LVU15
 440:lwIP/src/core/ipv4/ip4.c **** 
 441:lwIP/src/core/ipv4/ip4.c ****   IP_STATS_INC(ip.recv);
  90              		.loc 1 441 24 view .LVU16
 442:lwIP/src/core/ipv4/ip4.c ****   MIB2_STATS_INC(mib2.ipinreceives);
  91              		.loc 1 442 36 view .LVU17
 443:lwIP/src/core/ipv4/ip4.c **** 
 444:lwIP/src/core/ipv4/ip4.c ****   /* identify the IP header */
 445:lwIP/src/core/ipv4/ip4.c ****   iphdr = (struct ip_hdr *)p->payload;
  92              		.loc 1 445 3 view .LVU18
 427:lwIP/src/core/ipv4/ip4.c ****   const struct ip_hdr *iphdr;
  93              		.loc 1 427 1 is_stmt 0 view .LVU19
  94 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  95              	.LCFI0:
  96              		.cfi_def_cfa_offset 32
  97              		.cfi_offset 3, -32
  98              		.cfi_offset 4, -28
  99              		.cfi_offset 5, -24
 100              		.cfi_offset 6, -20
 101              		.cfi_offset 7, -16
 102              		.cfi_offset 8, -12
 103              		.cfi_offset 9, -8
 104              		.cfi_offset 14, -4
 105              		.loc 1 445 9 view .LVU20
 106 0004 4768     		ldr	r7, [r0, #4]
 107              	.LVL3:
 446:lwIP/src/core/ipv4/ip4.c ****   if (IPH_V(iphdr) != 4) {
 108              		.loc 1 446 3 is_stmt 1 view .LVU21
 427:lwIP/src/core/ipv4/ip4.c ****   const struct ip_hdr *iphdr;
 109              		.loc 1 427 1 is_stmt 0 view .LVU22
 110 0006 0446     		mov	r4, r0
 111              		.loc 1 446 7 view .LVU23
 112 0008 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 113              		.loc 1 446 6 view .LVU24
 114 000a 1A09     		lsrs	r2, r3, #4
 115 000c 042A     		cmp	r2, #4
 116 000e 13D1     		bne	.L16
 447:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"
 448:lwIP/src/core/ipv4/ip4.c ****     ip4_debug_print(p);
 449:lwIP/src/core/ipv4/ip4.c ****     pbuf_free(p);
 450:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.err);
 451:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.drop);
 452:lwIP/src/core/ipv4/ip4.c ****     MIB2_STATS_INC(mib2.ipinhdrerrors);
 453:lwIP/src/core/ipv4/ip4.c ****     return ERR_OK;
 454:lwIP/src/core/ipv4/ip4.c ****   }
 455:lwIP/src/core/ipv4/ip4.c **** 
ARM GAS  /tmp/ccjJALFP.s 			page 11


 456:lwIP/src/core/ipv4/ip4.c **** #ifdef LWIP_HOOK_IP4_INPUT
 457:lwIP/src/core/ipv4/ip4.c ****   if (LWIP_HOOK_IP4_INPUT(p, inp)) {
 458:lwIP/src/core/ipv4/ip4.c ****     /* the packet has been eaten */
 459:lwIP/src/core/ipv4/ip4.c ****     return ERR_OK;
 460:lwIP/src/core/ipv4/ip4.c ****   }
 461:lwIP/src/core/ipv4/ip4.c **** #endif
 462:lwIP/src/core/ipv4/ip4.c **** 
 463:lwIP/src/core/ipv4/ip4.c ****   /* obtain IP header length in bytes */
 464:lwIP/src/core/ipv4/ip4.c ****   iphdr_hlen = IPH_HL_BYTES(iphdr);
 117              		.loc 1 464 3 is_stmt 1 view .LVU25
 465:lwIP/src/core/ipv4/ip4.c ****   /* obtain ip length in bytes */
 466:lwIP/src/core/ipv4/ip4.c ****   iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 118              		.loc 1 466 15 is_stmt 0 view .LVU26
 119 0010 7E88     		ldrh	r6, [r7, #2]	@ unaligned
 464:lwIP/src/core/ipv4/ip4.c ****   /* obtain ip length in bytes */
 120              		.loc 1 464 16 view .LVU27
 121 0012 03F00F03 		and	r3, r3, #15
 467:lwIP/src/core/ipv4/ip4.c **** 
 468:lwIP/src/core/ipv4/ip4.c ****   /* Trim pbuf. This is especially required for packets < 60 bytes. */
 469:lwIP/src/core/ipv4/ip4.c ****   if (iphdr_len < p->tot_len) {
 122              		.loc 1 469 6 view .LVU28
 123 0016 0289     		ldrh	r2, [r0, #8]
 124 0018 8846     		mov	r8, r1
 125              	.LBB24:
 126              	.LBB25:
 127              		.file 2 "STM32_XPD/CMSIS/Include/cmsis_gcc.h"
   1:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /*
   8:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  10:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  12:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  16:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  *
  18:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
  24:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  25:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  28:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
ARM GAS  /tmp/ccjJALFP.s 			page 12


  32:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  34:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  38:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
  39:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  43:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  46:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  49:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  55:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  58:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  61:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  64:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  67:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  70:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  78:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  86:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccjJALFP.s 			page 13


  89:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
  94:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 102:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 110:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 113:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 116:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 117:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 118:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   @{
 122:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 123:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 124:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 125:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 129:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 131:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 133:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 134:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 135:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 136:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 140:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 142:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 144:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 145:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjJALFP.s 			page 14


 146:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 147:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 151:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 153:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 155:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 158:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 159:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 160:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 162:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 166:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 168:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 170:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 173:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 174:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 175:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 176:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 177:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 181:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 183:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 185:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 186:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 187:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 189:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 193:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 195:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 197:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 198:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 199:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 200:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 201:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
ARM GAS  /tmp/ccjJALFP.s 			page 15


 203:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 205:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 207:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 209:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 212:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 213:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 214:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 215:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 219:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 221:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 223:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 226:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 227:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 228:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 229:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 233:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 235:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 237:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 240:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 241:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 242:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 243:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 247:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 249:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 251:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 254:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 255:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 256:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 258:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
ARM GAS  /tmp/ccjJALFP.s 			page 16


 260:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 262:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 264:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 266:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 269:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 270:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 271:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 272:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 273:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 277:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 279:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 281:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 282:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 283:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 285:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 289:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 291:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 293:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 294:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 295:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 296:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 297:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 301:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 303:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 305:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 308:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 309:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 310:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 312:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 316:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
ARM GAS  /tmp/ccjJALFP.s 			page 17


 317:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 318:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 320:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 323:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 324:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 325:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 326:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 327:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 331:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 333:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 335:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 336:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 337:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 339:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 343:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 345:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 347:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 348:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 349:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 350:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 352:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 356:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 358:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 360:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 363:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 364:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 365:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 366:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 370:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 372:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccjJALFP.s 			page 18


 374:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 375:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 376:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 377:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 378:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 382:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 384:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 386:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 389:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 390:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 391:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 393:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 397:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 399:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 401:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 404:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 405:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 406:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 407:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 408:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 412:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 414:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 416:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 417:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 418:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 420:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 424:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 426:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 428:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 429:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 430:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjJALFP.s 			page 19


 431:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 435:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 439:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 441:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 443:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 444:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 445:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 446:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 450:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 452:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 454:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 455:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 456:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 457:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 461:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 463:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 465:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 468:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 469:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 470:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 472:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 476:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 478:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 480:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 483:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 484:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 485:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 486:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 487:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
ARM GAS  /tmp/ccjJALFP.s 			page 20


 488:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 491:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 493:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 495:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 496:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 497:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 499:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 503:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 505:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 507:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 508:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 509:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 510:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 511:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 516:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 518:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 520:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 521:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 522:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 523:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 527:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 529:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 531:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 534:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 535:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 536:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 538:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 542:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 544:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
ARM GAS  /tmp/ccjJALFP.s 			page 21


 545:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 546:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 549:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 550:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 551:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 552:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 553:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 557:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 559:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 561:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 562:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 563:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 565:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 569:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 571:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 573:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 574:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 575:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 579:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 580:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 583:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 584:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   
 589:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 592:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 594:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 599:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
ARM GAS  /tmp/ccjJALFP.s 			page 22


 602:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 603:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 604:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 605:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 607:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 611:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 614:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 616:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 620:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 624:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 625:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 626:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 627:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 628:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 629:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   
 634:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 637:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 639:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 644:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 646:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 647:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 648:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 649:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 651:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 655:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 658:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
ARM GAS  /tmp/ccjJALFP.s 			page 23


 659:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 660:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 664:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 666:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 667:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 668:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 669:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 670:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 671:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 676:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 679:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 681:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 686:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 690:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 691:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 692:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 693:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 695:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 699:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 702:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 704:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 708:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 712:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 713:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 714:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 715:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccjJALFP.s 			page 24


 716:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 717:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 722:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 725:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 727:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 732:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 734:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 735:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 736:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 737:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 739:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 743:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 746:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 748:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 752:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 754:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 755:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 756:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 757:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 760:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 761:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 762:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 766:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 768:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
ARM GAS  /tmp/ccjJALFP.s 			page 25


 773:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 776:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 778:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 781:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 782:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 784:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 785:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 786:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 787:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 788:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 792:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 794:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 802:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 804:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 805:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 807:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 808:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 809:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 810:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 812:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 813:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   @{
 817:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** */
 818:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 819:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 827:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
ARM GAS  /tmp/ccjJALFP.s 			page 26


 830:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 831:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 832:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 833:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 836:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 838:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 839:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 842:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 844:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 845:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 846:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 850:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 852:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 853:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 854:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 857:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 859:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 860:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 861:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 866:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 868:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 870:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 871:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 872:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 873:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 877:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 879:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 881:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 882:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 883:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 884:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
ARM GAS  /tmp/ccjJALFP.s 			page 27


 887:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 888:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 890:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 892:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 893:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 894:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 895:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 900:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 902:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #else
 905:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 907:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #endif
 910:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 911:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 912:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 913:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 914:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 919:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 921:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 923:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** }
 926:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 927:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** 
 928:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** /**
 929:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****  */
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 936:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:STM32_XPD/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 128              		.loc 2 937 19 view .LVU29
 129 001a 76BA     		rev16	r6, r6
 130              	.LBE25:
 131              	.LBE24:
 464:lwIP/src/core/ipv4/ip4.c ****   /* obtain ip length in bytes */
 132              		.loc 1 464 16 view .LVU30
ARM GAS  /tmp/ccjJALFP.s 			page 28


 133 001c 4FEA8309 		lsl	r9, r3, #2
 134              	.LBB28:
 135              	.LBB26:
 136              		.loc 2 937 19 view .LVU31
 137 0020 B6B2     		uxth	r6, r6
 138              	.LBE26:
 139              	.LBE28:
 464:lwIP/src/core/ipv4/ip4.c ****   /* obtain ip length in bytes */
 140              		.loc 1 464 14 view .LVU32
 141 0022 4D46     		mov	r5, r9
 142              	.LVL4:
 466:lwIP/src/core/ipv4/ip4.c **** 
 143              		.loc 1 466 3 is_stmt 1 view .LVU33
 144              	.LBB29:
 145              	.LBI24:
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 146              		.loc 2 934 30 view .LVU34
 147              	.LBB27:
 148              		.loc 2 937 3 view .LVU35
 149              		.loc 2 937 3 is_stmt 0 view .LVU36
 150              	.LBE27:
 151              	.LBE29:
 152              		.loc 1 469 3 is_stmt 1 view .LVU37
 153              		.loc 1 469 6 is_stmt 0 view .LVU38
 154 0024 B242     		cmp	r2, r6
 155 0026 0DD8     		bhi	.L62
 156              	.LVL5:
 157              	.L14:
 470:lwIP/src/core/ipv4/ip4.c ****     pbuf_realloc(p, iphdr_len);
 471:lwIP/src/core/ipv4/ip4.c ****   }
 472:lwIP/src/core/ipv4/ip4.c **** 
 473:lwIP/src/core/ipv4/ip4.c ****   /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
 474:lwIP/src/core/ipv4/ip4.c ****   if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 158              		.loc 1 474 3 is_stmt 1 view .LVU39
 159              		.loc 1 474 6 is_stmt 0 view .LVU40
 160 0028 6389     		ldrh	r3, [r4, #10]
 161 002a AB42     		cmp	r3, r5
 162 002c 04D3     		bcc	.L16
 163              		.loc 1 474 29 discriminator 1 view .LVU41
 164 002e 2389     		ldrh	r3, [r4, #8]
 165              		.loc 1 474 57 discriminator 1 view .LVU42
 166 0030 B342     		cmp	r3, r6
 167 0032 01D3     		bcc	.L16
 168 0034 132D     		cmp	r5, #19
 169 0036 09D8     		bhi	.L63
 170              	.LVL6:
 171              	.L16:
 447:lwIP/src/core/ipv4/ip4.c ****     ip4_debug_print(p);
 172              		.loc 1 447 132 is_stmt 1 view .LVU43
 448:lwIP/src/core/ipv4/ip4.c ****     pbuf_free(p);
 173              		.loc 1 448 23 view .LVU44
 449:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.err);
 174              		.loc 1 449 5 view .LVU45
 175 0038 2046     		mov	r0, r4
 176 003a FFF7FEFF 		bl	pbuf_free
 177              	.LVL7:
 450:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.drop);
ARM GAS  /tmp/ccjJALFP.s 			page 29


 178              		.loc 1 450 25 view .LVU46
 451:lwIP/src/core/ipv4/ip4.c ****     MIB2_STATS_INC(mib2.ipinhdrerrors);
 179              		.loc 1 451 26 view .LVU47
 452:lwIP/src/core/ipv4/ip4.c ****     return ERR_OK;
 180              		.loc 1 452 39 view .LVU48
 453:lwIP/src/core/ipv4/ip4.c ****   }
 181              		.loc 1 453 5 view .LVU49
 182              	.L50:
 475:lwIP/src/core/ipv4/ip4.c ****     if (iphdr_hlen < IP_HLEN) {
 476:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 477:lwIP/src/core/ipv4/ip4.c ****                   ("ip4_input: short IP header (%"U16_F" bytes) received, IP packet dropped\n", iph
 478:lwIP/src/core/ipv4/ip4.c ****     }
 479:lwIP/src/core/ipv4/ip4.c ****     if (iphdr_hlen > p->len) {
 480:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 481:lwIP/src/core/ipv4/ip4.c ****                   ("IP header (len %"U16_F") does not fit in first pbuf (len %"U16_F"), IP packet d
 482:lwIP/src/core/ipv4/ip4.c ****                    iphdr_hlen, p->len));
 483:lwIP/src/core/ipv4/ip4.c ****     }
 484:lwIP/src/core/ipv4/ip4.c ****     if (iphdr_len > p->tot_len) {
 485:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 486:lwIP/src/core/ipv4/ip4.c ****                   ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
 487:lwIP/src/core/ipv4/ip4.c ****                    iphdr_len, p->tot_len));
 488:lwIP/src/core/ipv4/ip4.c ****     }
 489:lwIP/src/core/ipv4/ip4.c ****     /* free (drop) packet pbufs */
 490:lwIP/src/core/ipv4/ip4.c ****     pbuf_free(p);
 491:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.lenerr);
 492:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.drop);
 493:lwIP/src/core/ipv4/ip4.c ****     MIB2_STATS_INC(mib2.ipindiscards);
 494:lwIP/src/core/ipv4/ip4.c ****     return ERR_OK;
 495:lwIP/src/core/ipv4/ip4.c ****   }
 496:lwIP/src/core/ipv4/ip4.c **** 
 497:lwIP/src/core/ipv4/ip4.c ****   /* verify checksum */
 498:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_CHECK_IP
 499:lwIP/src/core/ipv4/ip4.c ****   IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_IP) {
 500:lwIP/src/core/ipv4/ip4.c ****     if (inet_chksum(iphdr, iphdr_hlen) != 0) {
 501:lwIP/src/core/ipv4/ip4.c **** 
 502:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
 503:lwIP/src/core/ipv4/ip4.c ****                   ("Checksum (0x%"X16_F") failed, IP packet dropped.\n", inet_chksum(iphdr, iphdr_h
 504:lwIP/src/core/ipv4/ip4.c ****       ip4_debug_print(p);
 505:lwIP/src/core/ipv4/ip4.c ****       pbuf_free(p);
 506:lwIP/src/core/ipv4/ip4.c ****       IP_STATS_INC(ip.chkerr);
 507:lwIP/src/core/ipv4/ip4.c ****       IP_STATS_INC(ip.drop);
 508:lwIP/src/core/ipv4/ip4.c ****       MIB2_STATS_INC(mib2.ipinhdrerrors);
 509:lwIP/src/core/ipv4/ip4.c ****       return ERR_OK;
 510:lwIP/src/core/ipv4/ip4.c ****     }
 511:lwIP/src/core/ipv4/ip4.c ****   }
 512:lwIP/src/core/ipv4/ip4.c **** #endif
 513:lwIP/src/core/ipv4/ip4.c **** 
 514:lwIP/src/core/ipv4/ip4.c ****   /* copy IP addresses to aligned ip_addr_t */
 515:lwIP/src/core/ipv4/ip4.c ****   ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 516:lwIP/src/core/ipv4/ip4.c ****   ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 517:lwIP/src/core/ipv4/ip4.c **** 
 518:lwIP/src/core/ipv4/ip4.c ****   /* match packet against an interface, i.e. is this packet for us? */
 519:lwIP/src/core/ipv4/ip4.c ****   if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 520:lwIP/src/core/ipv4/ip4.c **** #if LWIP_IGMP
 521:lwIP/src/core/ipv4/ip4.c ****     if ((inp->flags & NETIF_FLAG_IGMP) && (igmp_lookfor_group(inp, ip4_current_dest_addr()))) {
 522:lwIP/src/core/ipv4/ip4.c ****       /* IGMP snooping switches need 0.0.0.0 to be allowed as source address (RFC 4541) */
 523:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_t allsystems;
ARM GAS  /tmp/ccjJALFP.s 			page 30


 524:lwIP/src/core/ipv4/ip4.c ****       IP4_ADDR(&allsystems, 224, 0, 0, 1);
 525:lwIP/src/core/ipv4/ip4.c ****       if (ip4_addr_cmp(ip4_current_dest_addr(), &allsystems) &&
 526:lwIP/src/core/ipv4/ip4.c ****           ip4_addr_isany(ip4_current_src_addr())) {
 527:lwIP/src/core/ipv4/ip4.c ****         check_ip_src = 0;
 528:lwIP/src/core/ipv4/ip4.c ****       }
 529:lwIP/src/core/ipv4/ip4.c ****       netif = inp;
 530:lwIP/src/core/ipv4/ip4.c ****     } else {
 531:lwIP/src/core/ipv4/ip4.c ****       netif = NULL;
 532:lwIP/src/core/ipv4/ip4.c ****     }
 533:lwIP/src/core/ipv4/ip4.c **** #else /* LWIP_IGMP */
 534:lwIP/src/core/ipv4/ip4.c ****     if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 535:lwIP/src/core/ipv4/ip4.c ****       netif = inp;
 536:lwIP/src/core/ipv4/ip4.c ****     } else {
 537:lwIP/src/core/ipv4/ip4.c ****       netif = NULL;
 538:lwIP/src/core/ipv4/ip4.c ****     }
 539:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_IGMP */
 540:lwIP/src/core/ipv4/ip4.c ****   } else {
 541:lwIP/src/core/ipv4/ip4.c ****     /* start trying with inp. if that's not acceptable, start walking the
 542:lwIP/src/core/ipv4/ip4.c ****        list of configured netifs. */
 543:lwIP/src/core/ipv4/ip4.c ****     if (ip4_input_accept(inp)) {
 544:lwIP/src/core/ipv4/ip4.c ****       netif = inp;
 545:lwIP/src/core/ipv4/ip4.c ****     } else {
 546:lwIP/src/core/ipv4/ip4.c ****       netif = NULL;
 547:lwIP/src/core/ipv4/ip4.c **** #if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
 548:lwIP/src/core/ipv4/ip4.c ****       /* Packets sent to the loopback address must not be accepted on an
 549:lwIP/src/core/ipv4/ip4.c ****        * interface that does not have the loopback address assigned to it,
 550:lwIP/src/core/ipv4/ip4.c ****        * unless a non-loopback interface is used for loopback traffic. */
 551:lwIP/src/core/ipv4/ip4.c ****       if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 552:lwIP/src/core/ipv4/ip4.c **** #endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
 553:lwIP/src/core/ipv4/ip4.c ****       {
 554:lwIP/src/core/ipv4/ip4.c **** #if !LWIP_SINGLE_NETIF
 555:lwIP/src/core/ipv4/ip4.c ****         NETIF_FOREACH(netif) {
 556:lwIP/src/core/ipv4/ip4.c ****           if (netif == inp) {
 557:lwIP/src/core/ipv4/ip4.c ****             /* we checked that before already */
 558:lwIP/src/core/ipv4/ip4.c ****             continue;
 559:lwIP/src/core/ipv4/ip4.c ****           }
 560:lwIP/src/core/ipv4/ip4.c ****           if (ip4_input_accept(netif)) {
 561:lwIP/src/core/ipv4/ip4.c ****             break;
 562:lwIP/src/core/ipv4/ip4.c ****           }
 563:lwIP/src/core/ipv4/ip4.c ****         }
 564:lwIP/src/core/ipv4/ip4.c **** #endif /* !LWIP_SINGLE_NETIF */
 565:lwIP/src/core/ipv4/ip4.c ****       }
 566:lwIP/src/core/ipv4/ip4.c ****     }
 567:lwIP/src/core/ipv4/ip4.c ****   }
 568:lwIP/src/core/ipv4/ip4.c **** 
 569:lwIP/src/core/ipv4/ip4.c **** #if IP_ACCEPT_LINK_LAYER_ADDRESSING
 570:lwIP/src/core/ipv4/ip4.c ****   /* Pass DHCP messages regardless of destination address. DHCP traffic is addressed
 571:lwIP/src/core/ipv4/ip4.c ****    * using link layer addressing (such as Ethernet MAC) so we must not filter on IP.
 572:lwIP/src/core/ipv4/ip4.c ****    * According to RFC 1542 section 3.1.1, referred by RFC 2131).
 573:lwIP/src/core/ipv4/ip4.c ****    *
 574:lwIP/src/core/ipv4/ip4.c ****    * If you want to accept private broadcast communication while a netif is down,
 575:lwIP/src/core/ipv4/ip4.c ****    * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
 576:lwIP/src/core/ipv4/ip4.c ****    *
 577:lwIP/src/core/ipv4/ip4.c ****    * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
 578:lwIP/src/core/ipv4/ip4.c ****    */
 579:lwIP/src/core/ipv4/ip4.c ****   if (netif == NULL) {
 580:lwIP/src/core/ipv4/ip4.c ****     /* remote port is DHCP server? */
ARM GAS  /tmp/ccjJALFP.s 			page 31


 581:lwIP/src/core/ipv4/ip4.c ****     if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 582:lwIP/src/core/ipv4/ip4.c ****       const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 583:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n
 584:lwIP/src/core/ipv4/ip4.c ****                                               lwip_ntohs(udphdr->dest)));
 585:lwIP/src/core/ipv4/ip4.c ****       if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 586:lwIP/src/core/ipv4/ip4.c ****         LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
 587:lwIP/src/core/ipv4/ip4.c ****         netif = inp;
 588:lwIP/src/core/ipv4/ip4.c ****         check_ip_src = 0;
 589:lwIP/src/core/ipv4/ip4.c ****       }
 590:lwIP/src/core/ipv4/ip4.c ****     }
 591:lwIP/src/core/ipv4/ip4.c ****   }
 592:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
 593:lwIP/src/core/ipv4/ip4.c **** 
 594:lwIP/src/core/ipv4/ip4.c ****   /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
 595:lwIP/src/core/ipv4/ip4.c **** #if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
 596:lwIP/src/core/ipv4/ip4.c ****   if (check_ip_src
 597:lwIP/src/core/ipv4/ip4.c **** #if IP_ACCEPT_LINK_LAYER_ADDRESSING
 598:lwIP/src/core/ipv4/ip4.c ****       /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
 599:lwIP/src/core/ipv4/ip4.c ****       && !ip4_addr_isany_val(*ip4_current_src_addr())
 600:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
 601:lwIP/src/core/ipv4/ip4.c ****      )
 602:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
 603:lwIP/src/core/ipv4/ip4.c ****   {
 604:lwIP/src/core/ipv4/ip4.c ****     if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 605:lwIP/src/core/ipv4/ip4.c ****         (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 606:lwIP/src/core/ipv4/ip4.c ****       /* packet source is not valid */
 607:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is
 608:lwIP/src/core/ipv4/ip4.c ****       /* free (drop) packet pbufs */
 609:lwIP/src/core/ipv4/ip4.c ****       pbuf_free(p);
 610:lwIP/src/core/ipv4/ip4.c ****       IP_STATS_INC(ip.drop);
 611:lwIP/src/core/ipv4/ip4.c ****       MIB2_STATS_INC(mib2.ipinaddrerrors);
 612:lwIP/src/core/ipv4/ip4.c ****       MIB2_STATS_INC(mib2.ipindiscards);
 613:lwIP/src/core/ipv4/ip4.c ****       return ERR_OK;
 614:lwIP/src/core/ipv4/ip4.c ****     }
 615:lwIP/src/core/ipv4/ip4.c ****   }
 616:lwIP/src/core/ipv4/ip4.c **** 
 617:lwIP/src/core/ipv4/ip4.c ****   /* packet not for us? */
 618:lwIP/src/core/ipv4/ip4.c ****   if (netif == NULL) {
 619:lwIP/src/core/ipv4/ip4.c ****     /* packet not for us, route or discard */
 620:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: packet not for us.\n"));
 621:lwIP/src/core/ipv4/ip4.c **** #if IP_FORWARD
 622:lwIP/src/core/ipv4/ip4.c ****     /* non-broadcast packet? */
 623:lwIP/src/core/ipv4/ip4.c ****     if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), inp)) {
 624:lwIP/src/core/ipv4/ip4.c ****       /* try to forward IP packet on (other) interfaces */
 625:lwIP/src/core/ipv4/ip4.c ****       ip4_forward(p, (struct ip_hdr *)p->payload, inp);
 626:lwIP/src/core/ipv4/ip4.c ****     } else
 627:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_FORWARD */
 628:lwIP/src/core/ipv4/ip4.c ****     {
 629:lwIP/src/core/ipv4/ip4.c ****       IP_STATS_INC(ip.drop);
 630:lwIP/src/core/ipv4/ip4.c ****       MIB2_STATS_INC(mib2.ipinaddrerrors);
 631:lwIP/src/core/ipv4/ip4.c ****       MIB2_STATS_INC(mib2.ipindiscards);
 632:lwIP/src/core/ipv4/ip4.c ****     }
 633:lwIP/src/core/ipv4/ip4.c ****     pbuf_free(p);
 634:lwIP/src/core/ipv4/ip4.c ****     return ERR_OK;
 635:lwIP/src/core/ipv4/ip4.c ****   }
 636:lwIP/src/core/ipv4/ip4.c ****   /* packet consists of multiple fragments? */
 637:lwIP/src/core/ipv4/ip4.c ****   if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
ARM GAS  /tmp/ccjJALFP.s 			page 32


 638:lwIP/src/core/ipv4/ip4.c **** #if IP_REASSEMBLY /* packet fragment reassembly code present? */
 639:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" 
 640:lwIP/src/core/ipv4/ip4.c ****                            lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_
 641:lwIP/src/core/ipv4/ip4.c ****     /* reassemble the packet*/
 642:lwIP/src/core/ipv4/ip4.c ****     p = ip4_reass(p);
 643:lwIP/src/core/ipv4/ip4.c ****     /* packet not fully reassembled yet? */
 644:lwIP/src/core/ipv4/ip4.c ****     if (p == NULL) {
 645:lwIP/src/core/ipv4/ip4.c ****       return ERR_OK;
 646:lwIP/src/core/ipv4/ip4.c ****     }
 647:lwIP/src/core/ipv4/ip4.c ****     iphdr = (const struct ip_hdr *)p->payload;
 648:lwIP/src/core/ipv4/ip4.c **** #else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
 649:lwIP/src/core/ipv4/ip4.c ****     pbuf_free(p);
 650:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since it was fragmented (0x%
 651:lwIP/src/core/ipv4/ip4.c ****                 lwip_ntohs(IPH_OFFSET(iphdr))));
 652:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.opterr);
 653:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.drop);
 654:lwIP/src/core/ipv4/ip4.c ****     /* unsupported protocol feature */
 655:lwIP/src/core/ipv4/ip4.c ****     MIB2_STATS_INC(mib2.ipinunknownprotos);
 656:lwIP/src/core/ipv4/ip4.c ****     return ERR_OK;
 657:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_REASSEMBLY */
 658:lwIP/src/core/ipv4/ip4.c ****   }
 659:lwIP/src/core/ipv4/ip4.c **** 
 660:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_ALLOWED == 0 /* no support for IP options in the IP header? */
 661:lwIP/src/core/ipv4/ip4.c **** 
 662:lwIP/src/core/ipv4/ip4.c **** #if LWIP_IGMP
 663:lwIP/src/core/ipv4/ip4.c ****   /* there is an extra "router alert" option in IGMP messages which we allow for but do not police 
 664:lwIP/src/core/ipv4/ip4.c ****   if ((iphdr_hlen > IP_HLEN) &&  (IPH_PROTO(iphdr) != IP_PROTO_IGMP)) {
 665:lwIP/src/core/ipv4/ip4.c **** #else
 666:lwIP/src/core/ipv4/ip4.c ****   if (iphdr_hlen > IP_HLEN) {
 667:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_IGMP */
 668:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("IP packet dropped since there were IP options 
 669:lwIP/src/core/ipv4/ip4.c ****     pbuf_free(p);
 670:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.opterr);
 671:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.drop);
 672:lwIP/src/core/ipv4/ip4.c ****     /* unsupported protocol feature */
 673:lwIP/src/core/ipv4/ip4.c ****     MIB2_STATS_INC(mib2.ipinunknownprotos);
 674:lwIP/src/core/ipv4/ip4.c ****     return ERR_OK;
 675:lwIP/src/core/ipv4/ip4.c ****   }
 676:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_OPTIONS_ALLOWED == 0 */
 677:lwIP/src/core/ipv4/ip4.c **** 
 678:lwIP/src/core/ipv4/ip4.c ****   /* send to upper layers */
 679:lwIP/src/core/ipv4/ip4.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
 680:lwIP/src/core/ipv4/ip4.c ****   ip4_debug_print(p);
 681:lwIP/src/core/ipv4/ip4.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 682:lwIP/src/core/ipv4/ip4.c **** 
 683:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_netif = netif;
 684:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_input_netif = inp;
 685:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip4_header = iphdr;
 686:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 687:lwIP/src/core/ipv4/ip4.c **** 
 688:lwIP/src/core/ipv4/ip4.c **** #if LWIP_RAW
 689:lwIP/src/core/ipv4/ip4.c ****   /* raw input did not eat the packet? */
 690:lwIP/src/core/ipv4/ip4.c ****   raw_status = raw_input(p, inp);
 691:lwIP/src/core/ipv4/ip4.c ****   if (raw_status != RAW_INPUT_EATEN)
 692:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_RAW */
 693:lwIP/src/core/ipv4/ip4.c ****   {
 694:lwIP/src/core/ipv4/ip4.c ****     pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
ARM GAS  /tmp/ccjJALFP.s 			page 33


 695:lwIP/src/core/ipv4/ip4.c **** 
 696:lwIP/src/core/ipv4/ip4.c ****     switch (IPH_PROTO(iphdr)) {
 697:lwIP/src/core/ipv4/ip4.c **** #if LWIP_UDP
 698:lwIP/src/core/ipv4/ip4.c ****       case IP_PROTO_UDP:
 699:lwIP/src/core/ipv4/ip4.c **** #if LWIP_UDPLITE
 700:lwIP/src/core/ipv4/ip4.c ****       case IP_PROTO_UDPLITE:
 701:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_UDPLITE */
 702:lwIP/src/core/ipv4/ip4.c ****         MIB2_STATS_INC(mib2.ipindelivers);
 703:lwIP/src/core/ipv4/ip4.c ****         udp_input(p, inp);
 704:lwIP/src/core/ipv4/ip4.c ****         break;
 705:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_UDP */
 706:lwIP/src/core/ipv4/ip4.c **** #if LWIP_TCP
 707:lwIP/src/core/ipv4/ip4.c ****       case IP_PROTO_TCP:
 708:lwIP/src/core/ipv4/ip4.c ****         MIB2_STATS_INC(mib2.ipindelivers);
 709:lwIP/src/core/ipv4/ip4.c ****         tcp_input(p, inp);
 710:lwIP/src/core/ipv4/ip4.c ****         break;
 711:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_TCP */
 712:lwIP/src/core/ipv4/ip4.c **** #if LWIP_ICMP
 713:lwIP/src/core/ipv4/ip4.c ****       case IP_PROTO_ICMP:
 714:lwIP/src/core/ipv4/ip4.c ****         MIB2_STATS_INC(mib2.ipindelivers);
 715:lwIP/src/core/ipv4/ip4.c ****         icmp_input(p, inp);
 716:lwIP/src/core/ipv4/ip4.c ****         break;
 717:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_ICMP */
 718:lwIP/src/core/ipv4/ip4.c **** #if LWIP_IGMP
 719:lwIP/src/core/ipv4/ip4.c ****       case IP_PROTO_IGMP:
 720:lwIP/src/core/ipv4/ip4.c ****         igmp_input(p, inp, ip4_current_dest_addr());
 721:lwIP/src/core/ipv4/ip4.c ****         break;
 722:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_IGMP */
 723:lwIP/src/core/ipv4/ip4.c ****       default:
 724:lwIP/src/core/ipv4/ip4.c **** #if LWIP_RAW
 725:lwIP/src/core/ipv4/ip4.c ****         if (raw_status == RAW_INPUT_DELIVERED) {
 726:lwIP/src/core/ipv4/ip4.c ****           MIB2_STATS_INC(mib2.ipindelivers);
 727:lwIP/src/core/ipv4/ip4.c ****         } else
 728:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_RAW */
 729:lwIP/src/core/ipv4/ip4.c ****         {
 730:lwIP/src/core/ipv4/ip4.c **** #if LWIP_ICMP
 731:lwIP/src/core/ipv4/ip4.c ****           /* send ICMP destination protocol unreachable unless is was a broadcast */
 732:lwIP/src/core/ipv4/ip4.c ****           if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 733:lwIP/src/core/ipv4/ip4.c ****               !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 734:lwIP/src/core/ipv4/ip4.c ****             pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 735:lwIP/src/core/ipv4/ip4.c ****             icmp_dest_unreach(p, ICMP_DUR_PROTO);
 736:lwIP/src/core/ipv4/ip4.c ****           }
 737:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_ICMP */
 738:lwIP/src/core/ipv4/ip4.c **** 
 739:lwIP/src/core/ipv4/ip4.c ****           LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Unsupported transport protocol %"U16_F"\
 740:lwIP/src/core/ipv4/ip4.c **** 
 741:lwIP/src/core/ipv4/ip4.c ****           IP_STATS_INC(ip.proterr);
 742:lwIP/src/core/ipv4/ip4.c ****           IP_STATS_INC(ip.drop);
 743:lwIP/src/core/ipv4/ip4.c ****           MIB2_STATS_INC(mib2.ipinunknownprotos);
 744:lwIP/src/core/ipv4/ip4.c ****         }
 745:lwIP/src/core/ipv4/ip4.c ****         pbuf_free(p);
 746:lwIP/src/core/ipv4/ip4.c ****         break;
 747:lwIP/src/core/ipv4/ip4.c ****     }
 748:lwIP/src/core/ipv4/ip4.c ****   }
 749:lwIP/src/core/ipv4/ip4.c **** 
 750:lwIP/src/core/ipv4/ip4.c ****   /* @todo: this is not really necessary... */
 751:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_netif = NULL;
ARM GAS  /tmp/ccjJALFP.s 			page 34


 752:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_input_netif = NULL;
 753:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip4_header = NULL;
 754:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip_header_tot_len = 0;
 755:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_set_any(ip4_current_src_addr());
 756:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_set_any(ip4_current_dest_addr());
 757:lwIP/src/core/ipv4/ip4.c **** 
 758:lwIP/src/core/ipv4/ip4.c ****   return ERR_OK;
 759:lwIP/src/core/ipv4/ip4.c **** }
 183              		.loc 1 759 1 is_stmt 0 view .LVU50
 184 003e 0020     		movs	r0, #0
 185 0040 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 186              	.LVL8:
 187              	.L62:
 470:lwIP/src/core/ipv4/ip4.c ****   }
 188              		.loc 1 470 5 is_stmt 1 view .LVU51
 189 0044 3146     		mov	r1, r6
 190              	.LVL9:
 470:lwIP/src/core/ipv4/ip4.c ****   }
 191              		.loc 1 470 5 is_stmt 0 view .LVU52
 192 0046 FFF7FEFF 		bl	pbuf_realloc
 193              	.LVL10:
 470:lwIP/src/core/ipv4/ip4.c ****   }
 194              		.loc 1 470 5 view .LVU53
 195 004a EDE7     		b	.L14
 196              	.L63:
 500:lwIP/src/core/ipv4/ip4.c **** 
 197              		.loc 1 500 5 is_stmt 1 view .LVU54
 500:lwIP/src/core/ipv4/ip4.c **** 
 198              		.loc 1 500 9 is_stmt 0 view .LVU55
 199 004c 2946     		mov	r1, r5
 200 004e 3846     		mov	r0, r7
 201 0050 FFF7FEFF 		bl	inet_chksum
 202              	.LVL11:
 500:lwIP/src/core/ipv4/ip4.c **** 
 203              		.loc 1 500 8 view .LVU56
 204 0054 0028     		cmp	r0, #0
 205 0056 EFD1     		bne	.L16
 515:lwIP/src/core/ipv4/ip4.c ****   ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 206              		.loc 1 515 3 is_stmt 1 view .LVU57
 207 0058 3A69     		ldr	r2, [r7, #16]	@ unaligned
 208 005a 404D     		ldr	r5, .L67
 519:lwIP/src/core/ipv4/ip4.c **** #if LWIP_IGMP
 209              		.loc 1 519 7 is_stmt 0 view .LVU58
 210 005c 02F0F001 		and	r1, r2, #240
 211 0060 98F82530 		ldrb	r3, [r8, #37]	@ zero_extendqisi2
 515:lwIP/src/core/ipv4/ip4.c ****   ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 212              		.loc 1 515 3 view .LVU59
 213 0064 6A61     		str	r2, [r5, #20]
 516:lwIP/src/core/ipv4/ip4.c **** 
 214              		.loc 1 516 3 is_stmt 1 view .LVU60
 519:lwIP/src/core/ipv4/ip4.c **** #if LWIP_IGMP
 215              		.loc 1 519 6 is_stmt 0 view .LVU61
 216 0066 E029     		cmp	r1, #224
 516:lwIP/src/core/ipv4/ip4.c **** 
 217              		.loc 1 516 3 view .LVU62
 218 0068 F868     		ldr	r0, [r7, #12]	@ unaligned
 219 006a 03F00103 		and	r3, r3, #1
ARM GAS  /tmp/ccjJALFP.s 			page 35


 220 006e 2861     		str	r0, [r5, #16]
 519:lwIP/src/core/ipv4/ip4.c **** #if LWIP_IGMP
 221              		.loc 1 519 3 is_stmt 1 view .LVU63
 519:lwIP/src/core/ipv4/ip4.c **** #if LWIP_IGMP
 222              		.loc 1 519 6 is_stmt 0 view .LVU64
 223 0070 4CD1     		bne	.L18
 534:lwIP/src/core/ipv4/ip4.c ****       netif = inp;
 224              		.loc 1 534 5 is_stmt 1 view .LVU65
 534:lwIP/src/core/ipv4/ip4.c ****       netif = inp;
 225              		.loc 1 534 8 is_stmt 0 view .LVU66
 226 0072 002B     		cmp	r3, #0
 227 0074 59D1     		bne	.L64
 228              	.L19:
 581:lwIP/src/core/ipv4/ip4.c ****       const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 229              		.loc 1 581 5 is_stmt 1 view .LVU67
 596:lwIP/src/core/ipv4/ip4.c **** #if IP_ACCEPT_LINK_LAYER_ADDRESSING
 230              		.loc 1 596 3 view .LVU68
 599:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
 231              		.loc 1 599 7 is_stmt 0 view .LVU69
 232 0076 0028     		cmp	r0, #0
 233 0078 DED0     		beq	.L16
 234 007a 0026     		movs	r6, #0
 235              	.L29:
 604:lwIP/src/core/ipv4/ip4.c ****         (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 236              		.loc 1 604 5 is_stmt 1 view .LVU70
 604:lwIP/src/core/ipv4/ip4.c ****         (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 237              		.loc 1 604 10 is_stmt 0 view .LVU71
 238 007c 4146     		mov	r1, r8
 239 007e FFF7FEFF 		bl	ip4_addr_isbroadcast_u32
 240              	.LVL12:
 604:lwIP/src/core/ipv4/ip4.c ****         (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 241              		.loc 1 604 8 view .LVU72
 242 0082 0028     		cmp	r0, #0
 243 0084 D8D1     		bne	.L16
 605:lwIP/src/core/ipv4/ip4.c ****       /* packet source is not valid */
 244              		.loc 1 605 10 discriminator 1 view .LVU73
 245 0086 2B69     		ldr	r3, [r5, #16]
 246 0088 03F0F003 		and	r3, r3, #240
 604:lwIP/src/core/ipv4/ip4.c ****         (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 247              		.loc 1 604 61 discriminator 1 view .LVU74
 248 008c E02B     		cmp	r3, #224
 249 008e D3D0     		beq	.L16
 618:lwIP/src/core/ipv4/ip4.c ****     /* packet not for us, route or discard */
 250              		.loc 1 618 3 is_stmt 1 view .LVU75
 618:lwIP/src/core/ipv4/ip4.c ****     /* packet not for us, route or discard */
 251              		.loc 1 618 6 is_stmt 0 view .LVU76
 252 0090 002E     		cmp	r6, #0
 253 0092 D1D0     		beq	.L16
 254              	.L30:
 637:lwIP/src/core/ipv4/ip4.c **** #if IP_REASSEMBLY /* packet fragment reassembly code present? */
 255              		.loc 1 637 3 is_stmt 1 view .LVU77
 637:lwIP/src/core/ipv4/ip4.c **** #if IP_REASSEMBLY /* packet fragment reassembly code present? */
 256              		.loc 1 637 8 is_stmt 0 view .LVU78
 257 0094 FB88     		ldrh	r3, [r7, #6]	@ unaligned
 637:lwIP/src/core/ipv4/ip4.c **** #if IP_REASSEMBLY /* packet fragment reassembly code present? */
 258              		.loc 1 637 6 view .LVU79
 259 0096 23F0C003 		bic	r3, r3, #192
ARM GAS  /tmp/ccjJALFP.s 			page 36


 260 009a 33B1     		cbz	r3, .L22
 640:lwIP/src/core/ipv4/ip4.c ****     /* reassemble the packet*/
 261              		.loc 1 640 202 is_stmt 1 view .LVU80
 642:lwIP/src/core/ipv4/ip4.c ****     /* packet not fully reassembled yet? */
 262              		.loc 1 642 5 view .LVU81
 642:lwIP/src/core/ipv4/ip4.c ****     /* packet not fully reassembled yet? */
 263              		.loc 1 642 9 is_stmt 0 view .LVU82
 264 009c 2046     		mov	r0, r4
 265 009e FFF7FEFF 		bl	ip4_reass
 266              	.LVL13:
 644:lwIP/src/core/ipv4/ip4.c ****       return ERR_OK;
 267              		.loc 1 644 5 is_stmt 1 view .LVU83
 644:lwIP/src/core/ipv4/ip4.c ****       return ERR_OK;
 268              		.loc 1 644 8 is_stmt 0 view .LVU84
 269 00a2 0446     		mov	r4, r0
 270 00a4 0028     		cmp	r0, #0
 271 00a6 CAD0     		beq	.L50
 647:lwIP/src/core/ipv4/ip4.c **** #else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
 272              		.loc 1 647 5 is_stmt 1 view .LVU85
 647:lwIP/src/core/ipv4/ip4.c **** #else /* IP_REASSEMBLY == 0, no packet fragment reassembly code present */
 273              		.loc 1 647 11 is_stmt 0 view .LVU86
 274 00a8 4768     		ldr	r7, [r0, #4]
 275              	.LVL14:
 276              	.L22:
 679:lwIP/src/core/ipv4/ip4.c ****   ip4_debug_print(p);
 277              		.loc 1 679 43 is_stmt 1 view .LVU87
 680:lwIP/src/core/ipv4/ip4.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));
 278              		.loc 1 680 21 view .LVU88
 681:lwIP/src/core/ipv4/ip4.c **** 
 279              		.loc 1 681 98 view .LVU89
 683:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_input_netif = inp;
 280              		.loc 1 683 3 view .LVU90
 683:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_input_netif = inp;
 281              		.loc 1 683 25 is_stmt 0 view .LVU91
 282 00aa 2E60     		str	r6, [r5]
 684:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip4_header = iphdr;
 283              		.loc 1 684 3 is_stmt 1 view .LVU92
 694:lwIP/src/core/ipv4/ip4.c **** 
 284              		.loc 1 694 5 is_stmt 0 view .LVU93
 285 00ac 4946     		mov	r1, r9
 684:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip4_header = iphdr;
 286              		.loc 1 684 31 view .LVU94
 287 00ae C5F80480 		str	r8, [r5, #4]
 685:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 288              		.loc 1 685 3 is_stmt 1 view .LVU95
 694:lwIP/src/core/ipv4/ip4.c **** 
 289              		.loc 1 694 5 is_stmt 0 view .LVU96
 290 00b2 2046     		mov	r0, r4
 685:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 291              		.loc 1 685 30 view .LVU97
 292 00b4 AF60     		str	r7, [r5, #8]
 686:lwIP/src/core/ipv4/ip4.c **** 
 293              		.loc 1 686 3 is_stmt 1 view .LVU98
 686:lwIP/src/core/ipv4/ip4.c **** 
 294              		.loc 1 686 39 is_stmt 0 view .LVU99
 295 00b6 3B78     		ldrb	r3, [r7]	@ zero_extendqisi2
 296 00b8 03F00F03 		and	r3, r3, #15
ARM GAS  /tmp/ccjJALFP.s 			page 37


 297 00bc 9B00     		lsls	r3, r3, #2
 298 00be AB81     		strh	r3, [r5, #12]	@ movhi
 694:lwIP/src/core/ipv4/ip4.c **** 
 299              		.loc 1 694 5 is_stmt 1 view .LVU100
 300 00c0 FFF7FEFF 		bl	pbuf_remove_header
 301              	.LVL15:
 696:lwIP/src/core/ipv4/ip4.c **** #if LWIP_UDP
 302              		.loc 1 696 5 view .LVU101
 696:lwIP/src/core/ipv4/ip4.c **** #if LWIP_UDP
 303              		.loc 1 696 13 is_stmt 0 view .LVU102
 304 00c4 7B7A     		ldrb	r3, [r7, #9]	@ zero_extendqisi2
 696:lwIP/src/core/ipv4/ip4.c **** #if LWIP_UDP
 305              		.loc 1 696 5 view .LVU103
 306 00c6 062B     		cmp	r3, #6
 307 00c8 41D0     		beq	.L23
 696:lwIP/src/core/ipv4/ip4.c **** #if LWIP_UDP
 308              		.loc 1 696 5 view .LVU104
 309 00ca 112B     		cmp	r3, #17
 310 00cc 3AD0     		beq	.L24
 311 00ce 012B     		cmp	r3, #1
 312 00d0 33D0     		beq	.L65
 732:lwIP/src/core/ipv4/ip4.c ****               !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 313              		.loc 1 732 11 is_stmt 1 view .LVU105
 732:lwIP/src/core/ipv4/ip4.c ****               !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 314              		.loc 1 732 16 is_stmt 0 view .LVU106
 315 00d2 3146     		mov	r1, r6
 316 00d4 6869     		ldr	r0, [r5, #20]
 317 00d6 FFF7FEFF 		bl	ip4_addr_isbroadcast_u32
 318              	.LVL16:
 732:lwIP/src/core/ipv4/ip4.c ****               !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 319              		.loc 1 732 14 view .LVU107
 320 00da 60B9     		cbnz	r0, .L28
 733:lwIP/src/core/ipv4/ip4.c ****             pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 321              		.loc 1 733 16 discriminator 1 view .LVU108
 322 00dc 6B69     		ldr	r3, [r5, #20]
 323 00de 03F0F003 		and	r3, r3, #240
 732:lwIP/src/core/ipv4/ip4.c ****               !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 324              		.loc 1 732 69 discriminator 1 view .LVU109
 325 00e2 E02B     		cmp	r3, #224
 326 00e4 07D0     		beq	.L28
 734:lwIP/src/core/ipv4/ip4.c ****             icmp_dest_unreach(p, ICMP_DUR_PROTO);
 327              		.loc 1 734 13 is_stmt 1 view .LVU110
 328 00e6 4946     		mov	r1, r9
 329 00e8 2046     		mov	r0, r4
 330 00ea FFF7FEFF 		bl	pbuf_header_force
 331              	.LVL17:
 735:lwIP/src/core/ipv4/ip4.c ****           }
 332              		.loc 1 735 13 view .LVU111
 333 00ee 0221     		movs	r1, #2
 334 00f0 2046     		mov	r0, r4
 335 00f2 FFF7FEFF 		bl	icmp_dest_unreach
 336              	.LVL18:
 337              	.L28:
 739:lwIP/src/core/ipv4/ip4.c **** 
 338              		.loc 1 739 129 view .LVU112
 741:lwIP/src/core/ipv4/ip4.c ****           IP_STATS_INC(ip.drop);
 339              		.loc 1 741 35 view .LVU113
ARM GAS  /tmp/ccjJALFP.s 			page 38


 742:lwIP/src/core/ipv4/ip4.c ****           MIB2_STATS_INC(mib2.ipinunknownprotos);
 340              		.loc 1 742 32 view .LVU114
 743:lwIP/src/core/ipv4/ip4.c ****         }
 341              		.loc 1 743 49 view .LVU115
 745:lwIP/src/core/ipv4/ip4.c ****         break;
 342              		.loc 1 745 9 view .LVU116
 343 00f6 2046     		mov	r0, r4
 344 00f8 FFF7FEFF 		bl	pbuf_free
 345              	.LVL19:
 746:lwIP/src/core/ipv4/ip4.c ****     }
 346              		.loc 1 746 9 view .LVU117
 347              	.L27:
 751:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_input_netif = NULL;
 348              		.loc 1 751 3 view .LVU118
 751:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_input_netif = NULL;
 349              		.loc 1 751 25 is_stmt 0 view .LVU119
 350 00fc 0023     		movs	r3, #0
 752:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip4_header = NULL;
 351              		.loc 1 752 31 view .LVU120
 352 00fe C5E90033 		strd	r3, r3, [r5]
 753:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip_header_tot_len = 0;
 353              		.loc 1 753 3 is_stmt 1 view .LVU121
 753:lwIP/src/core/ipv4/ip4.c ****   ip_data.current_ip_header_tot_len = 0;
 354              		.loc 1 753 30 is_stmt 0 view .LVU122
 355 0102 AB60     		str	r3, [r5, #8]
 754:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_set_any(ip4_current_src_addr());
 356              		.loc 1 754 3 is_stmt 1 view .LVU123
 754:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_set_any(ip4_current_src_addr());
 357              		.loc 1 754 37 is_stmt 0 view .LVU124
 358 0104 AB81     		strh	r3, [r5, #12]	@ movhi
 755:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_set_any(ip4_current_dest_addr());
 359              		.loc 1 755 3 is_stmt 1 view .LVU125
 756:lwIP/src/core/ipv4/ip4.c **** 
 360              		.loc 1 756 3 is_stmt 0 view .LVU126
 361 0106 C5E90433 		strd	r3, r3, [r5, #16]
 758:lwIP/src/core/ipv4/ip4.c **** }
 362              		.loc 1 758 3 is_stmt 1 view .LVU127
 758:lwIP/src/core/ipv4/ip4.c **** }
 363              		.loc 1 758 10 is_stmt 0 view .LVU128
 364 010a 98E7     		b	.L50
 365              	.L18:
 543:lwIP/src/core/ipv4/ip4.c ****       netif = inp;
 366              		.loc 1 543 5 is_stmt 1 view .LVU129
 367              	.LVL20:
 368              	.LBB30:
 369              	.LBI30:
 374:lwIP/src/core/ipv4/ip4.c **** {
 370              		.loc 1 374 1 view .LVU130
 371              	.LBB31:
 380:lwIP/src/core/ipv4/ip4.c **** 
 372              		.loc 1 380 115 view .LVU131
 383:lwIP/src/core/ipv4/ip4.c ****     /* unicast to this interface address? */
 373              		.loc 1 383 3 view .LVU132
 383:lwIP/src/core/ipv4/ip4.c ****     /* unicast to this interface address? */
 374              		.loc 1 383 6 is_stmt 0 view .LVU133
 375 010c 002B     		cmp	r3, #0
 376 010e B2D0     		beq	.L19
ARM GAS  /tmp/ccjJALFP.s 			page 39


 383:lwIP/src/core/ipv4/ip4.c ****     /* unicast to this interface address? */
 377              		.loc 1 383 33 view .LVU134
 378 0110 D8F80030 		ldr	r3, [r8]
 383:lwIP/src/core/ipv4/ip4.c ****     /* unicast to this interface address? */
 379              		.loc 1 383 28 view .LVU135
 380 0114 002B     		cmp	r3, #0
 381 0116 AED0     		beq	.L19
 385:lwIP/src/core/ipv4/ip4.c ****         /* or broadcast on this interface network address? */
 382              		.loc 1 385 5 is_stmt 1 view .LVU136
 385:lwIP/src/core/ipv4/ip4.c ****         /* or broadcast on this interface network address? */
 383              		.loc 1 385 8 is_stmt 0 view .LVU137
 384 0118 9A42     		cmp	r2, r3
 385 011a 0AD0     		beq	.L20
 387:lwIP/src/core/ipv4/ip4.c **** #if LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF
 386              		.loc 1 387 9 view .LVU138
 387 011c 1046     		mov	r0, r2
 388 011e 4146     		mov	r1, r8
 389 0120 FFF7FEFF 		bl	ip4_addr_isbroadcast_u32
 390              	.LVL21:
 385:lwIP/src/core/ipv4/ip4.c ****         /* or broadcast on this interface network address? */
 391              		.loc 1 385 70 view .LVU139
 392 0124 C0B9     		cbnz	r0, .L66
 393 0126 2869     		ldr	r0, [r5, #16]
 394 0128 A5E7     		b	.L19
 395              	.LVL22:
 396              	.L64:
 385:lwIP/src/core/ipv4/ip4.c ****         /* or broadcast on this interface network address? */
 397              		.loc 1 385 70 view .LVU140
 398              	.LBE31:
 399              	.LBE30:
 534:lwIP/src/core/ipv4/ip4.c ****       netif = inp;
 400              		.loc 1 534 28 discriminator 1 view .LVU141
 401 012a D8F80030 		ldr	r3, [r8]
 402 012e 002B     		cmp	r3, #0
 403 0130 A1D0     		beq	.L19
 404              	.L20:
 405              	.LVL23:
 565:lwIP/src/core/ipv4/ip4.c ****     }
 406              		.loc 1 565 7 is_stmt 1 view .LVU142
 579:lwIP/src/core/ipv4/ip4.c ****     /* remote port is DHCP server? */
 407              		.loc 1 579 3 view .LVU143
 596:lwIP/src/core/ipv4/ip4.c **** #if IP_ACCEPT_LINK_LAYER_ADDRESSING
 408              		.loc 1 596 3 view .LVU144
 599:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
 409              		.loc 1 599 7 is_stmt 0 view .LVU145
 410 0132 4646     		mov	r6, r8
 411 0134 0028     		cmp	r0, #0
 412 0136 ADD0     		beq	.L30
 413              	.LVL24:
 599:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
 414              		.loc 1 599 7 view .LVU146
 415 0138 A0E7     		b	.L29
 416              	.LVL25:
 417              	.L65:
 714:lwIP/src/core/ipv4/ip4.c ****         icmp_input(p, inp);
 418              		.loc 1 714 42 is_stmt 1 view .LVU147
 715:lwIP/src/core/ipv4/ip4.c ****         break;
ARM GAS  /tmp/ccjJALFP.s 			page 40


 419              		.loc 1 715 9 view .LVU148
 420 013a 4146     		mov	r1, r8
 421 013c 2046     		mov	r0, r4
 422 013e FFF7FEFF 		bl	icmp_input
 423              	.LVL26:
 716:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_ICMP */
 424              		.loc 1 716 9 view .LVU149
 425 0142 DBE7     		b	.L27
 426              	.L24:
 702:lwIP/src/core/ipv4/ip4.c ****         udp_input(p, inp);
 427              		.loc 1 702 42 view .LVU150
 703:lwIP/src/core/ipv4/ip4.c ****         break;
 428              		.loc 1 703 9 view .LVU151
 429 0144 4146     		mov	r1, r8
 430 0146 2046     		mov	r0, r4
 431 0148 FFF7FEFF 		bl	udp_input
 432              	.LVL27:
 704:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_UDP */
 433              		.loc 1 704 9 view .LVU152
 434 014c D6E7     		b	.L27
 435              	.L23:
 708:lwIP/src/core/ipv4/ip4.c ****         tcp_input(p, inp);
 436              		.loc 1 708 42 view .LVU153
 709:lwIP/src/core/ipv4/ip4.c ****         break;
 437              		.loc 1 709 9 view .LVU154
 438 014e 4146     		mov	r1, r8
 439 0150 2046     		mov	r0, r4
 440 0152 FFF7FEFF 		bl	tcp_input
 441              	.LVL28:
 710:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_TCP */
 442              		.loc 1 710 9 view .LVU155
 443 0156 D1E7     		b	.L27
 444              	.LVL29:
 445              	.L66:
 710:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_TCP */
 446              		.loc 1 710 9 is_stmt 0 view .LVU156
 447 0158 2869     		ldr	r0, [r5, #16]
 448 015a EAE7     		b	.L20
 449              	.L68:
 450              		.align	2
 451              	.L67:
 452 015c 00000000 		.word	ip_data
 453              		.cfi_endproc
 454              	.LFE107:
 456              		.section	.rodata.ip4_output_if.str1.4,"aMS",%progbits,1
 457              		.align	2
 458              	.LC0:
 459 0000 702D3E72 		.ascii	"p->ref == 1\000"
 459      6566203D 
 459      3D203100 
 460              		.align	2
 461              	.LC1:
 462 000c 63686563 		.ascii	"check that first pbuf can hold struct ip_hdr\000"
 462      6B207468 
 462      61742066 
 462      69727374 
 462      20706275 
ARM GAS  /tmp/ccjJALFP.s 			page 41


 463              		.section	.text.ip4_output_if,"ax",%progbits
 464              		.align	1
 465              		.p2align 2,,3
 466              		.global	ip4_output_if
 467              		.syntax unified
 468              		.thumb
 469              		.thumb_func
 470              		.fpu fpv4-sp-d16
 472              	ip4_output_if:
 473              	.LVL30:
 474              	.LFB108:
 760:lwIP/src/core/ipv4/ip4.c **** 
 761:lwIP/src/core/ipv4/ip4.c **** /**
 762:lwIP/src/core/ipv4/ip4.c ****  * Sends an IP packet on a network interface. This function constructs
 763:lwIP/src/core/ipv4/ip4.c ****  * the IP header and calculates the IP header checksum. If the source
 764:lwIP/src/core/ipv4/ip4.c ****  * IP address is NULL, the IP address of the outgoing network
 765:lwIP/src/core/ipv4/ip4.c ****  * interface is filled in as source address.
 766:lwIP/src/core/ipv4/ip4.c ****  * If the destination IP address is LWIP_IP_HDRINCL, p is assumed to already
 767:lwIP/src/core/ipv4/ip4.c ****  * include an IP header and p->payload points to it instead of the data.
 768:lwIP/src/core/ipv4/ip4.c ****  *
 769:lwIP/src/core/ipv4/ip4.c ****  * @param p the packet to send (p->payload points to the data, e.g. next
 770:lwIP/src/core/ipv4/ip4.c ****             protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
 771:lwIP/src/core/ipv4/ip4.c ****             IP header and p->payload points to that IP header)
 772:lwIP/src/core/ipv4/ip4.c ****  * @param src the source IP address to send from (if src == IP4_ADDR_ANY, the
 773:lwIP/src/core/ipv4/ip4.c ****  *         IP  address of the netif used to send is used as source address)
 774:lwIP/src/core/ipv4/ip4.c ****  * @param dest the destination IP address to send the packet to
 775:lwIP/src/core/ipv4/ip4.c ****  * @param ttl the TTL value to be set in the IP header
 776:lwIP/src/core/ipv4/ip4.c ****  * @param tos the TOS value to be set in the IP header
 777:lwIP/src/core/ipv4/ip4.c ****  * @param proto the PROTOCOL to be set in the IP header
 778:lwIP/src/core/ipv4/ip4.c ****  * @param netif the netif on which to send this packet
 779:lwIP/src/core/ipv4/ip4.c ****  * @return ERR_OK if the packet was sent OK
 780:lwIP/src/core/ipv4/ip4.c ****  *         ERR_BUF if p doesn't have enough space for IP/LINK headers
 781:lwIP/src/core/ipv4/ip4.c ****  *         returns errors returned by netif->output
 782:lwIP/src/core/ipv4/ip4.c ****  *
 783:lwIP/src/core/ipv4/ip4.c ****  * @note ip_id: RFC791 "some host may be able to simply use
 784:lwIP/src/core/ipv4/ip4.c ****  *  unique identifiers independent of destination"
 785:lwIP/src/core/ipv4/ip4.c ****  */
 786:lwIP/src/core/ipv4/ip4.c **** err_t
 787:lwIP/src/core/ipv4/ip4.c **** ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
 788:lwIP/src/core/ipv4/ip4.c ****               u8_t ttl, u8_t tos,
 789:lwIP/src/core/ipv4/ip4.c ****               u8_t proto, struct netif *netif)
 790:lwIP/src/core/ipv4/ip4.c **** {
 475              		.loc 1 790 1 is_stmt 1 view -0
 476              		.cfi_startproc
 477              		@ args = 12, pretend = 0, frame = 8
 478              		@ frame_needed = 0, uses_anonymous_args = 0
 479              		.loc 1 790 1 is_stmt 0 view .LVU158
 480 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 481              	.LCFI1:
 482              		.cfi_def_cfa_offset 36
 483              		.cfi_offset 4, -36
 484              		.cfi_offset 5, -32
 485              		.cfi_offset 6, -28
 486              		.cfi_offset 7, -24
 487              		.cfi_offset 8, -20
 488              		.cfi_offset 9, -16
 489              		.cfi_offset 10, -12
ARM GAS  /tmp/ccjJALFP.s 			page 42


 490              		.cfi_offset 11, -8
 491              		.cfi_offset 14, -4
 492 0004 83B0     		sub	sp, sp, #12
 493              	.LCFI2:
 494              		.cfi_def_cfa_offset 48
 495              		.loc 1 790 1 view .LVU159
 496 0006 0D46     		mov	r5, r1
 497 0008 0446     		mov	r4, r0
 498 000a 817B     		ldrb	r1, [r0, #14]	@ zero_extendqisi2
 499              	.LVL31:
 500              		.loc 1 790 1 view .LVU160
 501 000c 9DF83080 		ldrb	r8, [sp, #48]	@ zero_extendqisi2
 791:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
 792:lwIP/src/core/ipv4/ip4.c ****   return ip4_output_if_opt(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 793:lwIP/src/core/ipv4/ip4.c **** }
 794:lwIP/src/core/ipv4/ip4.c **** 
 795:lwIP/src/core/ipv4/ip4.c **** /**
 796:lwIP/src/core/ipv4/ip4.c ****  * Same as ip_output_if() but with the possibility to include IP options:
 797:lwIP/src/core/ipv4/ip4.c ****  *
 798:lwIP/src/core/ipv4/ip4.c ****  * @ param ip_options pointer to the IP options, copied into the IP header
 799:lwIP/src/core/ipv4/ip4.c ****  * @ param optlen length of ip_options
 800:lwIP/src/core/ipv4/ip4.c ****  */
 801:lwIP/src/core/ipv4/ip4.c **** err_t
 802:lwIP/src/core/ipv4/ip4.c **** ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
 803:lwIP/src/core/ipv4/ip4.c ****                   u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
 804:lwIP/src/core/ipv4/ip4.c ****                   u16_t optlen)
 805:lwIP/src/core/ipv4/ip4.c **** {
 806:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_OPTIONS_SEND */
 807:lwIP/src/core/ipv4/ip4.c ****   const ip4_addr_t *src_used = src;
 502              		.loc 1 807 3 is_stmt 1 view .LVU161
 503              	.LVL32:
 808:lwIP/src/core/ipv4/ip4.c ****   if (dest != LWIP_IP_HDRINCL) {
 504              		.loc 1 808 3 view .LVU162
 790:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
 505              		.loc 1 790 1 is_stmt 0 view .LVU163
 506 0010 9DF83490 		ldrb	r9, [sp, #52]	@ zero_extendqisi2
 507 0014 0E9E     		ldr	r6, [sp, #56]
 508              		.loc 1 808 6 view .LVU164
 509 0016 002A     		cmp	r2, #0
 510 0018 60D0     		beq	.L70
 809:lwIP/src/core/ipv4/ip4.c ****     if (ip4_addr_isany(src)) {
 511              		.loc 1 809 5 is_stmt 1 view .LVU165
 512 001a 1F46     		mov	r7, r3
 513 001c 9346     		mov	fp, r2
 514              		.loc 1 809 8 is_stmt 0 view .LVU166
 515 001e 3DB1     		cbz	r5, .L71
 516              		.loc 1 809 9 discriminator 1 view .LVU167
 517 0020 2B68     		ldr	r3, [r5]
 518              	.LVL33:
 519              		.loc 1 809 9 discriminator 1 view .LVU168
 520 0022 2BB1     		cbz	r3, .L71
 810:lwIP/src/core/ipv4/ip4.c ****       src_used = netif_ip4_addr(netif);
 811:lwIP/src/core/ipv4/ip4.c ****     }
 812:lwIP/src/core/ipv4/ip4.c ****   }
 813:lwIP/src/core/ipv4/ip4.c **** 
 814:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
 815:lwIP/src/core/ipv4/ip4.c ****   return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
ARM GAS  /tmp/ccjJALFP.s 			page 43


 816:lwIP/src/core/ipv4/ip4.c ****                                ip_options, optlen);
 817:lwIP/src/core/ipv4/ip4.c **** #else /* IP_OPTIONS_SEND */
 818:lwIP/src/core/ipv4/ip4.c ****   return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 521              		.loc 1 818 3 is_stmt 1 view .LVU169
 522              	.LVL34:
 523              	.LBB41:
 524              	.LBI41:
 819:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_OPTIONS_SEND */
 820:lwIP/src/core/ipv4/ip4.c **** }
 821:lwIP/src/core/ipv4/ip4.c **** 
 822:lwIP/src/core/ipv4/ip4.c **** /**
 823:lwIP/src/core/ipv4/ip4.c ****  * Same as ip_output_if() but 'src' address is not replaced by netif address
 824:lwIP/src/core/ipv4/ip4.c ****  * when it is 'any'.
 825:lwIP/src/core/ipv4/ip4.c ****  */
 826:lwIP/src/core/ipv4/ip4.c **** err_t
 827:lwIP/src/core/ipv4/ip4.c **** ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
 525              		.loc 1 827 1 view .LVU170
 526              	.LBB42:
 828:lwIP/src/core/ipv4/ip4.c ****                   u8_t ttl, u8_t tos,
 829:lwIP/src/core/ipv4/ip4.c ****                   u8_t proto, struct netif *netif)
 830:lwIP/src/core/ipv4/ip4.c **** {
 831:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
 832:lwIP/src/core/ipv4/ip4.c ****   return ip4_output_if_opt_src(p, src, dest, ttl, tos, proto, netif, NULL, 0);
 833:lwIP/src/core/ipv4/ip4.c **** }
 834:lwIP/src/core/ipv4/ip4.c **** 
 835:lwIP/src/core/ipv4/ip4.c **** /**
 836:lwIP/src/core/ipv4/ip4.c ****  * Same as ip_output_if_opt() but 'src' address is not replaced by netif address
 837:lwIP/src/core/ipv4/ip4.c ****  * when it is 'any'.
 838:lwIP/src/core/ipv4/ip4.c ****  */
 839:lwIP/src/core/ipv4/ip4.c **** err_t
 840:lwIP/src/core/ipv4/ip4.c **** ip4_output_if_opt_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
 841:lwIP/src/core/ipv4/ip4.c ****                       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
 842:lwIP/src/core/ipv4/ip4.c ****                       u16_t optlen)
 843:lwIP/src/core/ipv4/ip4.c **** {
 844:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_OPTIONS_SEND */
 845:lwIP/src/core/ipv4/ip4.c ****   struct ip_hdr *iphdr;
 527              		.loc 1 845 3 view .LVU171
 846:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_t dest_addr;
 528              		.loc 1 846 3 view .LVU172
 847:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 848:lwIP/src/core/ipv4/ip4.c ****   u32_t chk_sum = 0;
 529              		.loc 1 848 3 view .LVU173
 849:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 850:lwIP/src/core/ipv4/ip4.c **** 
 851:lwIP/src/core/ipv4/ip4.c ****   LWIP_ASSERT_CORE_LOCKED();
 530              		.loc 1 851 28 view .LVU174
 852:lwIP/src/core/ipv4/ip4.c ****   LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 531              		.loc 1 852 3 view .LVU175
 532              		.loc 1 852 3 view .LVU176
 533 0024 0129     		cmp	r1, #1
 534 0026 06D0     		beq	.L96
 535              	.LVL35:
 536              	.L83:
 537              		.loc 1 852 3 view .LVU177
 538 0028 3C48     		ldr	r0, .L100
 539              	.LVL36:
 540              		.loc 1 852 3 is_stmt 0 view .LVU178
ARM GAS  /tmp/ccjJALFP.s 			page 44


 541 002a FFF7FEFF 		bl	printf
 542              	.LVL37:
 543              	.L73:
 544              		.loc 1 852 3 is_stmt 1 view .LVU179
 545              		.loc 1 852 3 view .LVU180
 546              		.loc 1 852 3 view .LVU181
 547              		.loc 1 852 3 view .LVU182
 548              		.loc 1 852 3 view .LVU183
 549              		.loc 1 852 3 view .LVU184
 550 002e FEE7     		b	.L73
 551              	.LVL38:
 552              	.L71:
 553              		.loc 1 852 3 is_stmt 0 view .LVU185
 554              	.LBE42:
 555              	.LBE41:
 810:lwIP/src/core/ipv4/ip4.c ****     }
 556              		.loc 1 810 7 is_stmt 1 view .LVU186
 557              	.LBB63:
 558              	.LBB60:
 559              		.loc 1 852 3 is_stmt 0 view .LVU187
 560 0030 0129     		cmp	r1, #1
 561              	.LBE60:
 562              	.LBE63:
 810:lwIP/src/core/ipv4/ip4.c ****     }
 563              		.loc 1 810 16 view .LVU188
 564 0032 3546     		mov	r5, r6
 565              	.LVL39:
 818:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_OPTIONS_SEND */
 566              		.loc 1 818 3 is_stmt 1 view .LVU189
 567              	.LBB64:
 827:lwIP/src/core/ipv4/ip4.c ****                   u8_t ttl, u8_t tos,
 568              		.loc 1 827 1 view .LVU190
 569              	.LBB61:
 845:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_t dest_addr;
 570              		.loc 1 845 3 view .LVU191
 846:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 571              		.loc 1 846 3 view .LVU192
 848:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 572              		.loc 1 848 3 view .LVU193
 851:lwIP/src/core/ipv4/ip4.c ****   LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 573              		.loc 1 851 28 view .LVU194
 574              		.loc 1 852 3 view .LVU195
 575              		.loc 1 852 3 view .LVU196
 576 0034 F8D1     		bne	.L83
 577              	.LVL40:
 578              	.L96:
 579              	.LBB43:
 580              	.LBB44:
 581              	.LBB45:
 853:lwIP/src/core/ipv4/ip4.c **** 
 854:lwIP/src/core/ipv4/ip4.c ****   MIB2_STATS_INC(mib2.ipoutrequests);
 855:lwIP/src/core/ipv4/ip4.c **** 
 856:lwIP/src/core/ipv4/ip4.c ****   /* Should the IP header be generated or is it already included in p? */
 857:lwIP/src/core/ipv4/ip4.c ****   if (dest != LWIP_IP_HDRINCL) {
 858:lwIP/src/core/ipv4/ip4.c ****     u16_t ip_hlen = IP_HLEN;
 582              		.loc 1 858 5 view .LVU197
 859:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
ARM GAS  /tmp/ccjJALFP.s 			page 45


 860:lwIP/src/core/ipv4/ip4.c ****     u16_t optlen_aligned = 0;
 861:lwIP/src/core/ipv4/ip4.c ****     if (optlen != 0) {
 862:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 863:lwIP/src/core/ipv4/ip4.c ****       int i;
 864:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 865:lwIP/src/core/ipv4/ip4.c ****       if (optlen > (IP_HLEN_MAX - IP_HLEN)) {
 866:lwIP/src/core/ipv4/ip4.c ****         /* optlen too long */
 867:lwIP/src/core/ipv4/ip4.c ****         LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: optlen too long\n"));
 868:lwIP/src/core/ipv4/ip4.c ****         IP_STATS_INC(ip.err);
 869:lwIP/src/core/ipv4/ip4.c ****         MIB2_STATS_INC(mib2.ipoutdiscards);
 870:lwIP/src/core/ipv4/ip4.c ****         return ERR_VAL;
 871:lwIP/src/core/ipv4/ip4.c ****       }
 872:lwIP/src/core/ipv4/ip4.c ****       /* round up to a multiple of 4 */
 873:lwIP/src/core/ipv4/ip4.c ****       optlen_aligned = (u16_t)((optlen + 3) & ~3);
 874:lwIP/src/core/ipv4/ip4.c ****       ip_hlen = (u16_t)(ip_hlen + optlen_aligned);
 875:lwIP/src/core/ipv4/ip4.c ****       /* First write in the IP options */
 876:lwIP/src/core/ipv4/ip4.c ****       if (pbuf_add_header(p, optlen_aligned)) {
 877:lwIP/src/core/ipv4/ip4.c ****         LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output_if_opt: not enough room for IP 
 878:lwIP/src/core/ipv4/ip4.c ****         IP_STATS_INC(ip.err);
 879:lwIP/src/core/ipv4/ip4.c ****         MIB2_STATS_INC(mib2.ipoutdiscards);
 880:lwIP/src/core/ipv4/ip4.c ****         return ERR_BUF;
 881:lwIP/src/core/ipv4/ip4.c ****       }
 882:lwIP/src/core/ipv4/ip4.c ****       MEMCPY(p->payload, ip_options, optlen);
 883:lwIP/src/core/ipv4/ip4.c ****       if (optlen < optlen_aligned) {
 884:lwIP/src/core/ipv4/ip4.c ****         /* zero the remaining bytes */
 885:lwIP/src/core/ipv4/ip4.c ****         memset(((char *)p->payload) + optlen, 0, (size_t)(optlen_aligned - optlen));
 886:lwIP/src/core/ipv4/ip4.c ****       }
 887:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 888:lwIP/src/core/ipv4/ip4.c ****       for (i = 0; i < optlen_aligned / 2; i++) {
 889:lwIP/src/core/ipv4/ip4.c ****         chk_sum += ((u16_t *)p->payload)[i];
 890:lwIP/src/core/ipv4/ip4.c ****       }
 891:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 892:lwIP/src/core/ipv4/ip4.c ****     }
 893:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_OPTIONS_SEND */
 894:lwIP/src/core/ipv4/ip4.c ****     /* generate IP header */
 895:lwIP/src/core/ipv4/ip4.c ****     if (pbuf_add_header(p, IP_HLEN)) {
 583              		.loc 1 895 5 view .LVU198
 584              		.loc 1 895 9 is_stmt 0 view .LVU199
 585 0036 1421     		movs	r1, #20
 586 0038 2046     		mov	r0, r4
 587              	.LVL41:
 588              		.loc 1 895 9 view .LVU200
 589 003a FFF7FEFF 		bl	pbuf_add_header
 590              	.LVL42:
 591              		.loc 1 895 8 view .LVU201
 592 003e 0028     		cmp	r0, #0
 593 0040 69D1     		bne	.L81
 896:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in
 897:lwIP/src/core/ipv4/ip4.c **** 
 898:lwIP/src/core/ipv4/ip4.c ****       IP_STATS_INC(ip.err);
 899:lwIP/src/core/ipv4/ip4.c ****       MIB2_STATS_INC(mib2.ipoutdiscards);
 900:lwIP/src/core/ipv4/ip4.c ****       return ERR_BUF;
 901:lwIP/src/core/ipv4/ip4.c ****     }
 902:lwIP/src/core/ipv4/ip4.c **** 
 903:lwIP/src/core/ipv4/ip4.c ****     iphdr = (struct ip_hdr *)p->payload;
 594              		.loc 1 903 5 is_stmt 1 view .LVU202
 595              	.LVL43:
ARM GAS  /tmp/ccjJALFP.s 			page 46


 904:lwIP/src/core/ipv4/ip4.c ****     LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 596              		.loc 1 904 5 view .LVU203
 597              		.loc 1 904 5 view .LVU204
 598 0042 6389     		ldrh	r3, [r4, #10]
 599 0044 132B     		cmp	r3, #19
 600 0046 5FD9     		bls	.L97
 903:lwIP/src/core/ipv4/ip4.c ****     LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 601              		.loc 1 903 11 is_stmt 0 view .LVU205
 602 0048 6168     		ldr	r1, [r4, #4]
 603              		.loc 1 904 5 is_stmt 1 view .LVU206
 905:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 906:lwIP/src/core/ipv4/ip4.c **** 
 907:lwIP/src/core/ipv4/ip4.c ****     IPH_TTL_SET(iphdr, ttl);
 604              		.loc 1 907 5 view .LVU207
 908:lwIP/src/core/ipv4/ip4.c ****     IPH_PROTO_SET(iphdr, proto);
 909:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 910:lwIP/src/core/ipv4/ip4.c ****     chk_sum += PP_NTOHS(proto | (ttl << 8));
 605              		.loc 1 910 16 is_stmt 0 view .LVU208
 606 004a 49EA072E 		orr	lr, r9, r7, lsl #8
 911:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 912:lwIP/src/core/ipv4/ip4.c **** 
 913:lwIP/src/core/ipv4/ip4.c ****     /* dest cannot be NULL here */
 914:lwIP/src/core/ipv4/ip4.c ****     ip4_addr_copy(iphdr->dest, *dest);
 915:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 916:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
 917:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 918:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 919:lwIP/src/core/ipv4/ip4.c **** 
 920:lwIP/src/core/ipv4/ip4.c ****     IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 921:lwIP/src/core/ipv4/ip4.c ****     IPH_TOS_SET(iphdr, tos);
 922:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 923:lwIP/src/core/ipv4/ip4.c ****     chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 607              		.loc 1 923 16 view .LVU209
 608 004e 4FEA082C 		lsl	ip, r8, #8
 920:lwIP/src/core/ipv4/ip4.c ****     IPH_TOS_SET(iphdr, tos);
 609              		.loc 1 920 5 view .LVU210
 610 0052 4FF0450A 		mov	r10, #69
 908:lwIP/src/core/ipv4/ip4.c ****     IPH_PROTO_SET(iphdr, proto);
 611              		.loc 1 908 5 view .LVU211
 612 0056 81F80990 		strb	r9, [r1, #9]
 613              	.LVL44:
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 614              		.loc 1 910 16 view .LVU212
 615 005a 4FEA2E23 		asr	r3, lr, #8
 907:lwIP/src/core/ipv4/ip4.c ****     IPH_PROTO_SET(iphdr, proto);
 616              		.loc 1 907 5 view .LVU213
 617 005e 0F72     		strb	r7, [r1, #8]
 908:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 618              		.loc 1 908 5 is_stmt 1 view .LVU214
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 619              		.loc 1 910 5 view .LVU215
 620              	.LVL45:
 914:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 621              		.loc 1 914 5 view .LVU216
 622              		.loc 1 923 16 is_stmt 0 view .LVU217
 623 0060 4CEA0A0C 		orr	ip, ip, r10
 914:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
ARM GAS  /tmp/ccjJALFP.s 			page 47


 624              		.loc 1 914 5 view .LVU218
 625 0064 DBF80070 		ldr	r7, [fp]
 626              	.LVL46:
 924:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 925:lwIP/src/core/ipv4/ip4.c ****     IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 926:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 927:lwIP/src/core/ipv4/ip4.c ****     chk_sum += iphdr->_len;
 928:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 929:lwIP/src/core/ipv4/ip4.c ****     IPH_OFFSET_SET(iphdr, 0);
 930:lwIP/src/core/ipv4/ip4.c ****     IPH_ID_SET(iphdr, lwip_htons(ip_id));
 627              		.loc 1 930 5 view .LVU219
 628 0068 2D4A     		ldr	r2, .L100+4
 917:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 629              		.loc 1 917 47 view .LVU220
 630 006a 4FEA1749 		lsr	r9, r7, #16
 631              	.LVL47:
 914:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 632              		.loc 1 914 5 view .LVU221
 633 006e 0F61     		str	r7, [r1, #16]	@ unaligned
 921:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 634              		.loc 1 921 5 view .LVU222
 635 0070 81F80180 		strb	r8, [r1, #1]
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 636              		.loc 1 910 16 view .LVU223
 637 0074 43EA0E28 		orr	r8, r3, lr, lsl #8
 638              	.LVL48:
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 639              		.loc 1 923 13 view .LVU224
 640 0078 19FA87F7 		uxtah	r7, r9, r7
 920:lwIP/src/core/ipv4/ip4.c ****     IPH_TOS_SET(iphdr, tos);
 641              		.loc 1 920 5 view .LVU225
 642 007c 81F800A0 		strb	r10, [r1]
 916:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 643              		.loc 1 916 5 is_stmt 1 view .LVU226
 644              	.LVL49:
 917:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 645              		.loc 1 917 5 view .LVU227
 920:lwIP/src/core/ipv4/ip4.c ****     IPH_TOS_SET(iphdr, tos);
 646              		.loc 1 920 5 view .LVU228
 921:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 647              		.loc 1 921 5 view .LVU229
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 648              		.loc 1 923 5 view .LVU230
 649              	.LBB46:
 650              	.LBB47:
 651              		.loc 2 937 19 is_stmt 0 view .LVU231
 652 0080 2389     		ldrh	r3, [r4, #8]
 653              	.LBE47:
 654              	.LBE46:
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 655              		.loc 1 923 13 view .LVU232
 656 0082 6744     		add	r7, r7, ip
 657              		.loc 1 930 5 view .LVU233
 658 0084 B2F800C0 		ldrh	ip, [r2]
 659              	.LBB50:
 660              	.LBB48:
 661              		.loc 2 937 19 view .LVU234
ARM GAS  /tmp/ccjJALFP.s 			page 48


 662 0088 5BBA     		rev16	r3, r3
 663              	.LBE48:
 664              	.LBE50:
 929:lwIP/src/core/ipv4/ip4.c ****     IPH_ID_SET(iphdr, lwip_htons(ip_id));
 665              		.loc 1 929 5 view .LVU235
 666 008a 8871     		strb	r0, [r1, #6]
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 667              		.loc 1 923 13 view .LVU236
 668 008c 17FA88F7 		uxtah	r7, r7, r8
 669              	.LVL50:
 925:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 670              		.loc 1 925 5 is_stmt 1 view .LVU237
 671              	.LBB51:
 672              	.LBI46:
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 673              		.loc 2 934 30 view .LVU238
 674              	.LBB49:
 675              		.loc 2 937 3 view .LVU239
 676              	.LBE49:
 677              	.LBE51:
 678              	.LBB52:
 679              	.LBB53:
 680              		.loc 2 937 19 is_stmt 0 view .LVU240
 681 0090 9CFA9CF8 		rev16	r8, ip
 682              	.LBE53:
 683              	.LBE52:
 925:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 684              		.loc 1 925 5 view .LVU241
 685 0094 4B80     		strh	r3, [r1, #2]	@ unaligned
 927:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 686              		.loc 1 927 5 is_stmt 1 view .LVU242
 931:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 932:lwIP/src/core/ipv4/ip4.c ****     chk_sum += iphdr->_id;
 933:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 934:lwIP/src/core/ipv4/ip4.c ****     ++ip_id;
 687              		.loc 1 934 5 is_stmt 0 view .LVU243
 688 0096 0CF1010C 		add	ip, ip, #1
 927:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 689              		.loc 1 927 13 view .LVU244
 690 009a 17FA83F3 		uxtah	r3, r7, r3
 691              	.LVL51:
 929:lwIP/src/core/ipv4/ip4.c ****     IPH_ID_SET(iphdr, lwip_htons(ip_id));
 692              		.loc 1 929 5 is_stmt 1 view .LVU245
 693 009e C871     		strb	r0, [r1, #7]
 930:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 694              		.loc 1 930 5 view .LVU246
 695              	.LVL52:
 696              	.LBB55:
 697              	.LBI52:
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 698              		.loc 2 934 30 view .LVU247
 699              	.LBB54:
 700              		.loc 2 937 3 view .LVU248
 701              		.loc 2 937 3 is_stmt 0 view .LVU249
 702              	.LBE54:
 703              	.LBE55:
 930:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
ARM GAS  /tmp/ccjJALFP.s 			page 49


 704              		.loc 1 930 5 view .LVU250
 705 00a0 A1F80480 		strh	r8, [r1, #4]	@ unaligned
 932:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 706              		.loc 1 932 5 is_stmt 1 view .LVU251
 932:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 707              		.loc 1 932 13 is_stmt 0 view .LVU252
 708 00a4 13FA88F3 		uxtah	r3, r3, r8
 709              	.LVL53:
 710              		.loc 1 934 5 is_stmt 1 view .LVU253
 711 00a8 A2F800C0 		strh	ip, [r2]	@ movhi
 935:lwIP/src/core/ipv4/ip4.c **** 
 936:lwIP/src/core/ipv4/ip4.c ****     if (src == NULL) {
 712              		.loc 1 936 5 view .LVU254
 713              		.loc 1 936 8 is_stmt 0 view .LVU255
 714 00ac 85B3     		cbz	r5, .L98
 937:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 938:lwIP/src/core/ipv4/ip4.c ****     } else {
 939:lwIP/src/core/ipv4/ip4.c ****       /* src cannot be NULL here */
 940:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_copy(iphdr->src, *src);
 715              		.loc 1 940 7 is_stmt 1 view .LVU256
 716 00ae 2868     		ldr	r0, [r5]
 717              	.L79:
 941:lwIP/src/core/ipv4/ip4.c ****     }
 942:lwIP/src/core/ipv4/ip4.c **** 
 943:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 944:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 718              		.loc 1 944 13 is_stmt 0 view .LVU257
 719 00b0 13FA80F3 		uxtah	r3, r3, r0
 720              	.LVL54:
 721              		.loc 1 944 13 view .LVU258
 722 00b4 C860     		str	r0, [r1, #12]	@ unaligned
 723              		.loc 1 944 5 is_stmt 1 view .LVU259
 724              	.LVL55:
 945:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 725              		.loc 1 945 5 view .LVU260
 726              	.LBE45:
 946:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 947:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + chk_sum;
 948:lwIP/src/core/ipv4/ip4.c ****     chk_sum = ~chk_sum;
 949:lwIP/src/core/ipv4/ip4.c ****     IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
 950:lwIP/src/core/ipv4/ip4.c ****       iphdr->_chksum = (u16_t)chk_sum; /* network order */
 951:lwIP/src/core/ipv4/ip4.c ****     }
 952:lwIP/src/core/ipv4/ip4.c **** #if LWIP_CHECKSUM_CTRL_PER_NETIF
 953:lwIP/src/core/ipv4/ip4.c ****     else {
 954:lwIP/src/core/ipv4/ip4.c ****       IPH_CHKSUM_SET(iphdr, 0);
 955:lwIP/src/core/ipv4/ip4.c ****     }
 956:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
 957:lwIP/src/core/ipv4/ip4.c **** #else /* CHECKSUM_GEN_IP_INLINE */
 958:lwIP/src/core/ipv4/ip4.c ****     IPH_CHKSUM_SET(iphdr, 0);
 959:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP
 960:lwIP/src/core/ipv4/ip4.c ****     IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
 961:lwIP/src/core/ipv4/ip4.c ****       IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, ip_hlen));
 962:lwIP/src/core/ipv4/ip4.c ****     }
 963:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP */
 964:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 965:lwIP/src/core/ipv4/ip4.c ****   } else {
 966:lwIP/src/core/ipv4/ip4.c ****     /* IP header already included in p */
ARM GAS  /tmp/ccjJALFP.s 			page 50


 967:lwIP/src/core/ipv4/ip4.c ****     if (p->len < IP_HLEN) {
 968:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too 
 969:lwIP/src/core/ipv4/ip4.c ****       IP_STATS_INC(ip.err);
 970:lwIP/src/core/ipv4/ip4.c ****       MIB2_STATS_INC(mib2.ipoutdiscards);
 971:lwIP/src/core/ipv4/ip4.c ****       return ERR_BUF;
 972:lwIP/src/core/ipv4/ip4.c ****     }
 973:lwIP/src/core/ipv4/ip4.c ****     iphdr = (struct ip_hdr *)p->payload;
 974:lwIP/src/core/ipv4/ip4.c ****     ip4_addr_copy(dest_addr, iphdr->dest);
 975:lwIP/src/core/ipv4/ip4.c ****     dest = &dest_addr;
 976:lwIP/src/core/ipv4/ip4.c ****   }
 977:lwIP/src/core/ipv4/ip4.c **** 
 978:lwIP/src/core/ipv4/ip4.c ****   IP_STATS_INC(ip.xmit);
 979:lwIP/src/core/ipv4/ip4.c **** 
 980:lwIP/src/core/ipv4/ip4.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)ne
 981:lwIP/src/core/ipv4/ip4.c ****   ip4_debug_print(p);
 982:lwIP/src/core/ipv4/ip4.c **** 
 983:lwIP/src/core/ipv4/ip4.c **** #if ENABLE_LOOPBACK
 984:lwIP/src/core/ipv4/ip4.c ****   if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 985:lwIP/src/core/ipv4/ip4.c **** #if !LWIP_HAVE_LOOPIF
 986:lwIP/src/core/ipv4/ip4.c ****       || ip4_addr_isloopback(dest)
 987:lwIP/src/core/ipv4/ip4.c **** #endif /* !LWIP_HAVE_LOOPIF */
 988:lwIP/src/core/ipv4/ip4.c ****      ) {
 989:lwIP/src/core/ipv4/ip4.c ****     /* Packet to self, enqueue it for loopback */
 990:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
 991:lwIP/src/core/ipv4/ip4.c ****     return netif_loop_output(netif, p);
 992:lwIP/src/core/ipv4/ip4.c ****   }
 993:lwIP/src/core/ipv4/ip4.c **** #if LWIP_MULTICAST_TX_OPTIONS
 994:lwIP/src/core/ipv4/ip4.c ****   if ((p->flags & PBUF_FLAG_MCASTLOOP) != 0) {
 995:lwIP/src/core/ipv4/ip4.c ****     netif_loop_output(netif, p);
 996:lwIP/src/core/ipv4/ip4.c ****   }
 997:lwIP/src/core/ipv4/ip4.c **** #endif /* LWIP_MULTICAST_TX_OPTIONS */
 998:lwIP/src/core/ipv4/ip4.c **** #endif /* ENABLE_LOOPBACK */
 999:lwIP/src/core/ipv4/ip4.c **** #if IP_FRAG
1000:lwIP/src/core/ipv4/ip4.c ****   /* don't fragment if interface has mtu set to 0 [loopif] */
1001:lwIP/src/core/ipv4/ip4.c ****   if (netif->mtu && (p->tot_len > netif->mtu)) {
1002:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 727              		.loc 1 1002 12 is_stmt 0 view .LVU261
 728 00b6 5A46     		mov	r2, fp
 729              	.LBB56:
 945:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 730              		.loc 1 945 13 view .LVU262
 731 00b8 03EB1043 		add	r3, r3, r0, lsr #16
 732              	.LVL56:
 946:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 733              		.loc 1 946 5 is_stmt 1 view .LVU263
 946:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 734              		.loc 1 946 42 is_stmt 0 view .LVU264
 735 00bc 98B2     		uxth	r0, r3
 946:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 736              		.loc 1 946 13 view .LVU265
 737 00be 00EB1343 		add	r3, r0, r3, lsr #16
 738              	.LVL57:
 947:lwIP/src/core/ipv4/ip4.c ****     chk_sum = ~chk_sum;
 739              		.loc 1 947 5 is_stmt 1 view .LVU266
 947:lwIP/src/core/ipv4/ip4.c ****     chk_sum = ~chk_sum;
 740              		.loc 1 947 13 is_stmt 0 view .LVU267
 741 00c2 03EB1343 		add	r3, r3, r3, lsr #16
ARM GAS  /tmp/ccjJALFP.s 			page 51


 742              	.LVL58:
 948:lwIP/src/core/ipv4/ip4.c ****     IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
 743              		.loc 1 948 5 is_stmt 1 view .LVU268
 950:lwIP/src/core/ipv4/ip4.c ****     }
 744              		.loc 1 950 7 view .LVU269
 950:lwIP/src/core/ipv4/ip4.c ****     }
 745              		.loc 1 950 22 is_stmt 0 view .LVU270
 746 00c6 DB43     		mvns	r3, r3
 747              	.LVL59:
 950:lwIP/src/core/ipv4/ip4.c ****     }
 748              		.loc 1 950 22 view .LVU271
 749 00c8 4B81     		strh	r3, [r1, #10]	@ unaligned
 750              	.LVL60:
 950:lwIP/src/core/ipv4/ip4.c ****     }
 751              		.loc 1 950 22 view .LVU272
 752              	.LBE56:
 978:lwIP/src/core/ipv4/ip4.c **** 
 753              		.loc 1 978 24 is_stmt 1 view .LVU273
 980:lwIP/src/core/ipv4/ip4.c ****   ip4_debug_print(p);
 754              		.loc 1 980 110 view .LVU274
 981:lwIP/src/core/ipv4/ip4.c **** 
 755              		.loc 1 981 21 view .LVU275
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 756              		.loc 1 1001 3 view .LVU276
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 757              		.loc 1 1001 12 is_stmt 0 view .LVU277
 758 00ca B38B     		ldrh	r3, [r6, #28]
 759              	.LVL61:
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 760              		.loc 1 1001 6 view .LVU278
 761 00cc A3B9     		cbnz	r3, .L99
 762              	.LVL62:
 763              	.L82:
1003:lwIP/src/core/ipv4/ip4.c ****   }
1004:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_FRAG */
1005:lwIP/src/core/ipv4/ip4.c **** 
1006:lwIP/src/core/ipv4/ip4.c ****   LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
 764              		.loc 1 1006 67 is_stmt 1 view .LVU279
1007:lwIP/src/core/ipv4/ip4.c ****   return netif->output(netif, p, dest);
 765              		.loc 1 1007 3 view .LVU280
 766              		.loc 1 1007 10 is_stmt 0 view .LVU281
 767 00ce 2146     		mov	r1, r4
 768 00d0 3369     		ldr	r3, [r6, #16]
 769 00d2 3046     		mov	r0, r6
 770 00d4 9847     		blx	r3
 771              	.LVL63:
 772              	.L92:
 773              		.loc 1 1007 10 view .LVU282
 774              	.LBE44:
 775              	.LBE43:
 776              	.LBE61:
 777              	.LBE64:
 820:lwIP/src/core/ipv4/ip4.c **** 
 778              		.loc 1 820 1 view .LVU283
 779 00d6 03B0     		add	sp, sp, #12
 780              	.LCFI3:
 781              		.cfi_remember_state
ARM GAS  /tmp/ccjJALFP.s 			page 52


 782              		.cfi_def_cfa_offset 36
 783              		@ sp needed
 784 00d8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 785              	.LVL64:
 786              	.L70:
 787              	.LCFI4:
 788              		.cfi_restore_state
 818:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_OPTIONS_SEND */
 789              		.loc 1 818 3 is_stmt 1 view .LVU284
 790              	.LBB65:
 827:lwIP/src/core/ipv4/ip4.c ****                   u8_t ttl, u8_t tos,
 791              		.loc 1 827 1 view .LVU285
 792              	.LBB62:
 845:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_t dest_addr;
 793              		.loc 1 845 3 view .LVU286
 846:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 794              		.loc 1 846 3 view .LVU287
 848:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 795              		.loc 1 848 3 view .LVU288
 851:lwIP/src/core/ipv4/ip4.c ****   LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 796              		.loc 1 851 28 view .LVU289
 852:lwIP/src/core/ipv4/ip4.c **** 
 797              		.loc 1 852 3 view .LVU290
 852:lwIP/src/core/ipv4/ip4.c **** 
 798              		.loc 1 852 3 view .LVU291
 799 00dc 0129     		cmp	r1, #1
 800 00de A3D1     		bne	.L83
 801              	.LVL65:
 802              	.LBB59:
 803              	.LBB58:
 967:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too 
 804              		.loc 1 967 5 view .LVU292
 967:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too 
 805              		.loc 1 967 8 is_stmt 0 view .LVU293
 806 00e0 6389     		ldrh	r3, [r4, #10]
 807              	.LVL66:
 967:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too 
 808              		.loc 1 967 8 view .LVU294
 809 00e2 132B     		cmp	r3, #19
 810 00e4 17D9     		bls	.L81
 973:lwIP/src/core/ipv4/ip4.c ****     ip4_addr_copy(dest_addr, iphdr->dest);
 811              		.loc 1 973 5 is_stmt 1 view .LVU295
 812              	.LVL67:
 974:lwIP/src/core/ipv4/ip4.c ****     dest = &dest_addr;
 813              		.loc 1 974 5 view .LVU296
 814 00e6 6368     		ldr	r3, [r4, #4]
 975:lwIP/src/core/ipv4/ip4.c ****   }
 815              		.loc 1 975 10 is_stmt 0 view .LVU297
 816 00e8 0DF1040B 		add	fp, sp, #4
 974:lwIP/src/core/ipv4/ip4.c ****     dest = &dest_addr;
 817              		.loc 1 974 5 view .LVU298
 818 00ec 1B69     		ldr	r3, [r3, #16]	@ unaligned
1002:lwIP/src/core/ipv4/ip4.c ****   }
 819              		.loc 1 1002 12 view .LVU299
 820 00ee 5A46     		mov	r2, fp
 821              	.LVL68:
 974:lwIP/src/core/ipv4/ip4.c ****     dest = &dest_addr;
ARM GAS  /tmp/ccjJALFP.s 			page 53


 822              		.loc 1 974 5 view .LVU300
 823 00f0 0193     		str	r3, [sp, #4]
 975:lwIP/src/core/ipv4/ip4.c ****   }
 824              		.loc 1 975 5 is_stmt 1 view .LVU301
 825              	.LVL69:
 978:lwIP/src/core/ipv4/ip4.c **** 
 826              		.loc 1 978 24 view .LVU302
 980:lwIP/src/core/ipv4/ip4.c ****   ip4_debug_print(p);
 827              		.loc 1 980 110 view .LVU303
 981:lwIP/src/core/ipv4/ip4.c **** 
 828              		.loc 1 981 21 view .LVU304
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 829              		.loc 1 1001 3 view .LVU305
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 830              		.loc 1 1001 12 is_stmt 0 view .LVU306
 831 00f2 B38B     		ldrh	r3, [r6, #28]
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 832              		.loc 1 1001 6 view .LVU307
 833 00f4 002B     		cmp	r3, #0
 834 00f6 EAD0     		beq	.L82
 835              	.LVL70:
 836              	.L99:
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 837              		.loc 1 1001 18 view .LVU308
 838 00f8 2189     		ldrh	r1, [r4, #8]
 839 00fa 9942     		cmp	r1, r3
 840 00fc E7D9     		bls	.L82
1002:lwIP/src/core/ipv4/ip4.c ****   }
 841              		.loc 1 1002 5 is_stmt 1 view .LVU309
1002:lwIP/src/core/ipv4/ip4.c ****   }
 842              		.loc 1 1002 12 is_stmt 0 view .LVU310
 843 00fe 3146     		mov	r1, r6
 844 0100 2046     		mov	r0, r4
 845 0102 FFF7FEFF 		bl	ip4_frag
 846              	.LVL71:
1002:lwIP/src/core/ipv4/ip4.c ****   }
 847              		.loc 1 1002 12 view .LVU311
 848 0106 E6E7     		b	.L92
 849              	.LVL72:
 850              	.L97:
 851              	.LBB57:
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 852              		.loc 1 904 5 is_stmt 1 view .LVU312
 853 0108 0648     		ldr	r0, .L100+8
 854 010a FFF7FEFF 		bl	printf
 855              	.LVL73:
 856              	.L77:
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 857              		.loc 1 904 5 view .LVU313
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 858              		.loc 1 904 5 view .LVU314
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 859              		.loc 1 904 5 view .LVU315
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 860              		.loc 1 904 5 view .LVU316
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 861              		.loc 1 904 5 view .LVU317
ARM GAS  /tmp/ccjJALFP.s 			page 54


 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 862              		.loc 1 904 5 view .LVU318
 863 010e FEE7     		b	.L77
 864              	.LVL74:
 865              	.L98:
 937:lwIP/src/core/ipv4/ip4.c ****     } else {
 866              		.loc 1 937 7 view .LVU319
 867 0110 0548     		ldr	r0, .L100+12
 868 0112 0068     		ldr	r0, [r0]
 869 0114 CCE7     		b	.L79
 870              	.LVL75:
 871              	.L81:
 900:lwIP/src/core/ipv4/ip4.c ****     }
 872              		.loc 1 900 14 is_stmt 0 view .LVU320
 873 0116 6FF00100 		mvn	r0, #1
 874 011a DCE7     		b	.L92
 875              	.L101:
 876              		.align	2
 877              	.L100:
 878 011c 00000000 		.word	.LC0
 879 0120 00000000 		.word	.LANCHOR0
 880 0124 0C000000 		.word	.LC1
 881 0128 00000000 		.word	ip_addr_any
 882              	.LBE57:
 883              	.LBE58:
 884              	.LBE59:
 885              	.LBE62:
 886              	.LBE65:
 887              		.cfi_endproc
 888              	.LFE108:
 890              		.section	.text.ip4_output_if_src,"ax",%progbits
 891              		.align	1
 892              		.p2align 2,,3
 893              		.global	ip4_output_if_src
 894              		.syntax unified
 895              		.thumb
 896              		.thumb_func
 897              		.fpu fpv4-sp-d16
 899              	ip4_output_if_src:
 900              	.LVL76:
 901              	.LFB109:
 830:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
 902              		.loc 1 830 1 is_stmt 1 view -0
 903              		.cfi_startproc
 904              		@ args = 12, pretend = 0, frame = 8
 905              		@ frame_needed = 0, uses_anonymous_args = 0
 845:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_t dest_addr;
 906              		.loc 1 845 3 view .LVU322
 846:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 907              		.loc 1 846 3 view .LVU323
 848:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 908              		.loc 1 848 3 view .LVU324
 851:lwIP/src/core/ipv4/ip4.c ****   LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 909              		.loc 1 851 28 view .LVU325
 852:lwIP/src/core/ipv4/ip4.c **** 
 910              		.loc 1 852 3 view .LVU326
 852:lwIP/src/core/ipv4/ip4.c **** 
ARM GAS  /tmp/ccjJALFP.s 			page 55


 911              		.loc 1 852 3 view .LVU327
 830:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
 912              		.loc 1 830 1 is_stmt 0 view .LVU328
 913 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 914              	.LCFI5:
 915              		.cfi_def_cfa_offset 36
 916              		.cfi_offset 4, -36
 917              		.cfi_offset 5, -32
 918              		.cfi_offset 6, -28
 919              		.cfi_offset 7, -24
 920              		.cfi_offset 8, -20
 921              		.cfi_offset 9, -16
 922              		.cfi_offset 10, -12
 923              		.cfi_offset 11, -8
 924              		.cfi_offset 14, -4
 925 0004 9946     		mov	r9, r3
 852:lwIP/src/core/ipv4/ip4.c **** 
 926              		.loc 1 852 3 view .LVU329
 927 0006 837B     		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 928              	.LVL77:
 830:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
 929              		.loc 1 830 1 view .LVU330
 930 0008 83B0     		sub	sp, sp, #12
 931              	.LCFI6:
 932              		.cfi_def_cfa_offset 48
 852:lwIP/src/core/ipv4/ip4.c **** 
 933              		.loc 1 852 3 view .LVU331
 934 000a 012B     		cmp	r3, #1
 830:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
 935              		.loc 1 830 1 view .LVU332
 936 000c 9DF830A0 		ldrb	r10, [sp, #48]	@ zero_extendqisi2
 937 0010 9DF834B0 		ldrb	fp, [sp, #52]	@ zero_extendqisi2
 938 0014 0E9E     		ldr	r6, [sp, #56]
 852:lwIP/src/core/ipv4/ip4.c **** 
 939              		.loc 1 852 3 view .LVU333
 940 0016 55D1     		bne	.L119
 941              	.LVL78:
 942              	.LBB73:
 943              	.LBI73:
 827:lwIP/src/core/ipv4/ip4.c ****                   u8_t ttl, u8_t tos,
 944              		.loc 1 827 1 is_stmt 1 view .LVU334
 945              	.LBB74:
 852:lwIP/src/core/ipv4/ip4.c **** 
 946              		.loc 1 852 3 view .LVU335
 854:lwIP/src/core/ipv4/ip4.c **** 
 947              		.loc 1 854 37 view .LVU336
 857:lwIP/src/core/ipv4/ip4.c ****     u16_t ip_hlen = IP_HLEN;
 948              		.loc 1 857 3 view .LVU337
 949 0018 0446     		mov	r4, r0
 950 001a 1746     		mov	r7, r2
 857:lwIP/src/core/ipv4/ip4.c ****     u16_t ip_hlen = IP_HLEN;
 951              		.loc 1 857 6 is_stmt 0 view .LVU338
 952 001c 002A     		cmp	r2, #0
 953 001e 55D0     		beq	.L105
 954              	.LBB75:
 858:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
 955              		.loc 1 858 5 is_stmt 1 view .LVU339
ARM GAS  /tmp/ccjJALFP.s 			page 56


 956              	.LVL79:
 895:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in
 957              		.loc 1 895 5 view .LVU340
 958 0020 8846     		mov	r8, r1
 895:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in
 959              		.loc 1 895 9 is_stmt 0 view .LVU341
 960 0022 1421     		movs	r1, #20
 961              	.LVL80:
 895:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in
 962              		.loc 1 895 9 view .LVU342
 963 0024 FFF7FEFF 		bl	pbuf_add_header
 964              	.LVL81:
 895:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in
 965              		.loc 1 895 8 view .LVU343
 966 0028 0028     		cmp	r0, #0
 967 002a 69D1     		bne	.L113
 903:lwIP/src/core/ipv4/ip4.c ****     LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 968              		.loc 1 903 5 is_stmt 1 view .LVU344
 969              	.LVL82:
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 970              		.loc 1 904 5 view .LVU345
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 971              		.loc 1 904 5 view .LVU346
 972 002c 6389     		ldrh	r3, [r4, #10]
 973 002e 132B     		cmp	r3, #19
 974 0030 5FD9     		bls	.L120
 903:lwIP/src/core/ipv4/ip4.c ****     LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 975              		.loc 1 903 11 is_stmt 0 view .LVU347
 976 0032 6568     		ldr	r5, [r4, #4]
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 977              		.loc 1 904 5 is_stmt 1 view .LVU348
 907:lwIP/src/core/ipv4/ip4.c ****     IPH_PROTO_SET(iphdr, proto);
 978              		.loc 1 907 5 view .LVU349
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 979              		.loc 1 910 16 is_stmt 0 view .LVU350
 980 0034 4BEA0922 		orr	r2, fp, r9, lsl #8
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 981              		.loc 1 923 16 view .LVU351
 982 0038 4FEA0A2E 		lsl	lr, r10, #8
 907:lwIP/src/core/ipv4/ip4.c ****     IPH_PROTO_SET(iphdr, proto);
 983              		.loc 1 907 5 view .LVU352
 984 003c 85F80890 		strb	r9, [r5, #8]
 985              	.LVL83:
 908:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 986              		.loc 1 908 5 is_stmt 1 view .LVU353
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 987              		.loc 1 910 16 is_stmt 0 view .LVU354
 988 0040 4FEA222C 		asr	ip, r2, #8
 908:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 989              		.loc 1 908 5 view .LVU355
 990 0044 85F809B0 		strb	fp, [r5, #9]
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 991              		.loc 1 910 5 is_stmt 1 view .LVU356
 992              	.LVL84:
 914:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 993              		.loc 1 914 5 view .LVU357
 920:lwIP/src/core/ipv4/ip4.c ****     IPH_TOS_SET(iphdr, tos);
ARM GAS  /tmp/ccjJALFP.s 			page 57


 994              		.loc 1 920 5 is_stmt 0 view .LVU358
 995 0048 4FF04509 		mov	r9, #69
 996              	.LVL85:
 914:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 997              		.loc 1 914 5 view .LVU359
 998 004c 3B68     		ldr	r3, [r7]
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 999              		.loc 1 910 16 view .LVU360
 1000 004e 4CEA022C 		orr	ip, ip, r2, lsl #8
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1001              		.loc 1 923 16 view .LVU361
 1002 0052 4EEA090E 		orr	lr, lr, r9
 921:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1003              		.loc 1 921 5 view .LVU362
 1004 0056 85F801A0 		strb	r10, [r5, #1]
 917:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1005              		.loc 1 917 47 view .LVU363
 1006 005a 190C     		lsrs	r1, r3, #16
 920:lwIP/src/core/ipv4/ip4.c ****     IPH_TOS_SET(iphdr, tos);
 1007              		.loc 1 920 5 view .LVU364
 1008 005c 85F80090 		strb	r9, [r5]
 914:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1009              		.loc 1 914 5 view .LVU365
 1010 0060 2B61     		str	r3, [r5, #16]	@ unaligned
 916:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 1011              		.loc 1 916 5 is_stmt 1 view .LVU366
 1012              	.LVL86:
 917:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1013              		.loc 1 917 5 view .LVU367
 920:lwIP/src/core/ipv4/ip4.c ****     IPH_TOS_SET(iphdr, tos);
 1014              		.loc 1 920 5 view .LVU368
 921:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1015              		.loc 1 921 5 view .LVU369
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1016              		.loc 1 923 5 view .LVU370
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1017              		.loc 1 923 13 is_stmt 0 view .LVU371
 1018 0062 11FA83F2 		uxtah	r2, r1, r3
 1019              	.LVL87:
 1020              	.LBB76:
 1021              	.LBB77:
 1022              		.loc 2 937 19 view .LVU372
 1023 0066 2389     		ldrh	r3, [r4, #8]
 1024              		.loc 2 937 19 view .LVU373
 1025              	.LBE77:
 1026              	.LBE76:
 930:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1027              		.loc 1 930 5 view .LVU374
 1028 0068 2749     		ldr	r1, .L123
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1029              		.loc 1 923 13 view .LVU375
 1030 006a 9644     		add	lr, lr, r2
 1031              	.LBB80:
 1032              	.LBB78:
 1033              		.loc 2 937 19 view .LVU376
 1034 006c 5BBA     		rev16	r3, r3
 1035              	.LBE78:
ARM GAS  /tmp/ccjJALFP.s 			page 58


 1036              	.LBE80:
 930:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1037              		.loc 1 930 5 view .LVU377
 1038 006e 0A88     		ldrh	r2, [r1]
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1039              		.loc 1 923 13 view .LVU378
 1040 0070 1EFA8CFC 		uxtah	ip, lr, ip
 1041              	.LVL88:
 925:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1042              		.loc 1 925 5 is_stmt 1 view .LVU379
 1043              	.LBB81:
 1044              	.LBI76:
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 1045              		.loc 2 934 30 view .LVU380
 1046              	.LBB79:
 1047              		.loc 2 937 3 view .LVU381
 1048              		.loc 2 937 3 is_stmt 0 view .LVU382
 1049              	.LBE79:
 1050              	.LBE81:
 925:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1051              		.loc 1 925 5 view .LVU383
 1052 0074 6B80     		strh	r3, [r5, #2]	@ unaligned
 927:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1053              		.loc 1 927 5 is_stmt 1 view .LVU384
 1054              	.LBB82:
 1055              	.LBB83:
 1056              		.loc 2 937 19 is_stmt 0 view .LVU385
 1057 0076 92FA92FE 		rev16	lr, r2
 1058              	.LBE83:
 1059              	.LBE82:
 934:lwIP/src/core/ipv4/ip4.c **** 
 1060              		.loc 1 934 5 view .LVU386
 1061 007a 0132     		adds	r2, r2, #1
 927:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1062              		.loc 1 927 13 view .LVU387
 1063 007c 1CFA83F3 		uxtah	r3, ip, r3
 1064              	.LVL89:
 929:lwIP/src/core/ipv4/ip4.c ****     IPH_ID_SET(iphdr, lwip_htons(ip_id));
 1065              		.loc 1 929 5 is_stmt 1 view .LVU388
 1066 0080 A871     		strb	r0, [r5, #6]
 1067 0082 E871     		strb	r0, [r5, #7]
 930:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1068              		.loc 1 930 5 view .LVU389
 1069              	.LVL90:
 1070              	.LBB85:
 1071              	.LBI82:
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 1072              		.loc 2 934 30 view .LVU390
 1073              	.LBB84:
 1074              		.loc 2 937 3 view .LVU391
 1075              		.loc 2 937 3 is_stmt 0 view .LVU392
 1076              	.LBE84:
 1077              	.LBE85:
 932:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1078              		.loc 1 932 13 view .LVU393
 1079 0084 13FA8EF3 		uxtah	r3, r3, lr
 1080              	.LVL91:
ARM GAS  /tmp/ccjJALFP.s 			page 59


 930:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1081              		.loc 1 930 5 view .LVU394
 1082 0088 A5F804E0 		strh	lr, [r5, #4]	@ unaligned
 932:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1083              		.loc 1 932 5 is_stmt 1 view .LVU395
 1084              	.LVL92:
 934:lwIP/src/core/ipv4/ip4.c **** 
 1085              		.loc 1 934 5 view .LVU396
 1086 008c 0A80     		strh	r2, [r1]	@ movhi
 936:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 1087              		.loc 1 936 5 view .LVU397
 936:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 1088              		.loc 1 936 8 is_stmt 0 view .LVU398
 1089 008e B8F1000F 		cmp	r8, #0
 1090 0092 32D0     		beq	.L121
 940:lwIP/src/core/ipv4/ip4.c ****     }
 1091              		.loc 1 940 7 is_stmt 1 view .LVU399
 1092 0094 D8F80020 		ldr	r2, [r8]
 1093              	.L111:
 944:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 1094              		.loc 1 944 13 is_stmt 0 view .LVU400
 1095 0098 13FA82F3 		uxtah	r3, r3, r2
 1096              	.LVL93:
 944:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 1097              		.loc 1 944 13 view .LVU401
 1098 009c EA60     		str	r2, [r5, #12]	@ unaligned
 944:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 1099              		.loc 1 944 5 is_stmt 1 view .LVU402
 1100              	.LVL94:
 945:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 1101              		.loc 1 945 5 view .LVU403
 945:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 1102              		.loc 1 945 13 is_stmt 0 view .LVU404
 1103 009e 03EB1243 		add	r3, r3, r2, lsr #16
 1104              	.LVL95:
 946:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + chk_sum;
 1105              		.loc 1 946 5 is_stmt 1 view .LVU405
 946:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + chk_sum;
 1106              		.loc 1 946 42 is_stmt 0 view .LVU406
 1107 00a2 9AB2     		uxth	r2, r3
 946:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + chk_sum;
 1108              		.loc 1 946 13 view .LVU407
 1109 00a4 02EB1343 		add	r3, r2, r3, lsr #16
 1110              	.LVL96:
 947:lwIP/src/core/ipv4/ip4.c ****     chk_sum = ~chk_sum;
 1111              		.loc 1 947 5 is_stmt 1 view .LVU408
 947:lwIP/src/core/ipv4/ip4.c ****     chk_sum = ~chk_sum;
 1112              		.loc 1 947 13 is_stmt 0 view .LVU409
 1113 00a8 03EB1343 		add	r3, r3, r3, lsr #16
 1114              	.LVL97:
 948:lwIP/src/core/ipv4/ip4.c ****     IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
 1115              		.loc 1 948 5 is_stmt 1 view .LVU410
 950:lwIP/src/core/ipv4/ip4.c ****     }
 1116              		.loc 1 950 7 view .LVU411
 950:lwIP/src/core/ipv4/ip4.c ****     }
 1117              		.loc 1 950 22 is_stmt 0 view .LVU412
 1118 00ac DB43     		mvns	r3, r3
ARM GAS  /tmp/ccjJALFP.s 			page 60


 1119              	.LVL98:
 950:lwIP/src/core/ipv4/ip4.c ****     }
 1120              		.loc 1 950 22 view .LVU413
 1121 00ae 6B81     		strh	r3, [r5, #10]	@ unaligned
 950:lwIP/src/core/ipv4/ip4.c ****     }
 1122              		.loc 1 950 22 view .LVU414
 1123              	.LBE75:
 978:lwIP/src/core/ipv4/ip4.c **** 
 1124              		.loc 1 978 24 is_stmt 1 view .LVU415
 980:lwIP/src/core/ipv4/ip4.c ****   ip4_debug_print(p);
 1125              		.loc 1 980 110 view .LVU416
 981:lwIP/src/core/ipv4/ip4.c **** 
 1126              		.loc 1 981 21 view .LVU417
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1127              		.loc 1 1001 3 view .LVU418
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1128              		.loc 1 1001 12 is_stmt 0 view .LVU419
 1129 00b0 B38B     		ldrh	r3, [r6, #28]
 1130              	.LVL99:
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1131              		.loc 1 1001 6 view .LVU420
 1132 00b2 ABB9     		cbnz	r3, .L122
 1133              	.LVL100:
 1134              	.L114:
1006:lwIP/src/core/ipv4/ip4.c ****   return netif->output(netif, p, dest);
 1135              		.loc 1 1006 67 is_stmt 1 view .LVU421
 1136              		.loc 1 1007 3 view .LVU422
 1137              		.loc 1 1007 10 is_stmt 0 view .LVU423
 1138 00b4 3A46     		mov	r2, r7
 1139 00b6 2146     		mov	r1, r4
 1140 00b8 3369     		ldr	r3, [r6, #16]
 1141 00ba 3046     		mov	r0, r6
 1142 00bc 9847     		blx	r3
 1143              	.LVL101:
 1144              	.L107:
 1145              		.loc 1 1007 10 view .LVU424
 1146              	.LBE74:
 1147              	.LBE73:
1008:lwIP/src/core/ipv4/ip4.c **** }
 1148              		.loc 1 1008 1 view .LVU425
 1149 00be 03B0     		add	sp, sp, #12
 1150              	.LCFI7:
 1151              		.cfi_remember_state
 1152              		.cfi_def_cfa_offset 36
 1153              		@ sp needed
 1154 00c0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1155              	.LVL102:
 1156              	.L119:
 1157              	.LCFI8:
 1158              		.cfi_restore_state
 852:lwIP/src/core/ipv4/ip4.c **** 
 1159              		.loc 1 852 3 is_stmt 1 discriminator 1 view .LVU426
 1160 00c4 1148     		ldr	r0, .L123+4
 1161              	.LVL103:
 852:lwIP/src/core/ipv4/ip4.c **** 
 1162              		.loc 1 852 3 is_stmt 0 discriminator 1 view .LVU427
 1163 00c6 FFF7FEFF 		bl	printf
ARM GAS  /tmp/ccjJALFP.s 			page 61


 1164              	.LVL104:
 1165              	.L104:
 852:lwIP/src/core/ipv4/ip4.c **** 
 1166              		.loc 1 852 3 is_stmt 1 discriminator 1 view .LVU428
 852:lwIP/src/core/ipv4/ip4.c **** 
 1167              		.loc 1 852 3 discriminator 1 view .LVU429
 852:lwIP/src/core/ipv4/ip4.c **** 
 1168              		.loc 1 852 3 discriminator 1 view .LVU430
 852:lwIP/src/core/ipv4/ip4.c **** 
 1169              		.loc 1 852 3 discriminator 1 view .LVU431
 852:lwIP/src/core/ipv4/ip4.c **** 
 1170              		.loc 1 852 3 discriminator 1 view .LVU432
 852:lwIP/src/core/ipv4/ip4.c **** 
 1171              		.loc 1 852 3 discriminator 1 view .LVU433
 1172 00ca FEE7     		b	.L104
 1173              	.LVL105:
 1174              	.L105:
 1175              	.LBB88:
 1176              	.LBB87:
 967:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too 
 1177              		.loc 1 967 5 view .LVU434
 967:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too 
 1178              		.loc 1 967 8 is_stmt 0 view .LVU435
 1179 00cc 4389     		ldrh	r3, [r0, #10]
 1180 00ce 132B     		cmp	r3, #19
 1181 00d0 16D9     		bls	.L113
 973:lwIP/src/core/ipv4/ip4.c ****     ip4_addr_copy(dest_addr, iphdr->dest);
 1182              		.loc 1 973 5 is_stmt 1 view .LVU436
 1183              	.LVL106:
 974:lwIP/src/core/ipv4/ip4.c ****     dest = &dest_addr;
 1184              		.loc 1 974 5 view .LVU437
 1185 00d2 4368     		ldr	r3, [r0, #4]
 975:lwIP/src/core/ipv4/ip4.c ****   }
 1186              		.loc 1 975 10 is_stmt 0 view .LVU438
 1187 00d4 01AF     		add	r7, sp, #4
 974:lwIP/src/core/ipv4/ip4.c ****     dest = &dest_addr;
 1188              		.loc 1 974 5 view .LVU439
 1189 00d6 1B69     		ldr	r3, [r3, #16]	@ unaligned
 1190 00d8 0193     		str	r3, [sp, #4]
 975:lwIP/src/core/ipv4/ip4.c ****   }
 1191              		.loc 1 975 5 is_stmt 1 view .LVU440
 1192              	.LVL107:
 978:lwIP/src/core/ipv4/ip4.c **** 
 1193              		.loc 1 978 24 view .LVU441
 980:lwIP/src/core/ipv4/ip4.c ****   ip4_debug_print(p);
 1194              		.loc 1 980 110 view .LVU442
 981:lwIP/src/core/ipv4/ip4.c **** 
 1195              		.loc 1 981 21 view .LVU443
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1196              		.loc 1 1001 3 view .LVU444
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1197              		.loc 1 1001 12 is_stmt 0 view .LVU445
 1198 00da B38B     		ldrh	r3, [r6, #28]
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1199              		.loc 1 1001 6 view .LVU446
 1200 00dc 002B     		cmp	r3, #0
 1201 00de E9D0     		beq	.L114
ARM GAS  /tmp/ccjJALFP.s 			page 62


 1202              	.LVL108:
 1203              	.L122:
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1204              		.loc 1 1001 18 view .LVU447
 1205 00e0 2289     		ldrh	r2, [r4, #8]
 1206 00e2 9A42     		cmp	r2, r3
 1207 00e4 E6D9     		bls	.L114
1002:lwIP/src/core/ipv4/ip4.c ****   }
 1208              		.loc 1 1002 5 is_stmt 1 view .LVU448
1002:lwIP/src/core/ipv4/ip4.c ****   }
 1209              		.loc 1 1002 12 is_stmt 0 view .LVU449
 1210 00e6 3A46     		mov	r2, r7
 1211 00e8 3146     		mov	r1, r6
 1212 00ea 2046     		mov	r0, r4
 1213 00ec FFF7FEFF 		bl	ip4_frag
 1214              	.LVL109:
 1215 00f0 E5E7     		b	.L107
 1216              	.LVL110:
 1217              	.L120:
 1218              	.LBB86:
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1219              		.loc 1 904 5 is_stmt 1 view .LVU450
 1220 00f2 0748     		ldr	r0, .L123+8
 1221 00f4 FFF7FEFF 		bl	printf
 1222              	.LVL111:
 1223              	.L109:
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1224              		.loc 1 904 5 view .LVU451
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1225              		.loc 1 904 5 view .LVU452
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1226              		.loc 1 904 5 view .LVU453
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1227              		.loc 1 904 5 view .LVU454
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1228              		.loc 1 904 5 view .LVU455
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1229              		.loc 1 904 5 view .LVU456
 1230 00f8 FEE7     		b	.L109
 1231              	.LVL112:
 1232              	.L121:
 937:lwIP/src/core/ipv4/ip4.c ****     } else {
 1233              		.loc 1 937 7 view .LVU457
 1234 00fa 064A     		ldr	r2, .L123+12
 1235 00fc 1268     		ldr	r2, [r2]
 1236 00fe CBE7     		b	.L111
 1237              	.LVL113:
 1238              	.L113:
 900:lwIP/src/core/ipv4/ip4.c ****     }
 1239              		.loc 1 900 14 is_stmt 0 view .LVU458
 1240 0100 6FF00100 		mvn	r0, #1
 1241 0104 DBE7     		b	.L107
 1242              	.L124:
 1243 0106 00BF     		.align	2
 1244              	.L123:
 1245 0108 00000000 		.word	.LANCHOR0
 1246 010c 00000000 		.word	.LC0
ARM GAS  /tmp/ccjJALFP.s 			page 63


 1247 0110 0C000000 		.word	.LC1
 1248 0114 00000000 		.word	ip_addr_any
 1249              	.LBE86:
 1250              	.LBE87:
 1251              	.LBE88:
 1252              		.cfi_endproc
 1253              	.LFE109:
 1255              		.section	.text.ip4_output,"ax",%progbits
 1256              		.align	1
 1257              		.p2align 2,,3
 1258              		.global	ip4_output
 1259              		.syntax unified
 1260              		.thumb
 1261              		.thumb_func
 1262              		.fpu fpv4-sp-d16
 1264              	ip4_output:
 1265              	.LVL114:
 1266              	.LFB110:
1009:lwIP/src/core/ipv4/ip4.c **** 
1010:lwIP/src/core/ipv4/ip4.c **** /**
1011:lwIP/src/core/ipv4/ip4.c ****  * Simple interface to ip_output_if. It finds the outgoing network
1012:lwIP/src/core/ipv4/ip4.c ****  * interface and calls upon ip_output_if to do the actual work.
1013:lwIP/src/core/ipv4/ip4.c ****  *
1014:lwIP/src/core/ipv4/ip4.c ****  * @param p the packet to send (p->payload points to the data, e.g. next
1015:lwIP/src/core/ipv4/ip4.c ****             protocol header; if dest == LWIP_IP_HDRINCL, p already includes an
1016:lwIP/src/core/ipv4/ip4.c ****             IP header and p->payload points to that IP header)
1017:lwIP/src/core/ipv4/ip4.c ****  * @param src the source IP address to send from (if src == IP4_ADDR_ANY, the
1018:lwIP/src/core/ipv4/ip4.c ****  *         IP  address of the netif used to send is used as source address)
1019:lwIP/src/core/ipv4/ip4.c ****  * @param dest the destination IP address to send the packet to
1020:lwIP/src/core/ipv4/ip4.c ****  * @param ttl the TTL value to be set in the IP header
1021:lwIP/src/core/ipv4/ip4.c ****  * @param tos the TOS value to be set in the IP header
1022:lwIP/src/core/ipv4/ip4.c ****  * @param proto the PROTOCOL to be set in the IP header
1023:lwIP/src/core/ipv4/ip4.c ****  *
1024:lwIP/src/core/ipv4/ip4.c ****  * @return ERR_RTE if no route is found
1025:lwIP/src/core/ipv4/ip4.c ****  *         see ip_output_if() for more return values
1026:lwIP/src/core/ipv4/ip4.c ****  */
1027:lwIP/src/core/ipv4/ip4.c **** err_t
1028:lwIP/src/core/ipv4/ip4.c **** ip4_output(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
1029:lwIP/src/core/ipv4/ip4.c ****            u8_t ttl, u8_t tos, u8_t proto)
1030:lwIP/src/core/ipv4/ip4.c **** {
 1267              		.loc 1 1030 1 is_stmt 1 view -0
 1268              		.cfi_startproc
 1269              		@ args = 8, pretend = 0, frame = 8
 1270              		@ frame_needed = 0, uses_anonymous_args = 0
 1271              		.loc 1 1030 1 is_stmt 0 view .LVU460
 1272 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1273              	.LCFI9:
 1274              		.cfi_def_cfa_offset 36
 1275              		.cfi_offset 4, -36
 1276              		.cfi_offset 5, -32
 1277              		.cfi_offset 6, -28
 1278              		.cfi_offset 7, -24
 1279              		.cfi_offset 8, -20
 1280              		.cfi_offset 9, -16
 1281              		.cfi_offset 10, -12
 1282              		.cfi_offset 11, -8
 1283              		.cfi_offset 14, -4
ARM GAS  /tmp/ccjJALFP.s 			page 64


 1284 0004 9946     		mov	r9, r3
1031:lwIP/src/core/ipv4/ip4.c ****   struct netif *netif;
1032:lwIP/src/core/ipv4/ip4.c **** 
1033:lwIP/src/core/ipv4/ip4.c ****   LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 1285              		.loc 1 1033 3 view .LVU461
 1286 0006 837B     		ldrb	r3, [r0, #14]	@ zero_extendqisi2
 1287              	.LVL115:
1030:lwIP/src/core/ipv4/ip4.c ****   struct netif *netif;
 1288              		.loc 1 1030 1 view .LVU462
 1289 0008 83B0     		sub	sp, sp, #12
 1290              	.LCFI10:
 1291              		.cfi_def_cfa_offset 48
 1292              		.loc 1 1033 3 view .LVU463
 1293 000a 012B     		cmp	r3, #1
1030:lwIP/src/core/ipv4/ip4.c ****   struct netif *netif;
 1294              		.loc 1 1030 1 view .LVU464
 1295 000c 9DF830A0 		ldrb	r10, [sp, #48]	@ zero_extendqisi2
1031:lwIP/src/core/ipv4/ip4.c ****   struct netif *netif;
 1296              		.loc 1 1031 3 is_stmt 1 view .LVU465
 1297              		.loc 1 1033 3 view .LVU466
 1298              		.loc 1 1033 3 view .LVU467
1030:lwIP/src/core/ipv4/ip4.c ****   struct netif *netif;
 1299              		.loc 1 1030 1 is_stmt 0 view .LVU468
 1300 0010 9DF834B0 		ldrb	fp, [sp, #52]	@ zero_extendqisi2
 1301              		.loc 1 1033 3 view .LVU469
 1302 0014 5FD1     		bne	.L152
 1303              		.loc 1 1033 3 is_stmt 1 view .LVU470
1034:lwIP/src/core/ipv4/ip4.c **** 
1035:lwIP/src/core/ipv4/ip4.c ****   if ((netif = ip4_route_src(src, dest)) == NULL) {
 1304              		.loc 1 1035 3 view .LVU471
 1305              	.LVL116:
 1306              	.LBB102:
 1307              	.LBI102:
 152:lwIP/src/core/ipv4/ip4.c **** {
 1308              		.loc 1 152 1 view .LVU472
 1309              	.LBB103:
 216:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 1310              		.loc 1 216 3 view .LVU473
 216:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 1311              		.loc 1 216 22 is_stmt 0 view .LVU474
 1312 0016 464B     		ldr	r3, .L155
 1313 0018 1E68     		ldr	r6, [r3]
 216:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 1314              		.loc 1 216 6 view .LVU475
 1315 001a 002E     		cmp	r6, #0
 1316 001c 5FD0     		beq	.L142
 216:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 1317              		.loc 1 216 62 view .LVU476
 1318 001e 96F82530 		ldrb	r3, [r6, #37]	@ zero_extendqisi2
 1319 0022 03F00503 		and	r3, r3, #5
 1320 0026 052B     		cmp	r3, #5
 1321 0028 59D1     		bne	.L142
 216:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 1322              		.loc 1 216 98 view .LVU477
 1323 002a 3368     		ldr	r3, [r6]
 1324 002c 002B     		cmp	r3, #0
 1325 002e 56D0     		beq	.L142
ARM GAS  /tmp/ccjJALFP.s 			page 65


 1326              	.LVL117:
 216:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 1327              		.loc 1 216 98 view .LVU478
 1328              	.LBE103:
 1329              	.LBE102:
1036:lwIP/src/core/ipv4/ip4.c ****     LWIP_DEBUGF(IP_DEBUG, ("ip4_output: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
1037:lwIP/src/core/ipv4/ip4.c ****                            ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16
1038:lwIP/src/core/ipv4/ip4.c ****     IP_STATS_INC(ip.rterr);
1039:lwIP/src/core/ipv4/ip4.c ****     return ERR_RTE;
1040:lwIP/src/core/ipv4/ip4.c ****   }
1041:lwIP/src/core/ipv4/ip4.c **** 
1042:lwIP/src/core/ipv4/ip4.c ****   return ip4_output_if(p, src, dest, ttl, tos, proto, netif);
 1330              		.loc 1 1042 3 is_stmt 1 view .LVU479
 1331              	.LBB104:
 1332              	.LBI104:
 787:lwIP/src/core/ipv4/ip4.c ****               u8_t ttl, u8_t tos,
 1333              		.loc 1 787 1 view .LVU480
 1334              	.LBB105:
 807:lwIP/src/core/ipv4/ip4.c ****   if (dest != LWIP_IP_HDRINCL) {
 1335              		.loc 1 807 3 view .LVU481
 808:lwIP/src/core/ipv4/ip4.c ****     if (ip4_addr_isany(src)) {
 1336              		.loc 1 808 3 view .LVU482
 1337 0030 0446     		mov	r4, r0
 1338 0032 1746     		mov	r7, r2
 808:lwIP/src/core/ipv4/ip4.c ****     if (ip4_addr_isany(src)) {
 1339              		.loc 1 808 6 is_stmt 0 view .LVU483
 1340 0034 002A     		cmp	r2, #0
 1341 0036 57D0     		beq	.L129
 809:lwIP/src/core/ipv4/ip4.c ****       src_used = netif_ip4_addr(netif);
 1342              		.loc 1 809 5 is_stmt 1 view .LVU484
 1343 0038 8846     		mov	r8, r1
 809:lwIP/src/core/ipv4/ip4.c ****       src_used = netif_ip4_addr(netif);
 1344              		.loc 1 809 8 is_stmt 0 view .LVU485
 1345 003a 0029     		cmp	r1, #0
 1346 003c 68D0     		beq	.L130
 809:lwIP/src/core/ipv4/ip4.c ****       src_used = netif_ip4_addr(netif);
 1347              		.loc 1 809 9 view .LVU486
 1348 003e 0B68     		ldr	r3, [r1]
 1349 0040 002B     		cmp	r3, #0
 1350 0042 65D0     		beq	.L130
 1351              	.LVL118:
 1352              	.L131:
 818:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_OPTIONS_SEND */
 1353              		.loc 1 818 3 is_stmt 1 view .LVU487
 1354              	.LBB106:
 1355              	.LBI106:
 827:lwIP/src/core/ipv4/ip4.c ****                   u8_t ttl, u8_t tos,
 1356              		.loc 1 827 1 view .LVU488
 1357              	.LBB107:
 845:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_t dest_addr;
 1358              		.loc 1 845 3 view .LVU489
 846:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1359              		.loc 1 846 3 view .LVU490
 848:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1360              		.loc 1 848 3 view .LVU491
 851:lwIP/src/core/ipv4/ip4.c ****   LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 1361              		.loc 1 851 28 view .LVU492
ARM GAS  /tmp/ccjJALFP.s 			page 66


 852:lwIP/src/core/ipv4/ip4.c **** 
 1362              		.loc 1 852 3 view .LVU493
 852:lwIP/src/core/ipv4/ip4.c **** 
 1363              		.loc 1 852 3 view .LVU494
 1364              	.LBB108:
 1365              	.LBI108:
 827:lwIP/src/core/ipv4/ip4.c ****                   u8_t ttl, u8_t tos,
 1366              		.loc 1 827 1 view .LVU495
 1367              	.LBB109:
 852:lwIP/src/core/ipv4/ip4.c **** 
 1368              		.loc 1 852 3 view .LVU496
 854:lwIP/src/core/ipv4/ip4.c **** 
 1369              		.loc 1 854 37 view .LVU497
 857:lwIP/src/core/ipv4/ip4.c ****     u16_t ip_hlen = IP_HLEN;
 1370              		.loc 1 857 3 view .LVU498
 1371              	.LBB110:
 858:lwIP/src/core/ipv4/ip4.c **** #if IP_OPTIONS_SEND
 1372              		.loc 1 858 5 view .LVU499
 895:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in
 1373              		.loc 1 895 5 view .LVU500
 895:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in
 1374              		.loc 1 895 9 is_stmt 0 view .LVU501
 1375 0044 1421     		movs	r1, #20
 1376              	.LVL119:
 895:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in
 1377              		.loc 1 895 9 view .LVU502
 1378 0046 2046     		mov	r0, r4
 1379              	.LVL120:
 895:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in
 1380              		.loc 1 895 9 view .LVU503
 1381 0048 FFF7FEFF 		bl	pbuf_add_header
 1382              	.LVL121:
 895:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in
 1383              		.loc 1 895 8 view .LVU504
 1384 004c 0028     		cmp	r0, #0
 1385 004e 61D1     		bne	.L138
 903:lwIP/src/core/ipv4/ip4.c ****     LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 1386              		.loc 1 903 5 is_stmt 1 view .LVU505
 1387              	.LVL122:
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1388              		.loc 1 904 5 view .LVU506
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1389              		.loc 1 904 5 view .LVU507
 1390 0050 6389     		ldrh	r3, [r4, #10]
 1391 0052 132B     		cmp	r3, #19
 1392 0054 61D9     		bls	.L153
 903:lwIP/src/core/ipv4/ip4.c ****     LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 1393              		.loc 1 903 11 is_stmt 0 view .LVU508
 1394 0056 6568     		ldr	r5, [r4, #4]
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1395              		.loc 1 904 5 is_stmt 1 view .LVU509
 907:lwIP/src/core/ipv4/ip4.c ****     IPH_PROTO_SET(iphdr, proto);
 1396              		.loc 1 907 5 view .LVU510
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1397              		.loc 1 910 16 is_stmt 0 view .LVU511
 1398 0058 4BEA0923 		orr	r3, fp, r9, lsl #8
 920:lwIP/src/core/ipv4/ip4.c ****     IPH_TOS_SET(iphdr, tos);
ARM GAS  /tmp/ccjJALFP.s 			page 67


 1399              		.loc 1 920 5 view .LVU512
 1400 005c 4521     		movs	r1, #69
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1401              		.loc 1 923 16 view .LVU513
 1402 005e 4FEA0A22 		lsl	r2, r10, #8
 907:lwIP/src/core/ipv4/ip4.c ****     IPH_PROTO_SET(iphdr, proto);
 1403              		.loc 1 907 5 view .LVU514
 1404 0062 85F80890 		strb	r9, [r5, #8]
 1405              	.LVL123:
 908:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1406              		.loc 1 908 5 is_stmt 1 view .LVU515
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1407              		.loc 1 910 16 is_stmt 0 view .LVU516
 1408 0066 4FEA232E 		asr	lr, r3, #8
 908:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1409              		.loc 1 908 5 view .LVU517
 1410 006a 85F809B0 		strb	fp, [r5, #9]
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1411              		.loc 1 910 5 is_stmt 1 view .LVU518
 1412              	.LVL124:
 914:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1413              		.loc 1 914 5 view .LVU519
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1414              		.loc 1 923 16 is_stmt 0 view .LVU520
 1415 006e 0A43     		orrs	r2, r2, r1
 914:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1416              		.loc 1 914 5 view .LVU521
 1417 0070 D7F80090 		ldr	r9, [r7]
 1418              	.LVL125:
 910:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1419              		.loc 1 910 16 view .LVU522
 1420 0074 4EEA032E 		orr	lr, lr, r3, lsl #8
 921:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1421              		.loc 1 921 5 view .LVU523
 1422 0078 85F801A0 		strb	r10, [r5, #1]
 917:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1423              		.loc 1 917 47 view .LVU524
 1424 007c 4FEA194C 		lsr	ip, r9, #16
 920:lwIP/src/core/ipv4/ip4.c ****     IPH_TOS_SET(iphdr, tos);
 1425              		.loc 1 920 5 view .LVU525
 1426 0080 2970     		strb	r1, [r5]
 1427              	.LBB111:
 1428              	.LBB112:
 1429              		.loc 2 937 19 view .LVU526
 1430 0082 2389     		ldrh	r3, [r4, #8]
 1431              	.LVL126:
 1432              		.loc 2 937 19 view .LVU527
 1433              	.LBE112:
 1434              	.LBE111:
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1435              		.loc 1 923 13 view .LVU528
 1436 0084 1CFA89FC 		uxtah	ip, ip, r9
 940:lwIP/src/core/ipv4/ip4.c ****     }
 1437              		.loc 1 940 7 view .LVU529
 1438 0088 D8F80010 		ldr	r1, [r8]
 1439              	.LBB115:
 1440              	.LBB113:
ARM GAS  /tmp/ccjJALFP.s 			page 68


 1441              		.loc 2 937 19 view .LVU530
 1442 008c 5BBA     		rev16	r3, r3
 1443              	.LBE113:
 1444              	.LBE115:
 914:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1445              		.loc 1 914 5 view .LVU531
 1446 008e C5F81090 		str	r9, [r5, #16]	@ unaligned
 916:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 1447              		.loc 1 916 5 is_stmt 1 view .LVU532
 917:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1448              		.loc 1 917 5 view .LVU533
 920:lwIP/src/core/ipv4/ip4.c ****     IPH_TOS_SET(iphdr, tos);
 1449              		.loc 1 920 5 view .LVU534
 921:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1450              		.loc 1 921 5 view .LVU535
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1451              		.loc 1 923 5 view .LVU536
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1452              		.loc 1 923 13 is_stmt 0 view .LVU537
 1453 0092 6244     		add	r2, r2, ip
 930:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1454              		.loc 1 930 5 view .LVU538
 1455 0094 DFF8A4C0 		ldr	ip, .L155+12
 925:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1456              		.loc 1 925 5 view .LVU539
 1457 0098 6B80     		strh	r3, [r5, #2]	@ unaligned
 923:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1458              		.loc 1 923 13 view .LVU540
 1459 009a 12FA8EFE 		uxtah	lr, r2, lr
 1460              	.LVL127:
 925:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1461              		.loc 1 925 5 is_stmt 1 view .LVU541
 1462              	.LBB116:
 1463              	.LBI111:
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 1464              		.loc 2 934 30 view .LVU542
 1465              	.LBB114:
 1466              		.loc 2 937 3 view .LVU543
 1467              	.LBE114:
 1468              	.LBE116:
 927:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1469              		.loc 1 927 5 view .LVU544
 930:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1470              		.loc 1 930 5 is_stmt 0 view .LVU545
 1471 009e BCF80020 		ldrh	r2, [ip]
 1472 00a2 E960     		str	r1, [r5, #12]	@ unaligned
 927:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1473              		.loc 1 927 13 view .LVU546
 1474 00a4 1EFA83F3 		uxtah	r3, lr, r3
 1475              	.LVL128:
 929:lwIP/src/core/ipv4/ip4.c ****     IPH_ID_SET(iphdr, lwip_htons(ip_id));
 1476              		.loc 1 929 5 is_stmt 1 view .LVU547
 1477              	.LBB117:
 1478              	.LBB118:
 1479              		.loc 2 937 19 is_stmt 0 view .LVU548
 1480 00a8 92FA92FE 		rev16	lr, r2
 1481              	.LBE118:
ARM GAS  /tmp/ccjJALFP.s 			page 69


 1482              	.LBE117:
 934:lwIP/src/core/ipv4/ip4.c **** 
 1483              		.loc 1 934 5 view .LVU549
 1484 00ac 0132     		adds	r2, r2, #1
 929:lwIP/src/core/ipv4/ip4.c ****     IPH_ID_SET(iphdr, lwip_htons(ip_id));
 1485              		.loc 1 929 5 view .LVU550
 1486 00ae A871     		strb	r0, [r5, #6]
 932:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1487              		.loc 1 932 13 view .LVU551
 1488 00b0 13FA8EF3 		uxtah	r3, r3, lr
 1489              	.LVL129:
 929:lwIP/src/core/ipv4/ip4.c ****     IPH_ID_SET(iphdr, lwip_htons(ip_id));
 1490              		.loc 1 929 5 view .LVU552
 1491 00b4 E871     		strb	r0, [r5, #7]
 930:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1492              		.loc 1 930 5 is_stmt 1 view .LVU553
 1493              	.LVL130:
 1494              	.LBB120:
 1495              	.LBI117:
 934:STM32_XPD/CMSIS/Include/cmsis_gcc.h **** {
 1496              		.loc 2 934 30 view .LVU554
 1497              	.LBB119:
 1498              		.loc 2 937 3 view .LVU555
 1499              		.loc 2 937 3 is_stmt 0 view .LVU556
 1500              	.LBE119:
 1501              	.LBE120:
 934:lwIP/src/core/ipv4/ip4.c **** 
 1502              		.loc 1 934 5 view .LVU557
 1503 00b6 ACF80020 		strh	r2, [ip]	@ movhi
 944:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 1504              		.loc 1 944 13 view .LVU558
 1505 00ba 13FA81F3 		uxtah	r3, r3, r1
 930:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1506              		.loc 1 930 5 view .LVU559
 1507 00be A5F804E0 		strh	lr, [r5, #4]	@ unaligned
 932:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1508              		.loc 1 932 5 is_stmt 1 view .LVU560
 934:lwIP/src/core/ipv4/ip4.c **** 
 1509              		.loc 1 934 5 view .LVU561
 936:lwIP/src/core/ipv4/ip4.c ****       ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 1510              		.loc 1 936 5 view .LVU562
 940:lwIP/src/core/ipv4/ip4.c ****     }
 1511              		.loc 1 940 7 view .LVU563
 944:lwIP/src/core/ipv4/ip4.c ****     chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 1512              		.loc 1 944 5 view .LVU564
 1513              	.LVL131:
 945:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 1514              		.loc 1 945 5 view .LVU565
 945:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 1515              		.loc 1 945 13 is_stmt 0 view .LVU566
 1516 00c2 03EB1143 		add	r3, r3, r1, lsr #16
 1517              	.LVL132:
 946:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + chk_sum;
 1518              		.loc 1 946 5 is_stmt 1 view .LVU567
 946:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + chk_sum;
 1519              		.loc 1 946 42 is_stmt 0 view .LVU568
 1520 00c6 9AB2     		uxth	r2, r3
ARM GAS  /tmp/ccjJALFP.s 			page 70


 946:lwIP/src/core/ipv4/ip4.c ****     chk_sum = (chk_sum >> 16) + chk_sum;
 1521              		.loc 1 946 13 view .LVU569
 1522 00c8 02EB1343 		add	r3, r2, r3, lsr #16
 1523              	.LVL133:
 947:lwIP/src/core/ipv4/ip4.c ****     chk_sum = ~chk_sum;
 1524              		.loc 1 947 5 is_stmt 1 view .LVU570
 947:lwIP/src/core/ipv4/ip4.c ****     chk_sum = ~chk_sum;
 1525              		.loc 1 947 13 is_stmt 0 view .LVU571
 1526 00cc 03EB1343 		add	r3, r3, r3, lsr #16
 1527              	.LVL134:
 948:lwIP/src/core/ipv4/ip4.c ****     IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
 1528              		.loc 1 948 5 is_stmt 1 view .LVU572
 950:lwIP/src/core/ipv4/ip4.c ****     }
 1529              		.loc 1 950 7 view .LVU573
 950:lwIP/src/core/ipv4/ip4.c ****     }
 1530              		.loc 1 950 22 is_stmt 0 view .LVU574
 1531 00d0 DB43     		mvns	r3, r3
 1532              	.LVL135:
 950:lwIP/src/core/ipv4/ip4.c ****     }
 1533              		.loc 1 950 22 view .LVU575
 1534 00d2 6B81     		strh	r3, [r5, #10]	@ unaligned
 1535              	.LBE110:
 1536 00d4 0FE0     		b	.L134
 1537              	.LVL136:
 1538              	.L152:
 950:lwIP/src/core/ipv4/ip4.c ****     }
 1539              		.loc 1 950 22 view .LVU576
 1540              	.LBE109:
 1541              	.LBE108:
 1542              	.LBE107:
 1543              	.LBE106:
 1544              	.LBE105:
 1545              	.LBE104:
1033:lwIP/src/core/ipv4/ip4.c **** 
 1546              		.loc 1 1033 3 is_stmt 1 discriminator 1 view .LVU577
 1547 00d6 1748     		ldr	r0, .L155+4
 1548              	.LVL137:
1033:lwIP/src/core/ipv4/ip4.c **** 
 1549              		.loc 1 1033 3 is_stmt 0 discriminator 1 view .LVU578
 1550 00d8 FFF7FEFF 		bl	printf
 1551              	.LVL138:
 1552              	.L127:
1033:lwIP/src/core/ipv4/ip4.c **** 
 1553              		.loc 1 1033 3 is_stmt 1 discriminator 1 view .LVU579
1033:lwIP/src/core/ipv4/ip4.c **** 
 1554              		.loc 1 1033 3 discriminator 1 view .LVU580
1033:lwIP/src/core/ipv4/ip4.c **** 
 1555              		.loc 1 1033 3 discriminator 1 view .LVU581
1033:lwIP/src/core/ipv4/ip4.c **** 
 1556              		.loc 1 1033 3 discriminator 1 view .LVU582
1033:lwIP/src/core/ipv4/ip4.c **** 
 1557              		.loc 1 1033 3 discriminator 1 view .LVU583
1033:lwIP/src/core/ipv4/ip4.c **** 
 1558              		.loc 1 1033 3 discriminator 1 view .LVU584
 1559 00dc FEE7     		b	.L127
 1560              	.LVL139:
 1561              	.L142:
ARM GAS  /tmp/ccjJALFP.s 			page 71


1039:lwIP/src/core/ipv4/ip4.c ****   }
 1562              		.loc 1 1039 12 is_stmt 0 view .LVU585
 1563 00de 6FF00300 		mvn	r0, #3
 1564              	.LVL140:
 1565              	.L149:
1043:lwIP/src/core/ipv4/ip4.c **** }
 1566              		.loc 1 1043 1 view .LVU586
 1567 00e2 03B0     		add	sp, sp, #12
 1568              	.LCFI11:
 1569              		.cfi_remember_state
 1570              		.cfi_def_cfa_offset 36
 1571              		@ sp needed
 1572 00e4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1573              	.LVL141:
 1574              	.L129:
 1575              	.LCFI12:
 1576              		.cfi_restore_state
 1577              	.LBB132:
 1578              	.LBB130:
 818:lwIP/src/core/ipv4/ip4.c **** #endif /* IP_OPTIONS_SEND */
 1579              		.loc 1 818 3 is_stmt 1 view .LVU587
 1580              	.LBB128:
 827:lwIP/src/core/ipv4/ip4.c ****                   u8_t ttl, u8_t tos,
 1581              		.loc 1 827 1 view .LVU588
 1582              	.LBB126:
 845:lwIP/src/core/ipv4/ip4.c ****   ip4_addr_t dest_addr;
 1583              		.loc 1 845 3 view .LVU589
 846:lwIP/src/core/ipv4/ip4.c **** #if CHECKSUM_GEN_IP_INLINE
 1584              		.loc 1 846 3 view .LVU590
 848:lwIP/src/core/ipv4/ip4.c **** #endif /* CHECKSUM_GEN_IP_INLINE */
 1585              		.loc 1 848 3 view .LVU591
 851:lwIP/src/core/ipv4/ip4.c ****   LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 1586              		.loc 1 851 28 view .LVU592
 852:lwIP/src/core/ipv4/ip4.c **** 
 1587              		.loc 1 852 3 view .LVU593
 852:lwIP/src/core/ipv4/ip4.c **** 
 1588              		.loc 1 852 3 view .LVU594
 1589              	.LBB124:
 827:lwIP/src/core/ipv4/ip4.c ****                   u8_t ttl, u8_t tos,
 1590              		.loc 1 827 1 view .LVU595
 1591              	.LBB122:
 852:lwIP/src/core/ipv4/ip4.c **** 
 1592              		.loc 1 852 3 view .LVU596
 854:lwIP/src/core/ipv4/ip4.c **** 
 1593              		.loc 1 854 37 view .LVU597
 857:lwIP/src/core/ipv4/ip4.c ****     u16_t ip_hlen = IP_HLEN;
 1594              		.loc 1 857 3 view .LVU598
 967:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too 
 1595              		.loc 1 967 5 view .LVU599
 967:lwIP/src/core/ipv4/ip4.c ****       LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too 
 1596              		.loc 1 967 8 is_stmt 0 view .LVU600
 1597 00e8 4389     		ldrh	r3, [r0, #10]
 1598 00ea 132B     		cmp	r3, #19
 1599 00ec 12D9     		bls	.L138
 973:lwIP/src/core/ipv4/ip4.c ****     ip4_addr_copy(dest_addr, iphdr->dest);
 1600              		.loc 1 973 5 is_stmt 1 view .LVU601
 1601              	.LVL142:
ARM GAS  /tmp/ccjJALFP.s 			page 72


 974:lwIP/src/core/ipv4/ip4.c ****     dest = &dest_addr;
 1602              		.loc 1 974 5 view .LVU602
 1603 00ee 6368     		ldr	r3, [r4, #4]
 975:lwIP/src/core/ipv4/ip4.c ****   }
 1604              		.loc 1 975 10 is_stmt 0 view .LVU603
 1605 00f0 01AF     		add	r7, sp, #4
 974:lwIP/src/core/ipv4/ip4.c ****     dest = &dest_addr;
 1606              		.loc 1 974 5 view .LVU604
 1607 00f2 1B69     		ldr	r3, [r3, #16]	@ unaligned
 1608 00f4 0193     		str	r3, [sp, #4]
 975:lwIP/src/core/ipv4/ip4.c ****   }
 1609              		.loc 1 975 5 is_stmt 1 view .LVU605
 1610              	.LVL143:
 1611              	.L134:
 978:lwIP/src/core/ipv4/ip4.c **** 
 1612              		.loc 1 978 24 view .LVU606
 980:lwIP/src/core/ipv4/ip4.c ****   ip4_debug_print(p);
 1613              		.loc 1 980 110 view .LVU607
 981:lwIP/src/core/ipv4/ip4.c **** 
 1614              		.loc 1 981 21 view .LVU608
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1615              		.loc 1 1001 3 view .LVU609
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1616              		.loc 1 1001 12 is_stmt 0 view .LVU610
 1617 00f6 B38B     		ldrh	r3, [r6, #28]
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1618              		.loc 1 1001 6 view .LVU611
 1619 00f8 13B1     		cbz	r3, .L135
1001:lwIP/src/core/ipv4/ip4.c ****     return ip4_frag(p, netif, dest);
 1620              		.loc 1 1001 18 view .LVU612
 1621 00fa 2289     		ldrh	r2, [r4, #8]
 1622 00fc 9A42     		cmp	r2, r3
 1623 00fe 10D8     		bhi	.L154
 1624              	.L135:
1006:lwIP/src/core/ipv4/ip4.c ****   return netif->output(netif, p, dest);
 1625              		.loc 1 1006 67 is_stmt 1 view .LVU613
1007:lwIP/src/core/ipv4/ip4.c **** }
 1626              		.loc 1 1007 3 view .LVU614
1007:lwIP/src/core/ipv4/ip4.c **** }
 1627              		.loc 1 1007 10 is_stmt 0 view .LVU615
 1628 0100 3A46     		mov	r2, r7
 1629 0102 2146     		mov	r1, r4
 1630 0104 3369     		ldr	r3, [r6, #16]
 1631 0106 3046     		mov	r0, r6
 1632 0108 9847     		blx	r3
 1633              	.LVL144:
1007:lwIP/src/core/ipv4/ip4.c **** }
 1634              		.loc 1 1007 10 view .LVU616
 1635              	.LBE122:
 1636              	.LBE124:
 1637              	.LBE126:
 1638              	.LBE128:
 1639              	.LBE130:
 1640              	.LBE132:
 1641              		.loc 1 1043 1 view .LVU617
 1642 010a 03B0     		add	sp, sp, #12
 1643              	.LCFI13:
ARM GAS  /tmp/ccjJALFP.s 			page 73


 1644              		.cfi_remember_state
 1645              		.cfi_def_cfa_offset 36
 1646              		@ sp needed
 1647 010c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1648              	.LVL145:
 1649              	.L130:
 1650              	.LCFI14:
 1651              		.cfi_restore_state
 1652              	.LBB133:
 1653              	.LBB131:
 810:lwIP/src/core/ipv4/ip4.c ****     }
 1654              		.loc 1 810 7 is_stmt 1 view .LVU618
 810:lwIP/src/core/ipv4/ip4.c ****     }
 1655              		.loc 1 810 16 is_stmt 0 view .LVU619
 1656 0110 B046     		mov	r8, r6
 810:lwIP/src/core/ipv4/ip4.c ****     }
 1657              		.loc 1 810 16 view .LVU620
 1658 0112 97E7     		b	.L131
 1659              	.LVL146:
 1660              	.L138:
 1661              	.LBB129:
 1662              	.LBB127:
 1663              	.LBB125:
 1664              	.LBB123:
 971:lwIP/src/core/ipv4/ip4.c ****     }
 1665              		.loc 1 971 14 view .LVU621
 1666 0114 6FF00100 		mvn	r0, #1
 1667              	.LVL147:
 971:lwIP/src/core/ipv4/ip4.c ****     }
 1668              		.loc 1 971 14 view .LVU622
 1669 0118 E3E7     		b	.L149
 1670              	.LVL148:
 1671              	.L153:
 1672              	.LBB121:
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1673              		.loc 1 904 5 is_stmt 1 view .LVU623
 1674 011a 0748     		ldr	r0, .L155+8
 1675 011c FFF7FEFF 		bl	printf
 1676              	.LVL149:
 1677              	.L133:
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1678              		.loc 1 904 5 view .LVU624
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1679              		.loc 1 904 5 view .LVU625
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1680              		.loc 1 904 5 view .LVU626
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1681              		.loc 1 904 5 view .LVU627
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1682              		.loc 1 904 5 view .LVU628
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1683              		.loc 1 904 5 view .LVU629
 1684 0120 FEE7     		b	.L133
 1685              	.LVL150:
 1686              	.L154:
 904:lwIP/src/core/ipv4/ip4.c ****                 (p->len >= sizeof(struct ip_hdr)));
 1687              		.loc 1 904 5 is_stmt 0 view .LVU630
ARM GAS  /tmp/ccjJALFP.s 			page 74


 1688              	.LBE121:
1002:lwIP/src/core/ipv4/ip4.c ****   }
 1689              		.loc 1 1002 5 is_stmt 1 view .LVU631
1002:lwIP/src/core/ipv4/ip4.c ****   }
 1690              		.loc 1 1002 12 is_stmt 0 view .LVU632
 1691 0122 3A46     		mov	r2, r7
 1692 0124 3146     		mov	r1, r6
 1693 0126 2046     		mov	r0, r4
 1694 0128 FFF7FEFF 		bl	ip4_frag
 1695              	.LVL151:
 1696 012c D9E7     		b	.L149
 1697              	.L156:
 1698 012e 00BF     		.align	2
 1699              	.L155:
 1700 0130 00000000 		.word	netif_default
 1701 0134 00000000 		.word	.LC0
 1702 0138 0C000000 		.word	.LC1
 1703 013c 00000000 		.word	.LANCHOR0
 1704              	.LBE123:
 1705              	.LBE125:
 1706              	.LBE127:
 1707              	.LBE129:
 1708              	.LBE131:
 1709              	.LBE133:
 1710              		.cfi_endproc
 1711              	.LFE110:
 1713              		.section	.bss.ip_id,"aw",%nobits
 1714              		.align	1
 1715              		.set	.LANCHOR0,. + 0
 1718              	ip_id:
 1719 0000 0000     		.space	2
 1720              		.text
 1721              	.Letext0:
 1722              		.file 3 "/usr/arm-none-eabi/include/machine/_default_types.h"
 1723              		.file 4 "/usr/arm-none-eabi/include/sys/lock.h"
 1724              		.file 5 "/usr/arm-none-eabi/include/sys/_types.h"
 1725              		.file 6 "/usr/lib/gcc/arm-none-eabi/9.2.0/include/stddef.h"
 1726              		.file 7 "/usr/arm-none-eabi/include/sys/reent.h"
 1727              		.file 8 "/usr/arm-none-eabi/include/stdlib.h"
 1728              		.file 9 "/usr/arm-none-eabi/include/sys/_stdint.h"
 1729              		.file 10 "lwIP/src/include/lwip/arch.h"
 1730              		.file 11 "/usr/arm-none-eabi/include/ctype.h"
 1731              		.file 12 "lwIP/src/include/lwip/err.h"
 1732              		.file 13 "lwIP/src/include/lwip/pbuf.h"
 1733              		.file 14 "lwIP/src/include/lwip/ip4_addr.h"
 1734              		.file 15 "lwIP/src/include/lwip/ip_addr.h"
 1735              		.file 16 "lwIP/src/include/lwip/memp.h"
 1736              		.file 17 "lwIP/src/include/lwip/priv/memp_priv.h"
 1737              		.file 18 "lwIP/src/include/lwip/netif.h"
 1738              		.file 19 "lwIP/src/include/lwip/prot/ip4.h"
 1739              		.file 20 "lwIP/src/include/lwip/ip.h"
 1740              		.file 21 "lwIP/src/include/lwip/prot/udp.h"
 1741              		.file 22 "lwIP/src/include/lwip/udp.h"
 1742              		.file 23 "lwIP/src/include/lwip/tcpbase.h"
 1743              		.file 24 "lwIP/src/include/lwip/icmp.h"
 1744              		.file 25 "lwIP/src/include/lwip/tcp.h"
 1745              		.file 26 "lwIP/src/include/lwip/priv/tcp_priv.h"
ARM GAS  /tmp/ccjJALFP.s 			page 75


 1746              		.file 27 "lwIP/src/include/lwip/prot/tcp.h"
 1747              		.file 28 "/usr/arm-none-eabi/include/stdio.h"
 1748              		.file 29 "lwIP/src/include/lwip/ip4_frag.h"
 1749              		.file 30 "lwIP/src/include/lwip/inet_chksum.h"
ARM GAS  /tmp/ccjJALFP.s 			page 76


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ip4.c
     /tmp/ccjJALFP.s:18     .text.ip4_route:0000000000000000 $t
     /tmp/ccjJALFP.s:27     .text.ip4_route:0000000000000000 ip4_route
     /tmp/ccjJALFP.s:64     .text.ip4_route:0000000000000020 $d
     /tmp/ccjJALFP.s:69     .text.ip4_input:0000000000000000 $t
     /tmp/ccjJALFP.s:77     .text.ip4_input:0000000000000000 ip4_input
     /tmp/ccjJALFP.s:452    .text.ip4_input:000000000000015c $d
     /tmp/ccjJALFP.s:457    .rodata.ip4_output_if.str1.4:0000000000000000 $d
     /tmp/ccjJALFP.s:464    .text.ip4_output_if:0000000000000000 $t
     /tmp/ccjJALFP.s:472    .text.ip4_output_if:0000000000000000 ip4_output_if
     /tmp/ccjJALFP.s:878    .text.ip4_output_if:000000000000011c $d
     /tmp/ccjJALFP.s:891    .text.ip4_output_if_src:0000000000000000 $t
     /tmp/ccjJALFP.s:899    .text.ip4_output_if_src:0000000000000000 ip4_output_if_src
     /tmp/ccjJALFP.s:1245   .text.ip4_output_if_src:0000000000000108 $d
     /tmp/ccjJALFP.s:1256   .text.ip4_output:0000000000000000 $t
     /tmp/ccjJALFP.s:1264   .text.ip4_output:0000000000000000 ip4_output
     /tmp/ccjJALFP.s:1700   .text.ip4_output:0000000000000130 $d
     /tmp/ccjJALFP.s:1714   .bss.ip_id:0000000000000000 $d
     /tmp/ccjJALFP.s:1718   .bss.ip_id:0000000000000000 ip_id

UNDEFINED SYMBOLS
netif_default
pbuf_free
pbuf_realloc
inet_chksum
ip4_addr_isbroadcast_u32
ip4_reass
pbuf_remove_header
pbuf_header_force
icmp_dest_unreach
icmp_input
udp_input
tcp_input
ip_data
printf
pbuf_add_header
ip4_frag
ip_addr_any
